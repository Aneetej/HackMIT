
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model Insight
 * 
 */
export type Insight = $Result.DefaultSelection<Prisma.$InsightPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model ChatSession
 * 
 */
export type ChatSession = $Result.DefaultSelection<Prisma.$ChatSessionPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model StudentPreference
 * 
 */
export type StudentPreference = $Result.DefaultSelection<Prisma.$StudentPreferencePayload>
/**
 * Model LearningAnalytics
 * 
 */
export type LearningAnalytics = $Result.DefaultSelection<Prisma.$LearningAnalyticsPayload>
/**
 * Model FrequentlyAskedQuestion
 * 
 */
export type FrequentlyAskedQuestion = $Result.DefaultSelection<Prisma.$FrequentlyAskedQuestionPayload>
/**
 * Model SessionTakeaway
 * 
 */
export type SessionTakeaway = $Result.DefaultSelection<Prisma.$SessionTakeawayPayload>
/**
 * Model AnalyticsRequest
 * 
 */
export type AnalyticsRequest = $Result.DefaultSelection<Prisma.$AnalyticsRequestPayload>
/**
 * Model AgentInteraction
 * 
 */
export type AgentInteraction = $Result.DefaultSelection<Prisma.$AgentInteractionPayload>
/**
 * Model Summary
 * 
 */
export type Summary = $Result.DefaultSelection<Prisma.$SummaryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Difficulty: {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insight`: Exposes CRUD operations for the **Insight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Insights
    * const insights = await prisma.insight.findMany()
    * ```
    */
  get insight(): Prisma.InsightDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatSession`: Exposes CRUD operations for the **ChatSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSession.findMany()
    * ```
    */
  get chatSession(): Prisma.ChatSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentPreference`: Exposes CRUD operations for the **StudentPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentPreferences
    * const studentPreferences = await prisma.studentPreference.findMany()
    * ```
    */
  get studentPreference(): Prisma.StudentPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.learningAnalytics`: Exposes CRUD operations for the **LearningAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningAnalytics
    * const learningAnalytics = await prisma.learningAnalytics.findMany()
    * ```
    */
  get learningAnalytics(): Prisma.LearningAnalyticsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.frequentlyAskedQuestion`: Exposes CRUD operations for the **FrequentlyAskedQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FrequentlyAskedQuestions
    * const frequentlyAskedQuestions = await prisma.frequentlyAskedQuestion.findMany()
    * ```
    */
  get frequentlyAskedQuestion(): Prisma.FrequentlyAskedQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionTakeaway`: Exposes CRUD operations for the **SessionTakeaway** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionTakeaways
    * const sessionTakeaways = await prisma.sessionTakeaway.findMany()
    * ```
    */
  get sessionTakeaway(): Prisma.SessionTakeawayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.analyticsRequest`: Exposes CRUD operations for the **AnalyticsRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnalyticsRequests
    * const analyticsRequests = await prisma.analyticsRequest.findMany()
    * ```
    */
  get analyticsRequest(): Prisma.AnalyticsRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agentInteraction`: Exposes CRUD operations for the **AgentInteraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentInteractions
    * const agentInteractions = await prisma.agentInteraction.findMany()
    * ```
    */
  get agentInteraction(): Prisma.AgentInteractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.summary`: Exposes CRUD operations for the **Summary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Summaries
    * const summaries = await prisma.summary.findMany()
    * ```
    */
  get summary(): Prisma.SummaryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student: 'Student',
    Note: 'Note',
    Class: 'Class',
    Insight: 'Insight',
    Teacher: 'Teacher',
    ChatSession: 'ChatSession',
    ChatMessage: 'ChatMessage',
    StudentPreference: 'StudentPreference',
    LearningAnalytics: 'LearningAnalytics',
    FrequentlyAskedQuestion: 'FrequentlyAskedQuestion',
    SessionTakeaway: 'SessionTakeaway',
    AnalyticsRequest: 'AnalyticsRequest',
    AgentInteraction: 'AgentInteraction',
    Summary: 'Summary'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "student" | "note" | "class" | "insight" | "teacher" | "chatSession" | "chatMessage" | "studentPreference" | "learningAnalytics" | "frequentlyAskedQuestion" | "sessionTakeaway" | "analyticsRequest" | "agentInteraction" | "summary"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      Insight: {
        payload: Prisma.$InsightPayload<ExtArgs>
        fields: Prisma.InsightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          findFirst: {
            args: Prisma.InsightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          findMany: {
            args: Prisma.InsightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          create: {
            args: Prisma.InsightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          createMany: {
            args: Prisma.InsightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          delete: {
            args: Prisma.InsightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          update: {
            args: Prisma.InsightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          deleteMany: {
            args: Prisma.InsightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InsightUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          upsert: {
            args: Prisma.InsightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          aggregate: {
            args: Prisma.InsightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsight>
          }
          groupBy: {
            args: Prisma.InsightGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsightGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsightCountArgs<ExtArgs>
            result: $Utils.Optional<InsightCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      ChatSession: {
        payload: Prisma.$ChatSessionPayload<ExtArgs>
        fields: Prisma.ChatSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findMany: {
            args: Prisma.ChatSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          create: {
            args: Prisma.ChatSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          createMany: {
            args: Prisma.ChatSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          update: {
            args: Prisma.ChatSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          upsert: {
            args: Prisma.ChatSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatSession>
          }
          groupBy: {
            args: Prisma.ChatSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      StudentPreference: {
        payload: Prisma.$StudentPreferencePayload<ExtArgs>
        fields: Prisma.StudentPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>
          }
          findFirst: {
            args: Prisma.StudentPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>
          }
          findMany: {
            args: Prisma.StudentPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>[]
          }
          create: {
            args: Prisma.StudentPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>
          }
          createMany: {
            args: Prisma.StudentPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>[]
          }
          delete: {
            args: Prisma.StudentPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>
          }
          update: {
            args: Prisma.StudentPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>
          }
          deleteMany: {
            args: Prisma.StudentPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>[]
          }
          upsert: {
            args: Prisma.StudentPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPreferencePayload>
          }
          aggregate: {
            args: Prisma.StudentPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentPreference>
          }
          groupBy: {
            args: Prisma.StudentPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<StudentPreferenceCountAggregateOutputType> | number
          }
        }
      }
      LearningAnalytics: {
        payload: Prisma.$LearningAnalyticsPayload<ExtArgs>
        fields: Prisma.LearningAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.LearningAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>
          }
          findMany: {
            args: Prisma.LearningAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>[]
          }
          create: {
            args: Prisma.LearningAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>
          }
          createMany: {
            args: Prisma.LearningAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningAnalyticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>[]
          }
          delete: {
            args: Prisma.LearningAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>
          }
          update: {
            args: Prisma.LearningAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.LearningAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LearningAnalyticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>[]
          }
          upsert: {
            args: Prisma.LearningAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.LearningAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningAnalytics>
          }
          groupBy: {
            args: Prisma.LearningAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<LearningAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      FrequentlyAskedQuestion: {
        payload: Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>
        fields: Prisma.FrequentlyAskedQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrequentlyAskedQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrequentlyAskedQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>
          }
          findFirst: {
            args: Prisma.FrequentlyAskedQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrequentlyAskedQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>
          }
          findMany: {
            args: Prisma.FrequentlyAskedQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>[]
          }
          create: {
            args: Prisma.FrequentlyAskedQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>
          }
          createMany: {
            args: Prisma.FrequentlyAskedQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FrequentlyAskedQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>[]
          }
          delete: {
            args: Prisma.FrequentlyAskedQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>
          }
          update: {
            args: Prisma.FrequentlyAskedQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>
          }
          deleteMany: {
            args: Prisma.FrequentlyAskedQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FrequentlyAskedQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FrequentlyAskedQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>[]
          }
          upsert: {
            args: Prisma.FrequentlyAskedQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrequentlyAskedQuestionPayload>
          }
          aggregate: {
            args: Prisma.FrequentlyAskedQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrequentlyAskedQuestion>
          }
          groupBy: {
            args: Prisma.FrequentlyAskedQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrequentlyAskedQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrequentlyAskedQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<FrequentlyAskedQuestionCountAggregateOutputType> | number
          }
        }
      }
      SessionTakeaway: {
        payload: Prisma.$SessionTakeawayPayload<ExtArgs>
        fields: Prisma.SessionTakeawayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionTakeawayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionTakeawayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>
          }
          findFirst: {
            args: Prisma.SessionTakeawayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionTakeawayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>
          }
          findMany: {
            args: Prisma.SessionTakeawayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>[]
          }
          create: {
            args: Prisma.SessionTakeawayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>
          }
          createMany: {
            args: Prisma.SessionTakeawayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionTakeawayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>[]
          }
          delete: {
            args: Prisma.SessionTakeawayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>
          }
          update: {
            args: Prisma.SessionTakeawayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>
          }
          deleteMany: {
            args: Prisma.SessionTakeawayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionTakeawayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionTakeawayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>[]
          }
          upsert: {
            args: Prisma.SessionTakeawayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionTakeawayPayload>
          }
          aggregate: {
            args: Prisma.SessionTakeawayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionTakeaway>
          }
          groupBy: {
            args: Prisma.SessionTakeawayGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionTakeawayGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionTakeawayCountArgs<ExtArgs>
            result: $Utils.Optional<SessionTakeawayCountAggregateOutputType> | number
          }
        }
      }
      AnalyticsRequest: {
        payload: Prisma.$AnalyticsRequestPayload<ExtArgs>
        fields: Prisma.AnalyticsRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnalyticsRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnalyticsRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>
          }
          findFirst: {
            args: Prisma.AnalyticsRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnalyticsRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>
          }
          findMany: {
            args: Prisma.AnalyticsRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>[]
          }
          create: {
            args: Prisma.AnalyticsRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>
          }
          createMany: {
            args: Prisma.AnalyticsRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnalyticsRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>[]
          }
          delete: {
            args: Prisma.AnalyticsRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>
          }
          update: {
            args: Prisma.AnalyticsRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>
          }
          deleteMany: {
            args: Prisma.AnalyticsRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnalyticsRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnalyticsRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>[]
          }
          upsert: {
            args: Prisma.AnalyticsRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsRequestPayload>
          }
          aggregate: {
            args: Prisma.AnalyticsRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnalyticsRequest>
          }
          groupBy: {
            args: Prisma.AnalyticsRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnalyticsRequestCountArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsRequestCountAggregateOutputType> | number
          }
        }
      }
      AgentInteraction: {
        payload: Prisma.$AgentInteractionPayload<ExtArgs>
        fields: Prisma.AgentInteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentInteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentInteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>
          }
          findFirst: {
            args: Prisma.AgentInteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentInteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>
          }
          findMany: {
            args: Prisma.AgentInteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>[]
          }
          create: {
            args: Prisma.AgentInteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>
          }
          createMany: {
            args: Prisma.AgentInteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentInteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>[]
          }
          delete: {
            args: Prisma.AgentInteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>
          }
          update: {
            args: Prisma.AgentInteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>
          }
          deleteMany: {
            args: Prisma.AgentInteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentInteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgentInteractionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>[]
          }
          upsert: {
            args: Prisma.AgentInteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentInteractionPayload>
          }
          aggregate: {
            args: Prisma.AgentInteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentInteraction>
          }
          groupBy: {
            args: Prisma.AgentInteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentInteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentInteractionCountArgs<ExtArgs>
            result: $Utils.Optional<AgentInteractionCountAggregateOutputType> | number
          }
        }
      }
      Summary: {
        payload: Prisma.$SummaryPayload<ExtArgs>
        fields: Prisma.SummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>
          }
          findFirst: {
            args: Prisma.SummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>
          }
          findMany: {
            args: Prisma.SummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>[]
          }
          create: {
            args: Prisma.SummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>
          }
          createMany: {
            args: Prisma.SummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SummaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>[]
          }
          delete: {
            args: Prisma.SummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>
          }
          update: {
            args: Prisma.SummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>
          }
          deleteMany: {
            args: Prisma.SummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SummaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>[]
          }
          upsert: {
            args: Prisma.SummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SummaryPayload>
          }
          aggregate: {
            args: Prisma.SummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSummary>
          }
          groupBy: {
            args: Prisma.SummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SummaryCountArgs<ExtArgs>
            result: $Utils.Optional<SummaryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    student?: StudentOmit
    note?: NoteOmit
    class?: ClassOmit
    insight?: InsightOmit
    teacher?: TeacherOmit
    chatSession?: ChatSessionOmit
    chatMessage?: ChatMessageOmit
    studentPreference?: StudentPreferenceOmit
    learningAnalytics?: LearningAnalyticsOmit
    frequentlyAskedQuestion?: FrequentlyAskedQuestionOmit
    sessionTakeaway?: SessionTakeawayOmit
    analyticsRequest?: AnalyticsRequestOmit
    agentInteraction?: AgentInteractionOmit
    summary?: SummaryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    chat_sessions: number
    learning_analytics: number
    notes: number
    preferences: number
    classes: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat_sessions?: boolean | StudentCountOutputTypeCountChat_sessionsArgs
    learning_analytics?: boolean | StudentCountOutputTypeCountLearning_analyticsArgs
    notes?: boolean | StudentCountOutputTypeCountNotesArgs
    preferences?: boolean | StudentCountOutputTypeCountPreferencesArgs
    classes?: boolean | StudentCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountChat_sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountLearning_analyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningAnalyticsWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPreferenceWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    chatSessions: number
    insights: number
    notes: number
    students: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSessions?: boolean | ClassCountOutputTypeCountChatSessionsArgs
    insights?: boolean | ClassCountOutputTypeCountInsightsArgs
    notes?: boolean | ClassCountOutputTypeCountNotesArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountChatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountInsightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    analytics_requests: number
    classes: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    analytics_requests?: boolean | TeacherCountOutputTypeCountAnalytics_requestsArgs
    classes?: boolean | TeacherCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountAnalytics_requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsRequestWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }


  /**
   * Count Type ChatSessionCountOutputType
   */

  export type ChatSessionCountOutputType = {
    messages: number
    takeaways: number
  }

  export type ChatSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
    takeaways?: boolean | ChatSessionCountOutputTypeCountTakeawaysArgs
  }

  // Custom InputTypes
  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessionCountOutputType
     */
    select?: ChatSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountTakeawaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionTakeawayWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    grade: number | null
  }

  export type StudentSumAggregateOutputType = {
    grade: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    name: string | null
    role: $Enums.Role | null
    email: string | null
    grade: number | null
    subject_focus: string | null
    learning_style: string | null
    preferred_content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    role: $Enums.Role | null
    email: string | null
    grade: number | null
    subject_focus: string | null
    learning_style: string | null
    preferred_content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    name: number
    role: number
    email: number
    grade: number
    subject_focus: number
    learning_style: number
    preferred_content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    grade?: true
  }

  export type StudentSumAggregateInputType = {
    grade?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    grade?: true
    subject_focus?: true
    learning_style?: true
    preferred_content?: true
    created_at?: true
    updated_at?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    grade?: true
    subject_focus?: true
    learning_style?: true
    preferred_content?: true
    created_at?: true
    updated_at?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    grade?: true
    subject_focus?: true
    learning_style?: true
    preferred_content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    name: string
    role: $Enums.Role
    email: string
    grade: number
    subject_focus: string
    learning_style: string
    preferred_content: string
    created_at: Date
    updated_at: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    grade?: boolean
    subject_focus?: boolean
    learning_style?: boolean
    preferred_content?: boolean
    created_at?: boolean
    updated_at?: boolean
    chat_sessions?: boolean | Student$chat_sessionsArgs<ExtArgs>
    learning_analytics?: boolean | Student$learning_analyticsArgs<ExtArgs>
    notes?: boolean | Student$notesArgs<ExtArgs>
    preferences?: boolean | Student$preferencesArgs<ExtArgs>
    classes?: boolean | Student$classesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    grade?: boolean
    subject_focus?: boolean
    learning_style?: boolean
    preferred_content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    grade?: boolean
    subject_focus?: boolean
    learning_style?: boolean
    preferred_content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    grade?: boolean
    subject_focus?: boolean
    learning_style?: boolean
    preferred_content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "role" | "email" | "grade" | "subject_focus" | "learning_style" | "preferred_content" | "created_at" | "updated_at", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat_sessions?: boolean | Student$chat_sessionsArgs<ExtArgs>
    learning_analytics?: boolean | Student$learning_analyticsArgs<ExtArgs>
    notes?: boolean | Student$notesArgs<ExtArgs>
    preferences?: boolean | Student$preferencesArgs<ExtArgs>
    classes?: boolean | Student$classesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      chat_sessions: Prisma.$ChatSessionPayload<ExtArgs>[]
      learning_analytics: Prisma.$LearningAnalyticsPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      preferences: Prisma.$StudentPreferencePayload<ExtArgs>[]
      classes: Prisma.$ClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      role: $Enums.Role
      email: string
      grade: number
      subject_focus: string
      learning_style: string
      preferred_content: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chat_sessions<T extends Student$chat_sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$chat_sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    learning_analytics<T extends Student$learning_analyticsArgs<ExtArgs> = {}>(args?: Subset<T, Student$learning_analyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends Student$notesArgs<ExtArgs> = {}>(args?: Subset<T, Student$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferences<T extends Student$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, Student$preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends Student$classesArgs<ExtArgs> = {}>(args?: Subset<T, Student$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly name: FieldRef<"Student", 'String'>
    readonly role: FieldRef<"Student", 'Role'>
    readonly email: FieldRef<"Student", 'String'>
    readonly grade: FieldRef<"Student", 'Int'>
    readonly subject_focus: FieldRef<"Student", 'String'>
    readonly learning_style: FieldRef<"Student", 'String'>
    readonly preferred_content: FieldRef<"Student", 'String'>
    readonly created_at: FieldRef<"Student", 'DateTime'>
    readonly updated_at: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.chat_sessions
   */
  export type Student$chat_sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    cursor?: ChatSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * Student.learning_analytics
   */
  export type Student$learning_analyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    where?: LearningAnalyticsWhereInput
    orderBy?: LearningAnalyticsOrderByWithRelationInput | LearningAnalyticsOrderByWithRelationInput[]
    cursor?: LearningAnalyticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningAnalyticsScalarFieldEnum | LearningAnalyticsScalarFieldEnum[]
  }

  /**
   * Student.notes
   */
  export type Student$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Student.preferences
   */
  export type Student$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    where?: StudentPreferenceWhereInput
    orderBy?: StudentPreferenceOrderByWithRelationInput | StudentPreferenceOrderByWithRelationInput[]
    cursor?: StudentPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPreferenceScalarFieldEnum | StudentPreferenceScalarFieldEnum[]
  }

  /**
   * Student.classes
   */
  export type Student$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    content: string | null
    classId: string | null
    studentId: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    content: string | null
    classId: string | null
    studentId: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    content: number
    classId: number
    studentId: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    content?: true
    classId?: true
    studentId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    content?: true
    classId?: true
    studentId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    content?: true
    classId?: true
    studentId?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    content: string
    classId: string
    studentId: string
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    classId?: boolean
    studentId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    classId?: boolean
    studentId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    classId?: boolean
    studentId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    content?: boolean
    classId?: boolean
    studentId?: boolean
  }

  export type NoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "classId" | "studentId", ExtArgs["result"]["note"]>
  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type NoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      classId: string
      studentId: string
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes and returns the data updated in the database.
     * @param {NoteUpdateManyAndReturnArgs} args - Arguments to update many Notes.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoteUpdateManyAndReturnArgs>(args: SelectSubset<T, NoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly content: FieldRef<"Note", 'String'>
    readonly classId: FieldRef<"Note", 'String'>
    readonly studentId: FieldRef<"Note", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
  }

  /**
   * Note updateManyAndReturn
   */
  export type NoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to delete.
     */
    limit?: number
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    name: string | null
    restrictions: string | null
    teachingStyle: string | null
    teacherId: string | null
    otherNotes: string | null
    studentGrade: string | null
    subject: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    name: string | null
    restrictions: string | null
    teachingStyle: string | null
    teacherId: string | null
    otherNotes: string | null
    studentGrade: string | null
    subject: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    restrictions: number
    teachingStyle: number
    teacherId: number
    otherNotes: number
    studentGrade: number
    subject: number
    customInsights: number
    _all: number
  }


  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    restrictions?: true
    teachingStyle?: true
    teacherId?: true
    otherNotes?: true
    studentGrade?: true
    subject?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    restrictions?: true
    teachingStyle?: true
    teacherId?: true
    otherNotes?: true
    studentGrade?: true
    subject?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    restrictions?: true
    teachingStyle?: true
    teacherId?: true
    otherNotes?: true
    studentGrade?: true
    subject?: true
    customInsights?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    name: string
    restrictions: string | null
    teachingStyle: string | null
    teacherId: string | null
    otherNotes: string | null
    studentGrade: string | null
    subject: string | null
    customInsights: string[]
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    restrictions?: boolean
    teachingStyle?: boolean
    teacherId?: boolean
    otherNotes?: boolean
    studentGrade?: boolean
    subject?: boolean
    customInsights?: boolean
    chatSessions?: boolean | Class$chatSessionsArgs<ExtArgs>
    teacher?: boolean | Class$teacherArgs<ExtArgs>
    insights?: boolean | Class$insightsArgs<ExtArgs>
    notes?: boolean | Class$notesArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    restrictions?: boolean
    teachingStyle?: boolean
    teacherId?: boolean
    otherNotes?: boolean
    studentGrade?: boolean
    subject?: boolean
    customInsights?: boolean
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    restrictions?: boolean
    teachingStyle?: boolean
    teacherId?: boolean
    otherNotes?: boolean
    studentGrade?: boolean
    subject?: boolean
    customInsights?: boolean
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    restrictions?: boolean
    teachingStyle?: boolean
    teacherId?: boolean
    otherNotes?: boolean
    studentGrade?: boolean
    subject?: boolean
    customInsights?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "restrictions" | "teachingStyle" | "teacherId" | "otherNotes" | "studentGrade" | "subject" | "customInsights", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSessions?: boolean | Class$chatSessionsArgs<ExtArgs>
    teacher?: boolean | Class$teacherArgs<ExtArgs>
    insights?: boolean | Class$insightsArgs<ExtArgs>
    notes?: boolean | Class$notesArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      chatSessions: Prisma.$ChatSessionPayload<ExtArgs>[]
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
      insights: Prisma.$InsightPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      restrictions: string | null
      teachingStyle: string | null
      teacherId: string | null
      otherNotes: string | null
      studentGrade: string | null
      subject: string | null
      customInsights: string[]
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatSessions<T extends Class$chatSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Class$chatSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacher<T extends Class$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Class$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    insights<T extends Class$insightsArgs<ExtArgs> = {}>(args?: Subset<T, Class$insightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends Class$notesArgs<ExtArgs> = {}>(args?: Subset<T, Class$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
    readonly restrictions: FieldRef<"Class", 'String'>
    readonly teachingStyle: FieldRef<"Class", 'String'>
    readonly teacherId: FieldRef<"Class", 'String'>
    readonly otherNotes: FieldRef<"Class", 'String'>
    readonly studentGrade: FieldRef<"Class", 'String'>
    readonly subject: FieldRef<"Class", 'String'>
    readonly customInsights: FieldRef<"Class", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.chatSessions
   */
  export type Class$chatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    cursor?: ChatSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * Class.teacher
   */
  export type Class$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Class.insights
   */
  export type Class$insightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    where?: InsightWhereInput
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    cursor?: InsightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Class.notes
   */
  export type Class$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model Insight
   */

  export type AggregateInsight = {
    _count: InsightCountAggregateOutputType | null
    _min: InsightMinAggregateOutputType | null
    _max: InsightMaxAggregateOutputType | null
  }

  export type InsightMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    classId: string | null
  }

  export type InsightMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    classId: string | null
  }

  export type InsightCountAggregateOutputType = {
    id: number
    title: number
    description: number
    classId: number
    _all: number
  }


  export type InsightMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    classId?: true
  }

  export type InsightMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    classId?: true
  }

  export type InsightCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    classId?: true
    _all?: true
  }

  export type InsightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insight to aggregate.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Insights
    **/
    _count?: true | InsightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsightMaxAggregateInputType
  }

  export type GetInsightAggregateType<T extends InsightAggregateArgs> = {
        [P in keyof T & keyof AggregateInsight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsight[P]>
      : GetScalarType<T[P], AggregateInsight[P]>
  }




  export type InsightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightWhereInput
    orderBy?: InsightOrderByWithAggregationInput | InsightOrderByWithAggregationInput[]
    by: InsightScalarFieldEnum[] | InsightScalarFieldEnum
    having?: InsightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsightCountAggregateInputType | true
    _min?: InsightMinAggregateInputType
    _max?: InsightMaxAggregateInputType
  }

  export type InsightGroupByOutputType = {
    id: string
    title: string
    description: string
    classId: string
    _count: InsightCountAggregateOutputType | null
    _min: InsightMinAggregateOutputType | null
    _max: InsightMaxAggregateOutputType | null
  }

  type GetInsightGroupByPayload<T extends InsightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsightGroupByOutputType[P]>
            : GetScalarType<T[P], InsightGroupByOutputType[P]>
        }
      >
    >


  export type InsightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
  }

  export type InsightOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "classId", ExtArgs["result"]["insight"]>
  export type InsightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type InsightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type InsightIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $InsightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Insight"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      classId: string
    }, ExtArgs["result"]["insight"]>
    composites: {}
  }

  type InsightGetPayload<S extends boolean | null | undefined | InsightDefaultArgs> = $Result.GetResult<Prisma.$InsightPayload, S>

  type InsightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsightCountAggregateInputType | true
    }

  export interface InsightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Insight'], meta: { name: 'Insight' } }
    /**
     * Find zero or one Insight that matches the filter.
     * @param {InsightFindUniqueArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsightFindUniqueArgs>(args: SelectSubset<T, InsightFindUniqueArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Insight that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsightFindUniqueOrThrowArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsightFindUniqueOrThrowArgs>(args: SelectSubset<T, InsightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Insight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindFirstArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsightFindFirstArgs>(args?: SelectSubset<T, InsightFindFirstArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Insight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindFirstOrThrowArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsightFindFirstOrThrowArgs>(args?: SelectSubset<T, InsightFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Insights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Insights
     * const insights = await prisma.insight.findMany()
     * 
     * // Get first 10 Insights
     * const insights = await prisma.insight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insightWithIdOnly = await prisma.insight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsightFindManyArgs>(args?: SelectSubset<T, InsightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Insight.
     * @param {InsightCreateArgs} args - Arguments to create a Insight.
     * @example
     * // Create one Insight
     * const Insight = await prisma.insight.create({
     *   data: {
     *     // ... data to create a Insight
     *   }
     * })
     * 
     */
    create<T extends InsightCreateArgs>(args: SelectSubset<T, InsightCreateArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Insights.
     * @param {InsightCreateManyArgs} args - Arguments to create many Insights.
     * @example
     * // Create many Insights
     * const insight = await prisma.insight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsightCreateManyArgs>(args?: SelectSubset<T, InsightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Insights and returns the data saved in the database.
     * @param {InsightCreateManyAndReturnArgs} args - Arguments to create many Insights.
     * @example
     * // Create many Insights
     * const insight = await prisma.insight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Insights and only return the `id`
     * const insightWithIdOnly = await prisma.insight.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsightCreateManyAndReturnArgs>(args?: SelectSubset<T, InsightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Insight.
     * @param {InsightDeleteArgs} args - Arguments to delete one Insight.
     * @example
     * // Delete one Insight
     * const Insight = await prisma.insight.delete({
     *   where: {
     *     // ... filter to delete one Insight
     *   }
     * })
     * 
     */
    delete<T extends InsightDeleteArgs>(args: SelectSubset<T, InsightDeleteArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Insight.
     * @param {InsightUpdateArgs} args - Arguments to update one Insight.
     * @example
     * // Update one Insight
     * const insight = await prisma.insight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsightUpdateArgs>(args: SelectSubset<T, InsightUpdateArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Insights.
     * @param {InsightDeleteManyArgs} args - Arguments to filter Insights to delete.
     * @example
     * // Delete a few Insights
     * const { count } = await prisma.insight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsightDeleteManyArgs>(args?: SelectSubset<T, InsightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Insights
     * const insight = await prisma.insight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsightUpdateManyArgs>(args: SelectSubset<T, InsightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insights and returns the data updated in the database.
     * @param {InsightUpdateManyAndReturnArgs} args - Arguments to update many Insights.
     * @example
     * // Update many Insights
     * const insight = await prisma.insight.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Insights and only return the `id`
     * const insightWithIdOnly = await prisma.insight.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InsightUpdateManyAndReturnArgs>(args: SelectSubset<T, InsightUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Insight.
     * @param {InsightUpsertArgs} args - Arguments to update or create a Insight.
     * @example
     * // Update or create a Insight
     * const insight = await prisma.insight.upsert({
     *   create: {
     *     // ... data to create a Insight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Insight we want to update
     *   }
     * })
     */
    upsert<T extends InsightUpsertArgs>(args: SelectSubset<T, InsightUpsertArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Insights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCountArgs} args - Arguments to filter Insights to count.
     * @example
     * // Count the number of Insights
     * const count = await prisma.insight.count({
     *   where: {
     *     // ... the filter for the Insights we want to count
     *   }
     * })
    **/
    count<T extends InsightCountArgs>(
      args?: Subset<T, InsightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Insight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsightAggregateArgs>(args: Subset<T, InsightAggregateArgs>): Prisma.PrismaPromise<GetInsightAggregateType<T>>

    /**
     * Group by Insight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsightGroupByArgs['orderBy'] }
        : { orderBy?: InsightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Insight model
   */
  readonly fields: InsightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Insight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Insight model
   */
  interface InsightFieldRefs {
    readonly id: FieldRef<"Insight", 'String'>
    readonly title: FieldRef<"Insight", 'String'>
    readonly description: FieldRef<"Insight", 'String'>
    readonly classId: FieldRef<"Insight", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Insight findUnique
   */
  export type InsightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight findUniqueOrThrow
   */
  export type InsightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight findFirst
   */
  export type InsightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insights.
     */
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight findFirstOrThrow
   */
  export type InsightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insights.
     */
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight findMany
   */
  export type InsightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insights to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight create
   */
  export type InsightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The data needed to create a Insight.
     */
    data: XOR<InsightCreateInput, InsightUncheckedCreateInput>
  }

  /**
   * Insight createMany
   */
  export type InsightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Insights.
     */
    data: InsightCreateManyInput | InsightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Insight createManyAndReturn
   */
  export type InsightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * The data used to create many Insights.
     */
    data: InsightCreateManyInput | InsightCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Insight update
   */
  export type InsightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The data needed to update a Insight.
     */
    data: XOR<InsightUpdateInput, InsightUncheckedUpdateInput>
    /**
     * Choose, which Insight to update.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight updateMany
   */
  export type InsightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Insights.
     */
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyInput>
    /**
     * Filter which Insights to update
     */
    where?: InsightWhereInput
    /**
     * Limit how many Insights to update.
     */
    limit?: number
  }

  /**
   * Insight updateManyAndReturn
   */
  export type InsightUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * The data used to update Insights.
     */
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyInput>
    /**
     * Filter which Insights to update
     */
    where?: InsightWhereInput
    /**
     * Limit how many Insights to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Insight upsert
   */
  export type InsightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The filter to search for the Insight to update in case it exists.
     */
    where: InsightWhereUniqueInput
    /**
     * In case the Insight found by the `where` argument doesn't exist, create a new Insight with this data.
     */
    create: XOR<InsightCreateInput, InsightUncheckedCreateInput>
    /**
     * In case the Insight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsightUpdateInput, InsightUncheckedUpdateInput>
  }

  /**
   * Insight delete
   */
  export type InsightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter which Insight to delete.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight deleteMany
   */
  export type InsightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insights to delete
     */
    where?: InsightWhereInput
    /**
     * Limit how many Insights to delete.
     */
    limit?: number
  }

  /**
   * Insight without action
   */
  export type InsightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    name: string | null
    role: $Enums.Role | null
    email: string | null
    subject: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    name: string | null
    role: $Enums.Role | null
    email: string | null
    subject: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    name: number
    role: number
    email: number
    subject: number
    created_at: number
    updated_at: number
    supervised_students: number
    _all: number
  }


  export type TeacherMinAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    subject?: true
    created_at?: true
    updated_at?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    subject?: true
    created_at?: true
    updated_at?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    subject?: true
    created_at?: true
    updated_at?: true
    supervised_students?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: string
    name: string
    role: $Enums.Role
    email: string
    subject: string
    created_at: Date
    updated_at: Date
    supervised_students: string[]
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    subject?: boolean
    created_at?: boolean
    updated_at?: boolean
    supervised_students?: boolean
    analytics_requests?: boolean | Teacher$analytics_requestsArgs<ExtArgs>
    classes?: boolean | Teacher$classesArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    subject?: boolean
    created_at?: boolean
    updated_at?: boolean
    supervised_students?: boolean
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    subject?: boolean
    created_at?: boolean
    updated_at?: boolean
    supervised_students?: boolean
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    subject?: boolean
    created_at?: boolean
    updated_at?: boolean
    supervised_students?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "role" | "email" | "subject" | "created_at" | "updated_at" | "supervised_students", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    analytics_requests?: boolean | Teacher$analytics_requestsArgs<ExtArgs>
    classes?: boolean | Teacher$classesArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      analytics_requests: Prisma.$AnalyticsRequestPayload<ExtArgs>[]
      classes: Prisma.$ClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      role: $Enums.Role
      email: string
      subject: string
      created_at: Date
      updated_at: Date
      supervised_students: string[]
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    analytics_requests<T extends Teacher$analytics_requestsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$analytics_requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends Teacher$classesArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'String'>
    readonly name: FieldRef<"Teacher", 'String'>
    readonly role: FieldRef<"Teacher", 'Role'>
    readonly email: FieldRef<"Teacher", 'String'>
    readonly subject: FieldRef<"Teacher", 'String'>
    readonly created_at: FieldRef<"Teacher", 'DateTime'>
    readonly updated_at: FieldRef<"Teacher", 'DateTime'>
    readonly supervised_students: FieldRef<"Teacher", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher.analytics_requests
   */
  export type Teacher$analytics_requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    where?: AnalyticsRequestWhereInput
    orderBy?: AnalyticsRequestOrderByWithRelationInput | AnalyticsRequestOrderByWithRelationInput[]
    cursor?: AnalyticsRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnalyticsRequestScalarFieldEnum | AnalyticsRequestScalarFieldEnum[]
  }

  /**
   * Teacher.classes
   */
  export type Teacher$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model ChatSession
   */

  export type AggregateChatSession = {
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  export type ChatSessionAvgAggregateOutputType = {
    questions_asked: number | null
  }

  export type ChatSessionSumAggregateOutputType = {
    questions_asked: number | null
  }

  export type ChatSessionMinAggregateOutputType = {
    id: string | null
    student_id: string | null
    session_type: string | null
    started_at: Date | null
    ended_at: Date | null
    status: string | null
    questions_asked: number | null
    difficulty_level: $Enums.Difficulty | null
    classId: string | null
  }

  export type ChatSessionMaxAggregateOutputType = {
    id: string | null
    student_id: string | null
    session_type: string | null
    started_at: Date | null
    ended_at: Date | null
    status: string | null
    questions_asked: number | null
    difficulty_level: $Enums.Difficulty | null
    classId: string | null
  }

  export type ChatSessionCountAggregateOutputType = {
    id: number
    student_id: number
    session_type: number
    started_at: number
    ended_at: number
    status: number
    questions_asked: number
    concepts_covered: number
    difficulty_level: number
    success_indicators: number
    classId: number
    _all: number
  }


  export type ChatSessionAvgAggregateInputType = {
    questions_asked?: true
  }

  export type ChatSessionSumAggregateInputType = {
    questions_asked?: true
  }

  export type ChatSessionMinAggregateInputType = {
    id?: true
    student_id?: true
    session_type?: true
    started_at?: true
    ended_at?: true
    status?: true
    questions_asked?: true
    difficulty_level?: true
    classId?: true
  }

  export type ChatSessionMaxAggregateInputType = {
    id?: true
    student_id?: true
    session_type?: true
    started_at?: true
    ended_at?: true
    status?: true
    questions_asked?: true
    difficulty_level?: true
    classId?: true
  }

  export type ChatSessionCountAggregateInputType = {
    id?: true
    student_id?: true
    session_type?: true
    started_at?: true
    ended_at?: true
    status?: true
    questions_asked?: true
    concepts_covered?: true
    difficulty_level?: true
    success_indicators?: true
    classId?: true
    _all?: true
  }

  export type ChatSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSession to aggregate.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionMaxAggregateInputType
  }

  export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSession[P]>
      : GetScalarType<T[P], AggregateChatSession[P]>
  }




  export type ChatSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithAggregationInput | ChatSessionOrderByWithAggregationInput[]
    by: ChatSessionScalarFieldEnum[] | ChatSessionScalarFieldEnum
    having?: ChatSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionCountAggregateInputType | true
    _avg?: ChatSessionAvgAggregateInputType
    _sum?: ChatSessionSumAggregateInputType
    _min?: ChatSessionMinAggregateInputType
    _max?: ChatSessionMaxAggregateInputType
  }

  export type ChatSessionGroupByOutputType = {
    id: string
    student_id: string
    session_type: string
    started_at: Date
    ended_at: Date | null
    status: string
    questions_asked: number
    concepts_covered: string[]
    difficulty_level: $Enums.Difficulty
    success_indicators: JsonValue | null
    classId: string | null
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    session_type?: boolean
    started_at?: boolean
    ended_at?: boolean
    status?: boolean
    questions_asked?: boolean
    concepts_covered?: boolean
    difficulty_level?: boolean
    success_indicators?: boolean
    classId?: boolean
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    class?: boolean | ChatSession$classArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    takeaways?: boolean | ChatSession$takeawaysArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    session_type?: boolean
    started_at?: boolean
    ended_at?: boolean
    status?: boolean
    questions_asked?: boolean
    concepts_covered?: boolean
    difficulty_level?: boolean
    success_indicators?: boolean
    classId?: boolean
    class?: boolean | ChatSession$classArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    session_type?: boolean
    started_at?: boolean
    ended_at?: boolean
    status?: boolean
    questions_asked?: boolean
    concepts_covered?: boolean
    difficulty_level?: boolean
    success_indicators?: boolean
    classId?: boolean
    class?: boolean | ChatSession$classArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectScalar = {
    id?: boolean
    student_id?: boolean
    session_type?: boolean
    started_at?: boolean
    ended_at?: boolean
    status?: boolean
    questions_asked?: boolean
    concepts_covered?: boolean
    difficulty_level?: boolean
    success_indicators?: boolean
    classId?: boolean
  }

  export type ChatSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "session_type" | "started_at" | "ended_at" | "status" | "questions_asked" | "concepts_covered" | "difficulty_level" | "success_indicators" | "classId", ExtArgs["result"]["chatSession"]>
  export type ChatSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    class?: boolean | ChatSession$classArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    takeaways?: boolean | ChatSession$takeawaysArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ChatSession$classArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ChatSession$classArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $ChatSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSession"
    objects: {
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
      class: Prisma.$ClassPayload<ExtArgs> | null
      student: Prisma.$StudentPayload<ExtArgs>
      takeaways: Prisma.$SessionTakeawayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      student_id: string
      session_type: string
      started_at: Date
      ended_at: Date | null
      status: string
      questions_asked: number
      concepts_covered: string[]
      difficulty_level: $Enums.Difficulty
      success_indicators: Prisma.JsonValue | null
      classId: string | null
    }, ExtArgs["result"]["chatSession"]>
    composites: {}
  }

  type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionPayload, S>

  type ChatSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatSessionCountAggregateInputType | true
    }

  export interface ChatSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
    /**
     * Find zero or one ChatSession that matches the filter.
     * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatSessionFindUniqueArgs>(args: SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatSessionFindFirstArgs>(args?: SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSession.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatSessionFindManyArgs>(args?: SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatSession.
     * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
     * @example
     * // Create one ChatSession
     * const ChatSession = await prisma.chatSession.create({
     *   data: {
     *     // ... data to create a ChatSession
     *   }
     * })
     * 
     */
    create<T extends ChatSessionCreateArgs>(args: SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatSessionCreateManyArgs>(args?: SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatSessions and returns the data saved in the database.
     * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatSession.
     * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
     * @example
     * // Delete one ChatSession
     * const ChatSession = await prisma.chatSession.delete({
     *   where: {
     *     // ... filter to delete one ChatSession
     *   }
     * })
     * 
     */
    delete<T extends ChatSessionDeleteArgs>(args: SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatSession.
     * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
     * @example
     * // Update one ChatSession
     * const chatSession = await prisma.chatSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatSessionUpdateArgs>(args: SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatSessionDeleteManyArgs>(args?: SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatSessionUpdateManyArgs>(args: SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions and returns the data updated in the database.
     * @param {ChatSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatSessions.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatSession.
     * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
     * @example
     * // Update or create a ChatSession
     * const chatSession = await prisma.chatSession.upsert({
     *   create: {
     *     // ... data to create a ChatSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatSessionUpsertArgs>(args: SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSession.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionCountArgs>(
      args?: Subset<T, ChatSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionAggregateArgs>(args: Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

    /**
     * Group by ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSession model
   */
  readonly fields: ChatSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends ChatSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    class<T extends ChatSession$classArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    takeaways<T extends ChatSession$takeawaysArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$takeawaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatSession model
   */
  interface ChatSessionFieldRefs {
    readonly id: FieldRef<"ChatSession", 'String'>
    readonly student_id: FieldRef<"ChatSession", 'String'>
    readonly session_type: FieldRef<"ChatSession", 'String'>
    readonly started_at: FieldRef<"ChatSession", 'DateTime'>
    readonly ended_at: FieldRef<"ChatSession", 'DateTime'>
    readonly status: FieldRef<"ChatSession", 'String'>
    readonly questions_asked: FieldRef<"ChatSession", 'Int'>
    readonly concepts_covered: FieldRef<"ChatSession", 'String[]'>
    readonly difficulty_level: FieldRef<"ChatSession", 'Difficulty'>
    readonly success_indicators: FieldRef<"ChatSession", 'Json'>
    readonly classId: FieldRef<"ChatSession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatSession findUnique
   */
  export type ChatSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findUniqueOrThrow
   */
  export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findFirst
   */
  export type ChatSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findFirstOrThrow
   */
  export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findMany
   */
  export type ChatSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession create
   */
  export type ChatSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatSession.
     */
    data: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
  }

  /**
   * ChatSession createMany
   */
  export type ChatSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession createManyAndReturn
   */
  export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatSession update
   */
  export type ChatSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatSession.
     */
    data: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatSession to update.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession updateMany
   */
  export type ChatSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession updateManyAndReturn
   */
  export type ChatSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatSession upsert
   */
  export type ChatSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatSession to update in case it exists.
     */
    where: ChatSessionWhereUniqueInput
    /**
     * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
     */
    create: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
    /**
     * In case the ChatSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
  }

  /**
   * ChatSession delete
   */
  export type ChatSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatSession to delete.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession deleteMany
   */
  export type ChatSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to delete.
     */
    limit?: number
  }

  /**
   * ChatSession.messages
   */
  export type ChatSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatSession.class
   */
  export type ChatSession$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * ChatSession.takeaways
   */
  export type ChatSession$takeawaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    where?: SessionTakeawayWhereInput
    orderBy?: SessionTakeawayOrderByWithRelationInput | SessionTakeawayOrderByWithRelationInput[]
    cursor?: SessionTakeawayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionTakeawayScalarFieldEnum | SessionTakeawayScalarFieldEnum[]
  }

  /**
   * ChatSession without action
   */
  export type ChatSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    session_id: string | null
    sender_type: string | null
    agent_type: string | null
    content: string | null
    message_type: string | null
    timestamp: Date | null
    flagged_content: boolean | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    session_id: string | null
    sender_type: string | null
    agent_type: string | null
    content: string | null
    message_type: string | null
    timestamp: Date | null
    flagged_content: boolean | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    session_id: number
    sender_type: number
    agent_type: number
    content: number
    message_type: number
    timestamp: number
    processed_by: number
    flagged_content: number
    learning_indicators: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    session_id?: true
    sender_type?: true
    agent_type?: true
    content?: true
    message_type?: true
    timestamp?: true
    flagged_content?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    session_id?: true
    sender_type?: true
    agent_type?: true
    content?: true
    message_type?: true
    timestamp?: true
    flagged_content?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    session_id?: true
    sender_type?: true
    agent_type?: true
    content?: true
    message_type?: true
    timestamp?: true
    processed_by?: true
    flagged_content?: true
    learning_indicators?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    session_id: string
    sender_type: string
    agent_type: string | null
    content: string
    message_type: string
    timestamp: Date
    processed_by: string[]
    flagged_content: boolean
    learning_indicators: JsonValue | null
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    sender_type?: boolean
    agent_type?: boolean
    content?: boolean
    message_type?: boolean
    timestamp?: boolean
    processed_by?: boolean
    flagged_content?: boolean
    learning_indicators?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    sender_type?: boolean
    agent_type?: boolean
    content?: boolean
    message_type?: boolean
    timestamp?: boolean
    processed_by?: boolean
    flagged_content?: boolean
    learning_indicators?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    sender_type?: boolean
    agent_type?: boolean
    content?: boolean
    message_type?: boolean
    timestamp?: boolean
    processed_by?: boolean
    flagged_content?: boolean
    learning_indicators?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    session_id?: boolean
    sender_type?: boolean
    agent_type?: boolean
    content?: boolean
    message_type?: boolean
    timestamp?: boolean
    processed_by?: boolean
    flagged_content?: boolean
    learning_indicators?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "session_id" | "sender_type" | "agent_type" | "content" | "message_type" | "timestamp" | "processed_by" | "flagged_content" | "learning_indicators", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      session: Prisma.$ChatSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session_id: string
      sender_type: string
      agent_type: string | null
      content: string
      message_type: string
      timestamp: Date
      processed_by: string[]
      flagged_content: boolean
      learning_indicators: Prisma.JsonValue | null
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly session_id: FieldRef<"ChatMessage", 'String'>
    readonly sender_type: FieldRef<"ChatMessage", 'String'>
    readonly agent_type: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly message_type: FieldRef<"ChatMessage", 'String'>
    readonly timestamp: FieldRef<"ChatMessage", 'DateTime'>
    readonly processed_by: FieldRef<"ChatMessage", 'String[]'>
    readonly flagged_content: FieldRef<"ChatMessage", 'Boolean'>
    readonly learning_indicators: FieldRef<"ChatMessage", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model StudentPreference
   */

  export type AggregateStudentPreference = {
    _count: StudentPreferenceCountAggregateOutputType | null
    _avg: StudentPreferenceAvgAggregateOutputType | null
    _sum: StudentPreferenceSumAggregateOutputType | null
    _min: StudentPreferenceMinAggregateOutputType | null
    _max: StudentPreferenceMaxAggregateOutputType | null
  }

  export type StudentPreferenceAvgAggregateOutputType = {
    confidence_score: number | null
  }

  export type StudentPreferenceSumAggregateOutputType = {
    confidence_score: number | null
  }

  export type StudentPreferenceMinAggregateOutputType = {
    id: string | null
    student_id: string | null
    preference_type: string | null
    preference_value: string | null
    confidence_score: number | null
    last_updated: Date | null
    detection_method: string | null
  }

  export type StudentPreferenceMaxAggregateOutputType = {
    id: string | null
    student_id: string | null
    preference_type: string | null
    preference_value: string | null
    confidence_score: number | null
    last_updated: Date | null
    detection_method: string | null
  }

  export type StudentPreferenceCountAggregateOutputType = {
    id: number
    student_id: number
    preference_type: number
    preference_value: number
    confidence_score: number
    last_updated: number
    detection_method: number
    _all: number
  }


  export type StudentPreferenceAvgAggregateInputType = {
    confidence_score?: true
  }

  export type StudentPreferenceSumAggregateInputType = {
    confidence_score?: true
  }

  export type StudentPreferenceMinAggregateInputType = {
    id?: true
    student_id?: true
    preference_type?: true
    preference_value?: true
    confidence_score?: true
    last_updated?: true
    detection_method?: true
  }

  export type StudentPreferenceMaxAggregateInputType = {
    id?: true
    student_id?: true
    preference_type?: true
    preference_value?: true
    confidence_score?: true
    last_updated?: true
    detection_method?: true
  }

  export type StudentPreferenceCountAggregateInputType = {
    id?: true
    student_id?: true
    preference_type?: true
    preference_value?: true
    confidence_score?: true
    last_updated?: true
    detection_method?: true
    _all?: true
  }

  export type StudentPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPreference to aggregate.
     */
    where?: StudentPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPreferences to fetch.
     */
    orderBy?: StudentPreferenceOrderByWithRelationInput | StudentPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentPreferences
    **/
    _count?: true | StudentPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentPreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentPreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentPreferenceMaxAggregateInputType
  }

  export type GetStudentPreferenceAggregateType<T extends StudentPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentPreference[P]>
      : GetScalarType<T[P], AggregateStudentPreference[P]>
  }




  export type StudentPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPreferenceWhereInput
    orderBy?: StudentPreferenceOrderByWithAggregationInput | StudentPreferenceOrderByWithAggregationInput[]
    by: StudentPreferenceScalarFieldEnum[] | StudentPreferenceScalarFieldEnum
    having?: StudentPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentPreferenceCountAggregateInputType | true
    _avg?: StudentPreferenceAvgAggregateInputType
    _sum?: StudentPreferenceSumAggregateInputType
    _min?: StudentPreferenceMinAggregateInputType
    _max?: StudentPreferenceMaxAggregateInputType
  }

  export type StudentPreferenceGroupByOutputType = {
    id: string
    student_id: string
    preference_type: string
    preference_value: string
    confidence_score: number
    last_updated: Date
    detection_method: string
    _count: StudentPreferenceCountAggregateOutputType | null
    _avg: StudentPreferenceAvgAggregateOutputType | null
    _sum: StudentPreferenceSumAggregateOutputType | null
    _min: StudentPreferenceMinAggregateOutputType | null
    _max: StudentPreferenceMaxAggregateOutputType | null
  }

  type GetStudentPreferenceGroupByPayload<T extends StudentPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], StudentPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type StudentPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    preference_type?: boolean
    preference_value?: boolean
    confidence_score?: boolean
    last_updated?: boolean
    detection_method?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPreference"]>

  export type StudentPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    preference_type?: boolean
    preference_value?: boolean
    confidence_score?: boolean
    last_updated?: boolean
    detection_method?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPreference"]>

  export type StudentPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    preference_type?: boolean
    preference_value?: boolean
    confidence_score?: boolean
    last_updated?: boolean
    detection_method?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPreference"]>

  export type StudentPreferenceSelectScalar = {
    id?: boolean
    student_id?: boolean
    preference_type?: boolean
    preference_value?: boolean
    confidence_score?: boolean
    last_updated?: boolean
    detection_method?: boolean
  }

  export type StudentPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "preference_type" | "preference_value" | "confidence_score" | "last_updated" | "detection_method", ExtArgs["result"]["studentPreference"]>
  export type StudentPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentPreference"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      student_id: string
      preference_type: string
      preference_value: string
      confidence_score: number
      last_updated: Date
      detection_method: string
    }, ExtArgs["result"]["studentPreference"]>
    composites: {}
  }

  type StudentPreferenceGetPayload<S extends boolean | null | undefined | StudentPreferenceDefaultArgs> = $Result.GetResult<Prisma.$StudentPreferencePayload, S>

  type StudentPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentPreferenceCountAggregateInputType | true
    }

  export interface StudentPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentPreference'], meta: { name: 'StudentPreference' } }
    /**
     * Find zero or one StudentPreference that matches the filter.
     * @param {StudentPreferenceFindUniqueArgs} args - Arguments to find a StudentPreference
     * @example
     * // Get one StudentPreference
     * const studentPreference = await prisma.studentPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentPreferenceFindUniqueArgs>(args: SelectSubset<T, StudentPreferenceFindUniqueArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentPreferenceFindUniqueOrThrowArgs} args - Arguments to find a StudentPreference
     * @example
     * // Get one StudentPreference
     * const studentPreference = await prisma.studentPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceFindFirstArgs} args - Arguments to find a StudentPreference
     * @example
     * // Get one StudentPreference
     * const studentPreference = await prisma.studentPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentPreferenceFindFirstArgs>(args?: SelectSubset<T, StudentPreferenceFindFirstArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceFindFirstOrThrowArgs} args - Arguments to find a StudentPreference
     * @example
     * // Get one StudentPreference
     * const studentPreference = await prisma.studentPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentPreferences
     * const studentPreferences = await prisma.studentPreference.findMany()
     * 
     * // Get first 10 StudentPreferences
     * const studentPreferences = await prisma.studentPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentPreferenceWithIdOnly = await prisma.studentPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentPreferenceFindManyArgs>(args?: SelectSubset<T, StudentPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentPreference.
     * @param {StudentPreferenceCreateArgs} args - Arguments to create a StudentPreference.
     * @example
     * // Create one StudentPreference
     * const StudentPreference = await prisma.studentPreference.create({
     *   data: {
     *     // ... data to create a StudentPreference
     *   }
     * })
     * 
     */
    create<T extends StudentPreferenceCreateArgs>(args: SelectSubset<T, StudentPreferenceCreateArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentPreferences.
     * @param {StudentPreferenceCreateManyArgs} args - Arguments to create many StudentPreferences.
     * @example
     * // Create many StudentPreferences
     * const studentPreference = await prisma.studentPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentPreferenceCreateManyArgs>(args?: SelectSubset<T, StudentPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentPreferences and returns the data saved in the database.
     * @param {StudentPreferenceCreateManyAndReturnArgs} args - Arguments to create many StudentPreferences.
     * @example
     * // Create many StudentPreferences
     * const studentPreference = await prisma.studentPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentPreferences and only return the `id`
     * const studentPreferenceWithIdOnly = await prisma.studentPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentPreference.
     * @param {StudentPreferenceDeleteArgs} args - Arguments to delete one StudentPreference.
     * @example
     * // Delete one StudentPreference
     * const StudentPreference = await prisma.studentPreference.delete({
     *   where: {
     *     // ... filter to delete one StudentPreference
     *   }
     * })
     * 
     */
    delete<T extends StudentPreferenceDeleteArgs>(args: SelectSubset<T, StudentPreferenceDeleteArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentPreference.
     * @param {StudentPreferenceUpdateArgs} args - Arguments to update one StudentPreference.
     * @example
     * // Update one StudentPreference
     * const studentPreference = await prisma.studentPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentPreferenceUpdateArgs>(args: SelectSubset<T, StudentPreferenceUpdateArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentPreferences.
     * @param {StudentPreferenceDeleteManyArgs} args - Arguments to filter StudentPreferences to delete.
     * @example
     * // Delete a few StudentPreferences
     * const { count } = await prisma.studentPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentPreferenceDeleteManyArgs>(args?: SelectSubset<T, StudentPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentPreferences
     * const studentPreference = await prisma.studentPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentPreferenceUpdateManyArgs>(args: SelectSubset<T, StudentPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPreferences and returns the data updated in the database.
     * @param {StudentPreferenceUpdateManyAndReturnArgs} args - Arguments to update many StudentPreferences.
     * @example
     * // Update many StudentPreferences
     * const studentPreference = await prisma.studentPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentPreferences and only return the `id`
     * const studentPreferenceWithIdOnly = await prisma.studentPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentPreference.
     * @param {StudentPreferenceUpsertArgs} args - Arguments to update or create a StudentPreference.
     * @example
     * // Update or create a StudentPreference
     * const studentPreference = await prisma.studentPreference.upsert({
     *   create: {
     *     // ... data to create a StudentPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentPreference we want to update
     *   }
     * })
     */
    upsert<T extends StudentPreferenceUpsertArgs>(args: SelectSubset<T, StudentPreferenceUpsertArgs<ExtArgs>>): Prisma__StudentPreferenceClient<$Result.GetResult<Prisma.$StudentPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceCountArgs} args - Arguments to filter StudentPreferences to count.
     * @example
     * // Count the number of StudentPreferences
     * const count = await prisma.studentPreference.count({
     *   where: {
     *     // ... the filter for the StudentPreferences we want to count
     *   }
     * })
    **/
    count<T extends StudentPreferenceCountArgs>(
      args?: Subset<T, StudentPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentPreferenceAggregateArgs>(args: Subset<T, StudentPreferenceAggregateArgs>): Prisma.PrismaPromise<GetStudentPreferenceAggregateType<T>>

    /**
     * Group by StudentPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: StudentPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentPreference model
   */
  readonly fields: StudentPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentPreference model
   */
  interface StudentPreferenceFieldRefs {
    readonly id: FieldRef<"StudentPreference", 'String'>
    readonly student_id: FieldRef<"StudentPreference", 'String'>
    readonly preference_type: FieldRef<"StudentPreference", 'String'>
    readonly preference_value: FieldRef<"StudentPreference", 'String'>
    readonly confidence_score: FieldRef<"StudentPreference", 'Float'>
    readonly last_updated: FieldRef<"StudentPreference", 'DateTime'>
    readonly detection_method: FieldRef<"StudentPreference", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentPreference findUnique
   */
  export type StudentPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPreference to fetch.
     */
    where: StudentPreferenceWhereUniqueInput
  }

  /**
   * StudentPreference findUniqueOrThrow
   */
  export type StudentPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPreference to fetch.
     */
    where: StudentPreferenceWhereUniqueInput
  }

  /**
   * StudentPreference findFirst
   */
  export type StudentPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPreference to fetch.
     */
    where?: StudentPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPreferences to fetch.
     */
    orderBy?: StudentPreferenceOrderByWithRelationInput | StudentPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPreferences.
     */
    cursor?: StudentPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPreferences.
     */
    distinct?: StudentPreferenceScalarFieldEnum | StudentPreferenceScalarFieldEnum[]
  }

  /**
   * StudentPreference findFirstOrThrow
   */
  export type StudentPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPreference to fetch.
     */
    where?: StudentPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPreferences to fetch.
     */
    orderBy?: StudentPreferenceOrderByWithRelationInput | StudentPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPreferences.
     */
    cursor?: StudentPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPreferences.
     */
    distinct?: StudentPreferenceScalarFieldEnum | StudentPreferenceScalarFieldEnum[]
  }

  /**
   * StudentPreference findMany
   */
  export type StudentPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPreferences to fetch.
     */
    where?: StudentPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPreferences to fetch.
     */
    orderBy?: StudentPreferenceOrderByWithRelationInput | StudentPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentPreferences.
     */
    cursor?: StudentPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPreferences.
     */
    skip?: number
    distinct?: StudentPreferenceScalarFieldEnum | StudentPreferenceScalarFieldEnum[]
  }

  /**
   * StudentPreference create
   */
  export type StudentPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentPreference.
     */
    data: XOR<StudentPreferenceCreateInput, StudentPreferenceUncheckedCreateInput>
  }

  /**
   * StudentPreference createMany
   */
  export type StudentPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentPreferences.
     */
    data: StudentPreferenceCreateManyInput | StudentPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentPreference createManyAndReturn
   */
  export type StudentPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many StudentPreferences.
     */
    data: StudentPreferenceCreateManyInput | StudentPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPreference update
   */
  export type StudentPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentPreference.
     */
    data: XOR<StudentPreferenceUpdateInput, StudentPreferenceUncheckedUpdateInput>
    /**
     * Choose, which StudentPreference to update.
     */
    where: StudentPreferenceWhereUniqueInput
  }

  /**
   * StudentPreference updateMany
   */
  export type StudentPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentPreferences.
     */
    data: XOR<StudentPreferenceUpdateManyMutationInput, StudentPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which StudentPreferences to update
     */
    where?: StudentPreferenceWhereInput
    /**
     * Limit how many StudentPreferences to update.
     */
    limit?: number
  }

  /**
   * StudentPreference updateManyAndReturn
   */
  export type StudentPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update StudentPreferences.
     */
    data: XOR<StudentPreferenceUpdateManyMutationInput, StudentPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which StudentPreferences to update
     */
    where?: StudentPreferenceWhereInput
    /**
     * Limit how many StudentPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPreference upsert
   */
  export type StudentPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentPreference to update in case it exists.
     */
    where: StudentPreferenceWhereUniqueInput
    /**
     * In case the StudentPreference found by the `where` argument doesn't exist, create a new StudentPreference with this data.
     */
    create: XOR<StudentPreferenceCreateInput, StudentPreferenceUncheckedCreateInput>
    /**
     * In case the StudentPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentPreferenceUpdateInput, StudentPreferenceUncheckedUpdateInput>
  }

  /**
   * StudentPreference delete
   */
  export type StudentPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
    /**
     * Filter which StudentPreference to delete.
     */
    where: StudentPreferenceWhereUniqueInput
  }

  /**
   * StudentPreference deleteMany
   */
  export type StudentPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPreferences to delete
     */
    where?: StudentPreferenceWhereInput
    /**
     * Limit how many StudentPreferences to delete.
     */
    limit?: number
  }

  /**
   * StudentPreference without action
   */
  export type StudentPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPreference
     */
    select?: StudentPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPreference
     */
    omit?: StudentPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model LearningAnalytics
   */

  export type AggregateLearningAnalytics = {
    _count: LearningAnalyticsCountAggregateOutputType | null
    _avg: LearningAnalyticsAvgAggregateOutputType | null
    _sum: LearningAnalyticsSumAggregateOutputType | null
    _min: LearningAnalyticsMinAggregateOutputType | null
    _max: LearningAnalyticsMaxAggregateOutputType | null
  }

  export type LearningAnalyticsAvgAggregateOutputType = {
    session_duration: number | null
    questions_per_session: number | null
    response_time_avg: number | null
    success_rate: number | null
  }

  export type LearningAnalyticsSumAggregateOutputType = {
    session_duration: number | null
    questions_per_session: number | null
    response_time_avg: number | null
    success_rate: number | null
  }

  export type LearningAnalyticsMinAggregateOutputType = {
    id: string | null
    student_id: string | null
    date: Date | null
    session_duration: number | null
    questions_per_session: number | null
    response_time_avg: number | null
    difficulty_progression: string | null
    success_rate: number | null
    preferred_session_time: string | null
  }

  export type LearningAnalyticsMaxAggregateOutputType = {
    id: string | null
    student_id: string | null
    date: Date | null
    session_duration: number | null
    questions_per_session: number | null
    response_time_avg: number | null
    difficulty_progression: string | null
    success_rate: number | null
    preferred_session_time: string | null
  }

  export type LearningAnalyticsCountAggregateOutputType = {
    id: number
    student_id: number
    date: number
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered: number
    difficulty_progression: number
    success_rate: number
    preferred_session_time: number
    interaction_patterns: number
    _all: number
  }


  export type LearningAnalyticsAvgAggregateInputType = {
    session_duration?: true
    questions_per_session?: true
    response_time_avg?: true
    success_rate?: true
  }

  export type LearningAnalyticsSumAggregateInputType = {
    session_duration?: true
    questions_per_session?: true
    response_time_avg?: true
    success_rate?: true
  }

  export type LearningAnalyticsMinAggregateInputType = {
    id?: true
    student_id?: true
    date?: true
    session_duration?: true
    questions_per_session?: true
    response_time_avg?: true
    difficulty_progression?: true
    success_rate?: true
    preferred_session_time?: true
  }

  export type LearningAnalyticsMaxAggregateInputType = {
    id?: true
    student_id?: true
    date?: true
    session_duration?: true
    questions_per_session?: true
    response_time_avg?: true
    difficulty_progression?: true
    success_rate?: true
    preferred_session_time?: true
  }

  export type LearningAnalyticsCountAggregateInputType = {
    id?: true
    student_id?: true
    date?: true
    session_duration?: true
    questions_per_session?: true
    response_time_avg?: true
    concepts_mastered?: true
    difficulty_progression?: true
    success_rate?: true
    preferred_session_time?: true
    interaction_patterns?: true
    _all?: true
  }

  export type LearningAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningAnalytics to aggregate.
     */
    where?: LearningAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningAnalytics to fetch.
     */
    orderBy?: LearningAnalyticsOrderByWithRelationInput | LearningAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningAnalytics
    **/
    _count?: true | LearningAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LearningAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LearningAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningAnalyticsMaxAggregateInputType
  }

  export type GetLearningAnalyticsAggregateType<T extends LearningAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningAnalytics[P]>
      : GetScalarType<T[P], AggregateLearningAnalytics[P]>
  }




  export type LearningAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningAnalyticsWhereInput
    orderBy?: LearningAnalyticsOrderByWithAggregationInput | LearningAnalyticsOrderByWithAggregationInput[]
    by: LearningAnalyticsScalarFieldEnum[] | LearningAnalyticsScalarFieldEnum
    having?: LearningAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningAnalyticsCountAggregateInputType | true
    _avg?: LearningAnalyticsAvgAggregateInputType
    _sum?: LearningAnalyticsSumAggregateInputType
    _min?: LearningAnalyticsMinAggregateInputType
    _max?: LearningAnalyticsMaxAggregateInputType
  }

  export type LearningAnalyticsGroupByOutputType = {
    id: string
    student_id: string
    date: Date
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered: string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time: string | null
    interaction_patterns: JsonValue | null
    _count: LearningAnalyticsCountAggregateOutputType | null
    _avg: LearningAnalyticsAvgAggregateOutputType | null
    _sum: LearningAnalyticsSumAggregateOutputType | null
    _min: LearningAnalyticsMinAggregateOutputType | null
    _max: LearningAnalyticsMaxAggregateOutputType | null
  }

  type GetLearningAnalyticsGroupByPayload<T extends LearningAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], LearningAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type LearningAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    date?: boolean
    session_duration?: boolean
    questions_per_session?: boolean
    response_time_avg?: boolean
    concepts_mastered?: boolean
    difficulty_progression?: boolean
    success_rate?: boolean
    preferred_session_time?: boolean
    interaction_patterns?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningAnalytics"]>

  export type LearningAnalyticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    date?: boolean
    session_duration?: boolean
    questions_per_session?: boolean
    response_time_avg?: boolean
    concepts_mastered?: boolean
    difficulty_progression?: boolean
    success_rate?: boolean
    preferred_session_time?: boolean
    interaction_patterns?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningAnalytics"]>

  export type LearningAnalyticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    date?: boolean
    session_duration?: boolean
    questions_per_session?: boolean
    response_time_avg?: boolean
    concepts_mastered?: boolean
    difficulty_progression?: boolean
    success_rate?: boolean
    preferred_session_time?: boolean
    interaction_patterns?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningAnalytics"]>

  export type LearningAnalyticsSelectScalar = {
    id?: boolean
    student_id?: boolean
    date?: boolean
    session_duration?: boolean
    questions_per_session?: boolean
    response_time_avg?: boolean
    concepts_mastered?: boolean
    difficulty_progression?: boolean
    success_rate?: boolean
    preferred_session_time?: boolean
    interaction_patterns?: boolean
  }

  export type LearningAnalyticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "date" | "session_duration" | "questions_per_session" | "response_time_avg" | "concepts_mastered" | "difficulty_progression" | "success_rate" | "preferred_session_time" | "interaction_patterns", ExtArgs["result"]["learningAnalytics"]>
  export type LearningAnalyticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type LearningAnalyticsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type LearningAnalyticsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $LearningAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningAnalytics"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      student_id: string
      date: Date
      session_duration: number
      questions_per_session: number
      response_time_avg: number
      concepts_mastered: string[]
      difficulty_progression: string
      success_rate: number
      preferred_session_time: string | null
      interaction_patterns: Prisma.JsonValue | null
    }, ExtArgs["result"]["learningAnalytics"]>
    composites: {}
  }

  type LearningAnalyticsGetPayload<S extends boolean | null | undefined | LearningAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$LearningAnalyticsPayload, S>

  type LearningAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LearningAnalyticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LearningAnalyticsCountAggregateInputType | true
    }

  export interface LearningAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningAnalytics'], meta: { name: 'LearningAnalytics' } }
    /**
     * Find zero or one LearningAnalytics that matches the filter.
     * @param {LearningAnalyticsFindUniqueArgs} args - Arguments to find a LearningAnalytics
     * @example
     * // Get one LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningAnalyticsFindUniqueArgs>(args: SelectSubset<T, LearningAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LearningAnalytics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LearningAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a LearningAnalytics
     * @example
     * // Get one LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LearningAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsFindFirstArgs} args - Arguments to find a LearningAnalytics
     * @example
     * // Get one LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningAnalyticsFindFirstArgs>(args?: SelectSubset<T, LearningAnalyticsFindFirstArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LearningAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsFindFirstOrThrowArgs} args - Arguments to find a LearningAnalytics
     * @example
     * // Get one LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LearningAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.findMany()
     * 
     * // Get first 10 LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningAnalyticsWithIdOnly = await prisma.learningAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningAnalyticsFindManyArgs>(args?: SelectSubset<T, LearningAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LearningAnalytics.
     * @param {LearningAnalyticsCreateArgs} args - Arguments to create a LearningAnalytics.
     * @example
     * // Create one LearningAnalytics
     * const LearningAnalytics = await prisma.learningAnalytics.create({
     *   data: {
     *     // ... data to create a LearningAnalytics
     *   }
     * })
     * 
     */
    create<T extends LearningAnalyticsCreateArgs>(args: SelectSubset<T, LearningAnalyticsCreateArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LearningAnalytics.
     * @param {LearningAnalyticsCreateManyArgs} args - Arguments to create many LearningAnalytics.
     * @example
     * // Create many LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningAnalyticsCreateManyArgs>(args?: SelectSubset<T, LearningAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningAnalytics and returns the data saved in the database.
     * @param {LearningAnalyticsCreateManyAndReturnArgs} args - Arguments to create many LearningAnalytics.
     * @example
     * // Create many LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningAnalytics and only return the `id`
     * const learningAnalyticsWithIdOnly = await prisma.learningAnalytics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningAnalyticsCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningAnalyticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LearningAnalytics.
     * @param {LearningAnalyticsDeleteArgs} args - Arguments to delete one LearningAnalytics.
     * @example
     * // Delete one LearningAnalytics
     * const LearningAnalytics = await prisma.learningAnalytics.delete({
     *   where: {
     *     // ... filter to delete one LearningAnalytics
     *   }
     * })
     * 
     */
    delete<T extends LearningAnalyticsDeleteArgs>(args: SelectSubset<T, LearningAnalyticsDeleteArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LearningAnalytics.
     * @param {LearningAnalyticsUpdateArgs} args - Arguments to update one LearningAnalytics.
     * @example
     * // Update one LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningAnalyticsUpdateArgs>(args: SelectSubset<T, LearningAnalyticsUpdateArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LearningAnalytics.
     * @param {LearningAnalyticsDeleteManyArgs} args - Arguments to filter LearningAnalytics to delete.
     * @example
     * // Delete a few LearningAnalytics
     * const { count } = await prisma.learningAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningAnalyticsDeleteManyArgs>(args?: SelectSubset<T, LearningAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningAnalyticsUpdateManyArgs>(args: SelectSubset<T, LearningAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningAnalytics and returns the data updated in the database.
     * @param {LearningAnalyticsUpdateManyAndReturnArgs} args - Arguments to update many LearningAnalytics.
     * @example
     * // Update many LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LearningAnalytics and only return the `id`
     * const learningAnalyticsWithIdOnly = await prisma.learningAnalytics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LearningAnalyticsUpdateManyAndReturnArgs>(args: SelectSubset<T, LearningAnalyticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LearningAnalytics.
     * @param {LearningAnalyticsUpsertArgs} args - Arguments to update or create a LearningAnalytics.
     * @example
     * // Update or create a LearningAnalytics
     * const learningAnalytics = await prisma.learningAnalytics.upsert({
     *   create: {
     *     // ... data to create a LearningAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends LearningAnalyticsUpsertArgs>(args: SelectSubset<T, LearningAnalyticsUpsertArgs<ExtArgs>>): Prisma__LearningAnalyticsClient<$Result.GetResult<Prisma.$LearningAnalyticsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LearningAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsCountArgs} args - Arguments to filter LearningAnalytics to count.
     * @example
     * // Count the number of LearningAnalytics
     * const count = await prisma.learningAnalytics.count({
     *   where: {
     *     // ... the filter for the LearningAnalytics we want to count
     *   }
     * })
    **/
    count<T extends LearningAnalyticsCountArgs>(
      args?: Subset<T, LearningAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningAnalyticsAggregateArgs>(args: Subset<T, LearningAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetLearningAnalyticsAggregateType<T>>

    /**
     * Group by LearningAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: LearningAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningAnalytics model
   */
  readonly fields: LearningAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningAnalytics model
   */
  interface LearningAnalyticsFieldRefs {
    readonly id: FieldRef<"LearningAnalytics", 'String'>
    readonly student_id: FieldRef<"LearningAnalytics", 'String'>
    readonly date: FieldRef<"LearningAnalytics", 'DateTime'>
    readonly session_duration: FieldRef<"LearningAnalytics", 'Int'>
    readonly questions_per_session: FieldRef<"LearningAnalytics", 'Float'>
    readonly response_time_avg: FieldRef<"LearningAnalytics", 'Float'>
    readonly concepts_mastered: FieldRef<"LearningAnalytics", 'String[]'>
    readonly difficulty_progression: FieldRef<"LearningAnalytics", 'String'>
    readonly success_rate: FieldRef<"LearningAnalytics", 'Float'>
    readonly preferred_session_time: FieldRef<"LearningAnalytics", 'String'>
    readonly interaction_patterns: FieldRef<"LearningAnalytics", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * LearningAnalytics findUnique
   */
  export type LearningAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which LearningAnalytics to fetch.
     */
    where: LearningAnalyticsWhereUniqueInput
  }

  /**
   * LearningAnalytics findUniqueOrThrow
   */
  export type LearningAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which LearningAnalytics to fetch.
     */
    where: LearningAnalyticsWhereUniqueInput
  }

  /**
   * LearningAnalytics findFirst
   */
  export type LearningAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which LearningAnalytics to fetch.
     */
    where?: LearningAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningAnalytics to fetch.
     */
    orderBy?: LearningAnalyticsOrderByWithRelationInput | LearningAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningAnalytics.
     */
    cursor?: LearningAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningAnalytics.
     */
    distinct?: LearningAnalyticsScalarFieldEnum | LearningAnalyticsScalarFieldEnum[]
  }

  /**
   * LearningAnalytics findFirstOrThrow
   */
  export type LearningAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which LearningAnalytics to fetch.
     */
    where?: LearningAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningAnalytics to fetch.
     */
    orderBy?: LearningAnalyticsOrderByWithRelationInput | LearningAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningAnalytics.
     */
    cursor?: LearningAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningAnalytics.
     */
    distinct?: LearningAnalyticsScalarFieldEnum | LearningAnalyticsScalarFieldEnum[]
  }

  /**
   * LearningAnalytics findMany
   */
  export type LearningAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which LearningAnalytics to fetch.
     */
    where?: LearningAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningAnalytics to fetch.
     */
    orderBy?: LearningAnalyticsOrderByWithRelationInput | LearningAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningAnalytics.
     */
    cursor?: LearningAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningAnalytics.
     */
    skip?: number
    distinct?: LearningAnalyticsScalarFieldEnum | LearningAnalyticsScalarFieldEnum[]
  }

  /**
   * LearningAnalytics create
   */
  export type LearningAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningAnalytics.
     */
    data: XOR<LearningAnalyticsCreateInput, LearningAnalyticsUncheckedCreateInput>
  }

  /**
   * LearningAnalytics createMany
   */
  export type LearningAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningAnalytics.
     */
    data: LearningAnalyticsCreateManyInput | LearningAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningAnalytics createManyAndReturn
   */
  export type LearningAnalyticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to create many LearningAnalytics.
     */
    data: LearningAnalyticsCreateManyInput | LearningAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningAnalytics update
   */
  export type LearningAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningAnalytics.
     */
    data: XOR<LearningAnalyticsUpdateInput, LearningAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which LearningAnalytics to update.
     */
    where: LearningAnalyticsWhereUniqueInput
  }

  /**
   * LearningAnalytics updateMany
   */
  export type LearningAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningAnalytics.
     */
    data: XOR<LearningAnalyticsUpdateManyMutationInput, LearningAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which LearningAnalytics to update
     */
    where?: LearningAnalyticsWhereInput
    /**
     * Limit how many LearningAnalytics to update.
     */
    limit?: number
  }

  /**
   * LearningAnalytics updateManyAndReturn
   */
  export type LearningAnalyticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to update LearningAnalytics.
     */
    data: XOR<LearningAnalyticsUpdateManyMutationInput, LearningAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which LearningAnalytics to update
     */
    where?: LearningAnalyticsWhereInput
    /**
     * Limit how many LearningAnalytics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningAnalytics upsert
   */
  export type LearningAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningAnalytics to update in case it exists.
     */
    where: LearningAnalyticsWhereUniqueInput
    /**
     * In case the LearningAnalytics found by the `where` argument doesn't exist, create a new LearningAnalytics with this data.
     */
    create: XOR<LearningAnalyticsCreateInput, LearningAnalyticsUncheckedCreateInput>
    /**
     * In case the LearningAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningAnalyticsUpdateInput, LearningAnalyticsUncheckedUpdateInput>
  }

  /**
   * LearningAnalytics delete
   */
  export type LearningAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
    /**
     * Filter which LearningAnalytics to delete.
     */
    where: LearningAnalyticsWhereUniqueInput
  }

  /**
   * LearningAnalytics deleteMany
   */
  export type LearningAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningAnalytics to delete
     */
    where?: LearningAnalyticsWhereInput
    /**
     * Limit how many LearningAnalytics to delete.
     */
    limit?: number
  }

  /**
   * LearningAnalytics without action
   */
  export type LearningAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningAnalytics
     */
    select?: LearningAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningAnalytics
     */
    omit?: LearningAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningAnalyticsInclude<ExtArgs> | null
  }


  /**
   * Model FrequentlyAskedQuestion
   */

  export type AggregateFrequentlyAskedQuestion = {
    _count: FrequentlyAskedQuestionCountAggregateOutputType | null
    _avg: FrequentlyAskedQuestionAvgAggregateOutputType | null
    _sum: FrequentlyAskedQuestionSumAggregateOutputType | null
    _min: FrequentlyAskedQuestionMinAggregateOutputType | null
    _max: FrequentlyAskedQuestionMaxAggregateOutputType | null
  }

  export type FrequentlyAskedQuestionAvgAggregateOutputType = {
    frequency_count: number | null
    success_rate: number | null
  }

  export type FrequentlyAskedQuestionSumAggregateOutputType = {
    frequency_count: number | null
    success_rate: number | null
  }

  export type FrequentlyAskedQuestionMinAggregateOutputType = {
    id: string | null
    question_text: string | null
    category: string | null
    frequency_count: number | null
    first_asked: Date | null
    last_asked: Date | null
    success_rate: number | null
  }

  export type FrequentlyAskedQuestionMaxAggregateOutputType = {
    id: string | null
    question_text: string | null
    category: string | null
    frequency_count: number | null
    first_asked: Date | null
    last_asked: Date | null
    success_rate: number | null
  }

  export type FrequentlyAskedQuestionCountAggregateOutputType = {
    id: number
    question_text: number
    category: number
    frequency_count: number
    first_asked: number
    last_asked: number
    common_answers: number
    success_rate: number
    similar_questions: number
    keywords: number
    _all: number
  }


  export type FrequentlyAskedQuestionAvgAggregateInputType = {
    frequency_count?: true
    success_rate?: true
  }

  export type FrequentlyAskedQuestionSumAggregateInputType = {
    frequency_count?: true
    success_rate?: true
  }

  export type FrequentlyAskedQuestionMinAggregateInputType = {
    id?: true
    question_text?: true
    category?: true
    frequency_count?: true
    first_asked?: true
    last_asked?: true
    success_rate?: true
  }

  export type FrequentlyAskedQuestionMaxAggregateInputType = {
    id?: true
    question_text?: true
    category?: true
    frequency_count?: true
    first_asked?: true
    last_asked?: true
    success_rate?: true
  }

  export type FrequentlyAskedQuestionCountAggregateInputType = {
    id?: true
    question_text?: true
    category?: true
    frequency_count?: true
    first_asked?: true
    last_asked?: true
    common_answers?: true
    success_rate?: true
    similar_questions?: true
    keywords?: true
    _all?: true
  }

  export type FrequentlyAskedQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrequentlyAskedQuestion to aggregate.
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrequentlyAskedQuestions to fetch.
     */
    orderBy?: FrequentlyAskedQuestionOrderByWithRelationInput | FrequentlyAskedQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrequentlyAskedQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrequentlyAskedQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrequentlyAskedQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FrequentlyAskedQuestions
    **/
    _count?: true | FrequentlyAskedQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrequentlyAskedQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrequentlyAskedQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrequentlyAskedQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrequentlyAskedQuestionMaxAggregateInputType
  }

  export type GetFrequentlyAskedQuestionAggregateType<T extends FrequentlyAskedQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateFrequentlyAskedQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrequentlyAskedQuestion[P]>
      : GetScalarType<T[P], AggregateFrequentlyAskedQuestion[P]>
  }




  export type FrequentlyAskedQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrequentlyAskedQuestionWhereInput
    orderBy?: FrequentlyAskedQuestionOrderByWithAggregationInput | FrequentlyAskedQuestionOrderByWithAggregationInput[]
    by: FrequentlyAskedQuestionScalarFieldEnum[] | FrequentlyAskedQuestionScalarFieldEnum
    having?: FrequentlyAskedQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrequentlyAskedQuestionCountAggregateInputType | true
    _avg?: FrequentlyAskedQuestionAvgAggregateInputType
    _sum?: FrequentlyAskedQuestionSumAggregateInputType
    _min?: FrequentlyAskedQuestionMinAggregateInputType
    _max?: FrequentlyAskedQuestionMaxAggregateInputType
  }

  export type FrequentlyAskedQuestionGroupByOutputType = {
    id: string
    question_text: string
    category: string
    frequency_count: number
    first_asked: Date
    last_asked: Date
    common_answers: JsonValue | null
    success_rate: number | null
    similar_questions: string[]
    keywords: string[]
    _count: FrequentlyAskedQuestionCountAggregateOutputType | null
    _avg: FrequentlyAskedQuestionAvgAggregateOutputType | null
    _sum: FrequentlyAskedQuestionSumAggregateOutputType | null
    _min: FrequentlyAskedQuestionMinAggregateOutputType | null
    _max: FrequentlyAskedQuestionMaxAggregateOutputType | null
  }

  type GetFrequentlyAskedQuestionGroupByPayload<T extends FrequentlyAskedQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrequentlyAskedQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrequentlyAskedQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrequentlyAskedQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], FrequentlyAskedQuestionGroupByOutputType[P]>
        }
      >
    >


  export type FrequentlyAskedQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_text?: boolean
    category?: boolean
    frequency_count?: boolean
    first_asked?: boolean
    last_asked?: boolean
    common_answers?: boolean
    success_rate?: boolean
    similar_questions?: boolean
    keywords?: boolean
  }, ExtArgs["result"]["frequentlyAskedQuestion"]>

  export type FrequentlyAskedQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_text?: boolean
    category?: boolean
    frequency_count?: boolean
    first_asked?: boolean
    last_asked?: boolean
    common_answers?: boolean
    success_rate?: boolean
    similar_questions?: boolean
    keywords?: boolean
  }, ExtArgs["result"]["frequentlyAskedQuestion"]>

  export type FrequentlyAskedQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_text?: boolean
    category?: boolean
    frequency_count?: boolean
    first_asked?: boolean
    last_asked?: boolean
    common_answers?: boolean
    success_rate?: boolean
    similar_questions?: boolean
    keywords?: boolean
  }, ExtArgs["result"]["frequentlyAskedQuestion"]>

  export type FrequentlyAskedQuestionSelectScalar = {
    id?: boolean
    question_text?: boolean
    category?: boolean
    frequency_count?: boolean
    first_asked?: boolean
    last_asked?: boolean
    common_answers?: boolean
    success_rate?: boolean
    similar_questions?: boolean
    keywords?: boolean
  }

  export type FrequentlyAskedQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question_text" | "category" | "frequency_count" | "first_asked" | "last_asked" | "common_answers" | "success_rate" | "similar_questions" | "keywords", ExtArgs["result"]["frequentlyAskedQuestion"]>

  export type $FrequentlyAskedQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FrequentlyAskedQuestion"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question_text: string
      category: string
      frequency_count: number
      first_asked: Date
      last_asked: Date
      common_answers: Prisma.JsonValue | null
      success_rate: number | null
      similar_questions: string[]
      keywords: string[]
    }, ExtArgs["result"]["frequentlyAskedQuestion"]>
    composites: {}
  }

  type FrequentlyAskedQuestionGetPayload<S extends boolean | null | undefined | FrequentlyAskedQuestionDefaultArgs> = $Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload, S>

  type FrequentlyAskedQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FrequentlyAskedQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FrequentlyAskedQuestionCountAggregateInputType | true
    }

  export interface FrequentlyAskedQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrequentlyAskedQuestion'], meta: { name: 'FrequentlyAskedQuestion' } }
    /**
     * Find zero or one FrequentlyAskedQuestion that matches the filter.
     * @param {FrequentlyAskedQuestionFindUniqueArgs} args - Arguments to find a FrequentlyAskedQuestion
     * @example
     * // Get one FrequentlyAskedQuestion
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FrequentlyAskedQuestionFindUniqueArgs>(args: SelectSubset<T, FrequentlyAskedQuestionFindUniqueArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FrequentlyAskedQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FrequentlyAskedQuestionFindUniqueOrThrowArgs} args - Arguments to find a FrequentlyAskedQuestion
     * @example
     * // Get one FrequentlyAskedQuestion
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FrequentlyAskedQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, FrequentlyAskedQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrequentlyAskedQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionFindFirstArgs} args - Arguments to find a FrequentlyAskedQuestion
     * @example
     * // Get one FrequentlyAskedQuestion
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FrequentlyAskedQuestionFindFirstArgs>(args?: SelectSubset<T, FrequentlyAskedQuestionFindFirstArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrequentlyAskedQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionFindFirstOrThrowArgs} args - Arguments to find a FrequentlyAskedQuestion
     * @example
     * // Get one FrequentlyAskedQuestion
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FrequentlyAskedQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, FrequentlyAskedQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FrequentlyAskedQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FrequentlyAskedQuestions
     * const frequentlyAskedQuestions = await prisma.frequentlyAskedQuestion.findMany()
     * 
     * // Get first 10 FrequentlyAskedQuestions
     * const frequentlyAskedQuestions = await prisma.frequentlyAskedQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frequentlyAskedQuestionWithIdOnly = await prisma.frequentlyAskedQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FrequentlyAskedQuestionFindManyArgs>(args?: SelectSubset<T, FrequentlyAskedQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FrequentlyAskedQuestion.
     * @param {FrequentlyAskedQuestionCreateArgs} args - Arguments to create a FrequentlyAskedQuestion.
     * @example
     * // Create one FrequentlyAskedQuestion
     * const FrequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.create({
     *   data: {
     *     // ... data to create a FrequentlyAskedQuestion
     *   }
     * })
     * 
     */
    create<T extends FrequentlyAskedQuestionCreateArgs>(args: SelectSubset<T, FrequentlyAskedQuestionCreateArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FrequentlyAskedQuestions.
     * @param {FrequentlyAskedQuestionCreateManyArgs} args - Arguments to create many FrequentlyAskedQuestions.
     * @example
     * // Create many FrequentlyAskedQuestions
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FrequentlyAskedQuestionCreateManyArgs>(args?: SelectSubset<T, FrequentlyAskedQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FrequentlyAskedQuestions and returns the data saved in the database.
     * @param {FrequentlyAskedQuestionCreateManyAndReturnArgs} args - Arguments to create many FrequentlyAskedQuestions.
     * @example
     * // Create many FrequentlyAskedQuestions
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FrequentlyAskedQuestions and only return the `id`
     * const frequentlyAskedQuestionWithIdOnly = await prisma.frequentlyAskedQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FrequentlyAskedQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, FrequentlyAskedQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FrequentlyAskedQuestion.
     * @param {FrequentlyAskedQuestionDeleteArgs} args - Arguments to delete one FrequentlyAskedQuestion.
     * @example
     * // Delete one FrequentlyAskedQuestion
     * const FrequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.delete({
     *   where: {
     *     // ... filter to delete one FrequentlyAskedQuestion
     *   }
     * })
     * 
     */
    delete<T extends FrequentlyAskedQuestionDeleteArgs>(args: SelectSubset<T, FrequentlyAskedQuestionDeleteArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FrequentlyAskedQuestion.
     * @param {FrequentlyAskedQuestionUpdateArgs} args - Arguments to update one FrequentlyAskedQuestion.
     * @example
     * // Update one FrequentlyAskedQuestion
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FrequentlyAskedQuestionUpdateArgs>(args: SelectSubset<T, FrequentlyAskedQuestionUpdateArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FrequentlyAskedQuestions.
     * @param {FrequentlyAskedQuestionDeleteManyArgs} args - Arguments to filter FrequentlyAskedQuestions to delete.
     * @example
     * // Delete a few FrequentlyAskedQuestions
     * const { count } = await prisma.frequentlyAskedQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FrequentlyAskedQuestionDeleteManyArgs>(args?: SelectSubset<T, FrequentlyAskedQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrequentlyAskedQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FrequentlyAskedQuestions
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FrequentlyAskedQuestionUpdateManyArgs>(args: SelectSubset<T, FrequentlyAskedQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrequentlyAskedQuestions and returns the data updated in the database.
     * @param {FrequentlyAskedQuestionUpdateManyAndReturnArgs} args - Arguments to update many FrequentlyAskedQuestions.
     * @example
     * // Update many FrequentlyAskedQuestions
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FrequentlyAskedQuestions and only return the `id`
     * const frequentlyAskedQuestionWithIdOnly = await prisma.frequentlyAskedQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FrequentlyAskedQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, FrequentlyAskedQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FrequentlyAskedQuestion.
     * @param {FrequentlyAskedQuestionUpsertArgs} args - Arguments to update or create a FrequentlyAskedQuestion.
     * @example
     * // Update or create a FrequentlyAskedQuestion
     * const frequentlyAskedQuestion = await prisma.frequentlyAskedQuestion.upsert({
     *   create: {
     *     // ... data to create a FrequentlyAskedQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FrequentlyAskedQuestion we want to update
     *   }
     * })
     */
    upsert<T extends FrequentlyAskedQuestionUpsertArgs>(args: SelectSubset<T, FrequentlyAskedQuestionUpsertArgs<ExtArgs>>): Prisma__FrequentlyAskedQuestionClient<$Result.GetResult<Prisma.$FrequentlyAskedQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FrequentlyAskedQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionCountArgs} args - Arguments to filter FrequentlyAskedQuestions to count.
     * @example
     * // Count the number of FrequentlyAskedQuestions
     * const count = await prisma.frequentlyAskedQuestion.count({
     *   where: {
     *     // ... the filter for the FrequentlyAskedQuestions we want to count
     *   }
     * })
    **/
    count<T extends FrequentlyAskedQuestionCountArgs>(
      args?: Subset<T, FrequentlyAskedQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrequentlyAskedQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FrequentlyAskedQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrequentlyAskedQuestionAggregateArgs>(args: Subset<T, FrequentlyAskedQuestionAggregateArgs>): Prisma.PrismaPromise<GetFrequentlyAskedQuestionAggregateType<T>>

    /**
     * Group by FrequentlyAskedQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequentlyAskedQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrequentlyAskedQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrequentlyAskedQuestionGroupByArgs['orderBy'] }
        : { orderBy?: FrequentlyAskedQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrequentlyAskedQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrequentlyAskedQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FrequentlyAskedQuestion model
   */
  readonly fields: FrequentlyAskedQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FrequentlyAskedQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrequentlyAskedQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FrequentlyAskedQuestion model
   */
  interface FrequentlyAskedQuestionFieldRefs {
    readonly id: FieldRef<"FrequentlyAskedQuestion", 'String'>
    readonly question_text: FieldRef<"FrequentlyAskedQuestion", 'String'>
    readonly category: FieldRef<"FrequentlyAskedQuestion", 'String'>
    readonly frequency_count: FieldRef<"FrequentlyAskedQuestion", 'Int'>
    readonly first_asked: FieldRef<"FrequentlyAskedQuestion", 'DateTime'>
    readonly last_asked: FieldRef<"FrequentlyAskedQuestion", 'DateTime'>
    readonly common_answers: FieldRef<"FrequentlyAskedQuestion", 'Json'>
    readonly success_rate: FieldRef<"FrequentlyAskedQuestion", 'Float'>
    readonly similar_questions: FieldRef<"FrequentlyAskedQuestion", 'String[]'>
    readonly keywords: FieldRef<"FrequentlyAskedQuestion", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * FrequentlyAskedQuestion findUnique
   */
  export type FrequentlyAskedQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * Filter, which FrequentlyAskedQuestion to fetch.
     */
    where: FrequentlyAskedQuestionWhereUniqueInput
  }

  /**
   * FrequentlyAskedQuestion findUniqueOrThrow
   */
  export type FrequentlyAskedQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * Filter, which FrequentlyAskedQuestion to fetch.
     */
    where: FrequentlyAskedQuestionWhereUniqueInput
  }

  /**
   * FrequentlyAskedQuestion findFirst
   */
  export type FrequentlyAskedQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * Filter, which FrequentlyAskedQuestion to fetch.
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrequentlyAskedQuestions to fetch.
     */
    orderBy?: FrequentlyAskedQuestionOrderByWithRelationInput | FrequentlyAskedQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrequentlyAskedQuestions.
     */
    cursor?: FrequentlyAskedQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrequentlyAskedQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrequentlyAskedQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrequentlyAskedQuestions.
     */
    distinct?: FrequentlyAskedQuestionScalarFieldEnum | FrequentlyAskedQuestionScalarFieldEnum[]
  }

  /**
   * FrequentlyAskedQuestion findFirstOrThrow
   */
  export type FrequentlyAskedQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * Filter, which FrequentlyAskedQuestion to fetch.
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrequentlyAskedQuestions to fetch.
     */
    orderBy?: FrequentlyAskedQuestionOrderByWithRelationInput | FrequentlyAskedQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrequentlyAskedQuestions.
     */
    cursor?: FrequentlyAskedQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrequentlyAskedQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrequentlyAskedQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrequentlyAskedQuestions.
     */
    distinct?: FrequentlyAskedQuestionScalarFieldEnum | FrequentlyAskedQuestionScalarFieldEnum[]
  }

  /**
   * FrequentlyAskedQuestion findMany
   */
  export type FrequentlyAskedQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * Filter, which FrequentlyAskedQuestions to fetch.
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrequentlyAskedQuestions to fetch.
     */
    orderBy?: FrequentlyAskedQuestionOrderByWithRelationInput | FrequentlyAskedQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FrequentlyAskedQuestions.
     */
    cursor?: FrequentlyAskedQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrequentlyAskedQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrequentlyAskedQuestions.
     */
    skip?: number
    distinct?: FrequentlyAskedQuestionScalarFieldEnum | FrequentlyAskedQuestionScalarFieldEnum[]
  }

  /**
   * FrequentlyAskedQuestion create
   */
  export type FrequentlyAskedQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * The data needed to create a FrequentlyAskedQuestion.
     */
    data: XOR<FrequentlyAskedQuestionCreateInput, FrequentlyAskedQuestionUncheckedCreateInput>
  }

  /**
   * FrequentlyAskedQuestion createMany
   */
  export type FrequentlyAskedQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FrequentlyAskedQuestions.
     */
    data: FrequentlyAskedQuestionCreateManyInput | FrequentlyAskedQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrequentlyAskedQuestion createManyAndReturn
   */
  export type FrequentlyAskedQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many FrequentlyAskedQuestions.
     */
    data: FrequentlyAskedQuestionCreateManyInput | FrequentlyAskedQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrequentlyAskedQuestion update
   */
  export type FrequentlyAskedQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * The data needed to update a FrequentlyAskedQuestion.
     */
    data: XOR<FrequentlyAskedQuestionUpdateInput, FrequentlyAskedQuestionUncheckedUpdateInput>
    /**
     * Choose, which FrequentlyAskedQuestion to update.
     */
    where: FrequentlyAskedQuestionWhereUniqueInput
  }

  /**
   * FrequentlyAskedQuestion updateMany
   */
  export type FrequentlyAskedQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FrequentlyAskedQuestions.
     */
    data: XOR<FrequentlyAskedQuestionUpdateManyMutationInput, FrequentlyAskedQuestionUncheckedUpdateManyInput>
    /**
     * Filter which FrequentlyAskedQuestions to update
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * Limit how many FrequentlyAskedQuestions to update.
     */
    limit?: number
  }

  /**
   * FrequentlyAskedQuestion updateManyAndReturn
   */
  export type FrequentlyAskedQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * The data used to update FrequentlyAskedQuestions.
     */
    data: XOR<FrequentlyAskedQuestionUpdateManyMutationInput, FrequentlyAskedQuestionUncheckedUpdateManyInput>
    /**
     * Filter which FrequentlyAskedQuestions to update
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * Limit how many FrequentlyAskedQuestions to update.
     */
    limit?: number
  }

  /**
   * FrequentlyAskedQuestion upsert
   */
  export type FrequentlyAskedQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * The filter to search for the FrequentlyAskedQuestion to update in case it exists.
     */
    where: FrequentlyAskedQuestionWhereUniqueInput
    /**
     * In case the FrequentlyAskedQuestion found by the `where` argument doesn't exist, create a new FrequentlyAskedQuestion with this data.
     */
    create: XOR<FrequentlyAskedQuestionCreateInput, FrequentlyAskedQuestionUncheckedCreateInput>
    /**
     * In case the FrequentlyAskedQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrequentlyAskedQuestionUpdateInput, FrequentlyAskedQuestionUncheckedUpdateInput>
  }

  /**
   * FrequentlyAskedQuestion delete
   */
  export type FrequentlyAskedQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
    /**
     * Filter which FrequentlyAskedQuestion to delete.
     */
    where: FrequentlyAskedQuestionWhereUniqueInput
  }

  /**
   * FrequentlyAskedQuestion deleteMany
   */
  export type FrequentlyAskedQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrequentlyAskedQuestions to delete
     */
    where?: FrequentlyAskedQuestionWhereInput
    /**
     * Limit how many FrequentlyAskedQuestions to delete.
     */
    limit?: number
  }

  /**
   * FrequentlyAskedQuestion without action
   */
  export type FrequentlyAskedQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequentlyAskedQuestion
     */
    select?: FrequentlyAskedQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrequentlyAskedQuestion
     */
    omit?: FrequentlyAskedQuestionOmit<ExtArgs> | null
  }


  /**
   * Model SessionTakeaway
   */

  export type AggregateSessionTakeaway = {
    _count: SessionTakeawayCountAggregateOutputType | null
    _avg: SessionTakeawayAvgAggregateOutputType | null
    _sum: SessionTakeawaySumAggregateOutputType | null
    _min: SessionTakeawayMinAggregateOutputType | null
    _max: SessionTakeawayMaxAggregateOutputType | null
  }

  export type SessionTakeawayAvgAggregateOutputType = {
    embedding_vector: number | null
    relevance_score: number | null
  }

  export type SessionTakeawaySumAggregateOutputType = {
    embedding_vector: number[]
    relevance_score: number | null
  }

  export type SessionTakeawayMinAggregateOutputType = {
    id: string | null
    session_id: string | null
    takeaway_type: string | null
    summary: string | null
    created_at: Date | null
    relevance_score: number | null
  }

  export type SessionTakeawayMaxAggregateOutputType = {
    id: string | null
    session_id: string | null
    takeaway_type: string | null
    summary: string | null
    created_at: Date | null
    relevance_score: number | null
  }

  export type SessionTakeawayCountAggregateOutputType = {
    id: number
    session_id: number
    takeaway_type: number
    summary: number
    key_concepts: number
    effective_methods: number
    created_at: number
    embedding_vector: number
    relevance_score: number
    _all: number
  }


  export type SessionTakeawayAvgAggregateInputType = {
    embedding_vector?: true
    relevance_score?: true
  }

  export type SessionTakeawaySumAggregateInputType = {
    embedding_vector?: true
    relevance_score?: true
  }

  export type SessionTakeawayMinAggregateInputType = {
    id?: true
    session_id?: true
    takeaway_type?: true
    summary?: true
    created_at?: true
    relevance_score?: true
  }

  export type SessionTakeawayMaxAggregateInputType = {
    id?: true
    session_id?: true
    takeaway_type?: true
    summary?: true
    created_at?: true
    relevance_score?: true
  }

  export type SessionTakeawayCountAggregateInputType = {
    id?: true
    session_id?: true
    takeaway_type?: true
    summary?: true
    key_concepts?: true
    effective_methods?: true
    created_at?: true
    embedding_vector?: true
    relevance_score?: true
    _all?: true
  }

  export type SessionTakeawayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionTakeaway to aggregate.
     */
    where?: SessionTakeawayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionTakeaways to fetch.
     */
    orderBy?: SessionTakeawayOrderByWithRelationInput | SessionTakeawayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionTakeawayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionTakeaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionTakeaways.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionTakeaways
    **/
    _count?: true | SessionTakeawayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionTakeawayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionTakeawaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionTakeawayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionTakeawayMaxAggregateInputType
  }

  export type GetSessionTakeawayAggregateType<T extends SessionTakeawayAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionTakeaway]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionTakeaway[P]>
      : GetScalarType<T[P], AggregateSessionTakeaway[P]>
  }




  export type SessionTakeawayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionTakeawayWhereInput
    orderBy?: SessionTakeawayOrderByWithAggregationInput | SessionTakeawayOrderByWithAggregationInput[]
    by: SessionTakeawayScalarFieldEnum[] | SessionTakeawayScalarFieldEnum
    having?: SessionTakeawayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionTakeawayCountAggregateInputType | true
    _avg?: SessionTakeawayAvgAggregateInputType
    _sum?: SessionTakeawaySumAggregateInputType
    _min?: SessionTakeawayMinAggregateInputType
    _max?: SessionTakeawayMaxAggregateInputType
  }

  export type SessionTakeawayGroupByOutputType = {
    id: string
    session_id: string
    takeaway_type: string
    summary: string
    key_concepts: string[]
    effective_methods: JsonValue
    created_at: Date
    embedding_vector: number[]
    relevance_score: number | null
    _count: SessionTakeawayCountAggregateOutputType | null
    _avg: SessionTakeawayAvgAggregateOutputType | null
    _sum: SessionTakeawaySumAggregateOutputType | null
    _min: SessionTakeawayMinAggregateOutputType | null
    _max: SessionTakeawayMaxAggregateOutputType | null
  }

  type GetSessionTakeawayGroupByPayload<T extends SessionTakeawayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionTakeawayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionTakeawayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionTakeawayGroupByOutputType[P]>
            : GetScalarType<T[P], SessionTakeawayGroupByOutputType[P]>
        }
      >
    >


  export type SessionTakeawaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    takeaway_type?: boolean
    summary?: boolean
    key_concepts?: boolean
    effective_methods?: boolean
    created_at?: boolean
    embedding_vector?: boolean
    relevance_score?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionTakeaway"]>

  export type SessionTakeawaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    takeaway_type?: boolean
    summary?: boolean
    key_concepts?: boolean
    effective_methods?: boolean
    created_at?: boolean
    embedding_vector?: boolean
    relevance_score?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionTakeaway"]>

  export type SessionTakeawaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    takeaway_type?: boolean
    summary?: boolean
    key_concepts?: boolean
    effective_methods?: boolean
    created_at?: boolean
    embedding_vector?: boolean
    relevance_score?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionTakeaway"]>

  export type SessionTakeawaySelectScalar = {
    id?: boolean
    session_id?: boolean
    takeaway_type?: boolean
    summary?: boolean
    key_concepts?: boolean
    effective_methods?: boolean
    created_at?: boolean
    embedding_vector?: boolean
    relevance_score?: boolean
  }

  export type SessionTakeawayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "session_id" | "takeaway_type" | "summary" | "key_concepts" | "effective_methods" | "created_at" | "embedding_vector" | "relevance_score", ExtArgs["result"]["sessionTakeaway"]>
  export type SessionTakeawayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type SessionTakeawayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type SessionTakeawayIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }

  export type $SessionTakeawayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionTakeaway"
    objects: {
      session: Prisma.$ChatSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session_id: string
      takeaway_type: string
      summary: string
      key_concepts: string[]
      effective_methods: Prisma.JsonValue
      created_at: Date
      embedding_vector: number[]
      relevance_score: number | null
    }, ExtArgs["result"]["sessionTakeaway"]>
    composites: {}
  }

  type SessionTakeawayGetPayload<S extends boolean | null | undefined | SessionTakeawayDefaultArgs> = $Result.GetResult<Prisma.$SessionTakeawayPayload, S>

  type SessionTakeawayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionTakeawayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionTakeawayCountAggregateInputType | true
    }

  export interface SessionTakeawayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionTakeaway'], meta: { name: 'SessionTakeaway' } }
    /**
     * Find zero or one SessionTakeaway that matches the filter.
     * @param {SessionTakeawayFindUniqueArgs} args - Arguments to find a SessionTakeaway
     * @example
     * // Get one SessionTakeaway
     * const sessionTakeaway = await prisma.sessionTakeaway.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionTakeawayFindUniqueArgs>(args: SelectSubset<T, SessionTakeawayFindUniqueArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionTakeaway that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionTakeawayFindUniqueOrThrowArgs} args - Arguments to find a SessionTakeaway
     * @example
     * // Get one SessionTakeaway
     * const sessionTakeaway = await prisma.sessionTakeaway.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionTakeawayFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionTakeawayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionTakeaway that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayFindFirstArgs} args - Arguments to find a SessionTakeaway
     * @example
     * // Get one SessionTakeaway
     * const sessionTakeaway = await prisma.sessionTakeaway.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionTakeawayFindFirstArgs>(args?: SelectSubset<T, SessionTakeawayFindFirstArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionTakeaway that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayFindFirstOrThrowArgs} args - Arguments to find a SessionTakeaway
     * @example
     * // Get one SessionTakeaway
     * const sessionTakeaway = await prisma.sessionTakeaway.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionTakeawayFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionTakeawayFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionTakeaways that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionTakeaways
     * const sessionTakeaways = await prisma.sessionTakeaway.findMany()
     * 
     * // Get first 10 SessionTakeaways
     * const sessionTakeaways = await prisma.sessionTakeaway.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionTakeawayWithIdOnly = await prisma.sessionTakeaway.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionTakeawayFindManyArgs>(args?: SelectSubset<T, SessionTakeawayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionTakeaway.
     * @param {SessionTakeawayCreateArgs} args - Arguments to create a SessionTakeaway.
     * @example
     * // Create one SessionTakeaway
     * const SessionTakeaway = await prisma.sessionTakeaway.create({
     *   data: {
     *     // ... data to create a SessionTakeaway
     *   }
     * })
     * 
     */
    create<T extends SessionTakeawayCreateArgs>(args: SelectSubset<T, SessionTakeawayCreateArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionTakeaways.
     * @param {SessionTakeawayCreateManyArgs} args - Arguments to create many SessionTakeaways.
     * @example
     * // Create many SessionTakeaways
     * const sessionTakeaway = await prisma.sessionTakeaway.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionTakeawayCreateManyArgs>(args?: SelectSubset<T, SessionTakeawayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionTakeaways and returns the data saved in the database.
     * @param {SessionTakeawayCreateManyAndReturnArgs} args - Arguments to create many SessionTakeaways.
     * @example
     * // Create many SessionTakeaways
     * const sessionTakeaway = await prisma.sessionTakeaway.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionTakeaways and only return the `id`
     * const sessionTakeawayWithIdOnly = await prisma.sessionTakeaway.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionTakeawayCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionTakeawayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionTakeaway.
     * @param {SessionTakeawayDeleteArgs} args - Arguments to delete one SessionTakeaway.
     * @example
     * // Delete one SessionTakeaway
     * const SessionTakeaway = await prisma.sessionTakeaway.delete({
     *   where: {
     *     // ... filter to delete one SessionTakeaway
     *   }
     * })
     * 
     */
    delete<T extends SessionTakeawayDeleteArgs>(args: SelectSubset<T, SessionTakeawayDeleteArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionTakeaway.
     * @param {SessionTakeawayUpdateArgs} args - Arguments to update one SessionTakeaway.
     * @example
     * // Update one SessionTakeaway
     * const sessionTakeaway = await prisma.sessionTakeaway.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionTakeawayUpdateArgs>(args: SelectSubset<T, SessionTakeawayUpdateArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionTakeaways.
     * @param {SessionTakeawayDeleteManyArgs} args - Arguments to filter SessionTakeaways to delete.
     * @example
     * // Delete a few SessionTakeaways
     * const { count } = await prisma.sessionTakeaway.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionTakeawayDeleteManyArgs>(args?: SelectSubset<T, SessionTakeawayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionTakeaways.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionTakeaways
     * const sessionTakeaway = await prisma.sessionTakeaway.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionTakeawayUpdateManyArgs>(args: SelectSubset<T, SessionTakeawayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionTakeaways and returns the data updated in the database.
     * @param {SessionTakeawayUpdateManyAndReturnArgs} args - Arguments to update many SessionTakeaways.
     * @example
     * // Update many SessionTakeaways
     * const sessionTakeaway = await prisma.sessionTakeaway.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionTakeaways and only return the `id`
     * const sessionTakeawayWithIdOnly = await prisma.sessionTakeaway.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionTakeawayUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionTakeawayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionTakeaway.
     * @param {SessionTakeawayUpsertArgs} args - Arguments to update or create a SessionTakeaway.
     * @example
     * // Update or create a SessionTakeaway
     * const sessionTakeaway = await prisma.sessionTakeaway.upsert({
     *   create: {
     *     // ... data to create a SessionTakeaway
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionTakeaway we want to update
     *   }
     * })
     */
    upsert<T extends SessionTakeawayUpsertArgs>(args: SelectSubset<T, SessionTakeawayUpsertArgs<ExtArgs>>): Prisma__SessionTakeawayClient<$Result.GetResult<Prisma.$SessionTakeawayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionTakeaways.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayCountArgs} args - Arguments to filter SessionTakeaways to count.
     * @example
     * // Count the number of SessionTakeaways
     * const count = await prisma.sessionTakeaway.count({
     *   where: {
     *     // ... the filter for the SessionTakeaways we want to count
     *   }
     * })
    **/
    count<T extends SessionTakeawayCountArgs>(
      args?: Subset<T, SessionTakeawayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionTakeawayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionTakeaway.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionTakeawayAggregateArgs>(args: Subset<T, SessionTakeawayAggregateArgs>): Prisma.PrismaPromise<GetSessionTakeawayAggregateType<T>>

    /**
     * Group by SessionTakeaway.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionTakeawayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionTakeawayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionTakeawayGroupByArgs['orderBy'] }
        : { orderBy?: SessionTakeawayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionTakeawayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionTakeawayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionTakeaway model
   */
  readonly fields: SessionTakeawayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionTakeaway.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionTakeawayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionTakeaway model
   */
  interface SessionTakeawayFieldRefs {
    readonly id: FieldRef<"SessionTakeaway", 'String'>
    readonly session_id: FieldRef<"SessionTakeaway", 'String'>
    readonly takeaway_type: FieldRef<"SessionTakeaway", 'String'>
    readonly summary: FieldRef<"SessionTakeaway", 'String'>
    readonly key_concepts: FieldRef<"SessionTakeaway", 'String[]'>
    readonly effective_methods: FieldRef<"SessionTakeaway", 'Json'>
    readonly created_at: FieldRef<"SessionTakeaway", 'DateTime'>
    readonly embedding_vector: FieldRef<"SessionTakeaway", 'Float[]'>
    readonly relevance_score: FieldRef<"SessionTakeaway", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * SessionTakeaway findUnique
   */
  export type SessionTakeawayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * Filter, which SessionTakeaway to fetch.
     */
    where: SessionTakeawayWhereUniqueInput
  }

  /**
   * SessionTakeaway findUniqueOrThrow
   */
  export type SessionTakeawayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * Filter, which SessionTakeaway to fetch.
     */
    where: SessionTakeawayWhereUniqueInput
  }

  /**
   * SessionTakeaway findFirst
   */
  export type SessionTakeawayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * Filter, which SessionTakeaway to fetch.
     */
    where?: SessionTakeawayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionTakeaways to fetch.
     */
    orderBy?: SessionTakeawayOrderByWithRelationInput | SessionTakeawayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionTakeaways.
     */
    cursor?: SessionTakeawayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionTakeaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionTakeaways.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionTakeaways.
     */
    distinct?: SessionTakeawayScalarFieldEnum | SessionTakeawayScalarFieldEnum[]
  }

  /**
   * SessionTakeaway findFirstOrThrow
   */
  export type SessionTakeawayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * Filter, which SessionTakeaway to fetch.
     */
    where?: SessionTakeawayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionTakeaways to fetch.
     */
    orderBy?: SessionTakeawayOrderByWithRelationInput | SessionTakeawayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionTakeaways.
     */
    cursor?: SessionTakeawayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionTakeaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionTakeaways.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionTakeaways.
     */
    distinct?: SessionTakeawayScalarFieldEnum | SessionTakeawayScalarFieldEnum[]
  }

  /**
   * SessionTakeaway findMany
   */
  export type SessionTakeawayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * Filter, which SessionTakeaways to fetch.
     */
    where?: SessionTakeawayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionTakeaways to fetch.
     */
    orderBy?: SessionTakeawayOrderByWithRelationInput | SessionTakeawayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionTakeaways.
     */
    cursor?: SessionTakeawayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionTakeaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionTakeaways.
     */
    skip?: number
    distinct?: SessionTakeawayScalarFieldEnum | SessionTakeawayScalarFieldEnum[]
  }

  /**
   * SessionTakeaway create
   */
  export type SessionTakeawayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionTakeaway.
     */
    data: XOR<SessionTakeawayCreateInput, SessionTakeawayUncheckedCreateInput>
  }

  /**
   * SessionTakeaway createMany
   */
  export type SessionTakeawayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionTakeaways.
     */
    data: SessionTakeawayCreateManyInput | SessionTakeawayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionTakeaway createManyAndReturn
   */
  export type SessionTakeawayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * The data used to create many SessionTakeaways.
     */
    data: SessionTakeawayCreateManyInput | SessionTakeawayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionTakeaway update
   */
  export type SessionTakeawayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionTakeaway.
     */
    data: XOR<SessionTakeawayUpdateInput, SessionTakeawayUncheckedUpdateInput>
    /**
     * Choose, which SessionTakeaway to update.
     */
    where: SessionTakeawayWhereUniqueInput
  }

  /**
   * SessionTakeaway updateMany
   */
  export type SessionTakeawayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionTakeaways.
     */
    data: XOR<SessionTakeawayUpdateManyMutationInput, SessionTakeawayUncheckedUpdateManyInput>
    /**
     * Filter which SessionTakeaways to update
     */
    where?: SessionTakeawayWhereInput
    /**
     * Limit how many SessionTakeaways to update.
     */
    limit?: number
  }

  /**
   * SessionTakeaway updateManyAndReturn
   */
  export type SessionTakeawayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * The data used to update SessionTakeaways.
     */
    data: XOR<SessionTakeawayUpdateManyMutationInput, SessionTakeawayUncheckedUpdateManyInput>
    /**
     * Filter which SessionTakeaways to update
     */
    where?: SessionTakeawayWhereInput
    /**
     * Limit how many SessionTakeaways to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionTakeaway upsert
   */
  export type SessionTakeawayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionTakeaway to update in case it exists.
     */
    where: SessionTakeawayWhereUniqueInput
    /**
     * In case the SessionTakeaway found by the `where` argument doesn't exist, create a new SessionTakeaway with this data.
     */
    create: XOR<SessionTakeawayCreateInput, SessionTakeawayUncheckedCreateInput>
    /**
     * In case the SessionTakeaway was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionTakeawayUpdateInput, SessionTakeawayUncheckedUpdateInput>
  }

  /**
   * SessionTakeaway delete
   */
  export type SessionTakeawayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
    /**
     * Filter which SessionTakeaway to delete.
     */
    where: SessionTakeawayWhereUniqueInput
  }

  /**
   * SessionTakeaway deleteMany
   */
  export type SessionTakeawayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionTakeaways to delete
     */
    where?: SessionTakeawayWhereInput
    /**
     * Limit how many SessionTakeaways to delete.
     */
    limit?: number
  }

  /**
   * SessionTakeaway without action
   */
  export type SessionTakeawayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionTakeaway
     */
    select?: SessionTakeawaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionTakeaway
     */
    omit?: SessionTakeawayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionTakeawayInclude<ExtArgs> | null
  }


  /**
   * Model AnalyticsRequest
   */

  export type AggregateAnalyticsRequest = {
    _count: AnalyticsRequestCountAggregateOutputType | null
    _min: AnalyticsRequestMinAggregateOutputType | null
    _max: AnalyticsRequestMaxAggregateOutputType | null
  }

  export type AnalyticsRequestMinAggregateOutputType = {
    id: string | null
    teacher_id: string | null
    request_type: string | null
    status: string | null
    created_at: Date | null
    completed_at: Date | null
  }

  export type AnalyticsRequestMaxAggregateOutputType = {
    id: string | null
    teacher_id: string | null
    request_type: string | null
    status: string | null
    created_at: Date | null
    completed_at: Date | null
  }

  export type AnalyticsRequestCountAggregateOutputType = {
    id: number
    teacher_id: number
    request_type: number
    parameters: number
    status: number
    results: number
    created_at: number
    completed_at: number
    _all: number
  }


  export type AnalyticsRequestMinAggregateInputType = {
    id?: true
    teacher_id?: true
    request_type?: true
    status?: true
    created_at?: true
    completed_at?: true
  }

  export type AnalyticsRequestMaxAggregateInputType = {
    id?: true
    teacher_id?: true
    request_type?: true
    status?: true
    created_at?: true
    completed_at?: true
  }

  export type AnalyticsRequestCountAggregateInputType = {
    id?: true
    teacher_id?: true
    request_type?: true
    parameters?: true
    status?: true
    results?: true
    created_at?: true
    completed_at?: true
    _all?: true
  }

  export type AnalyticsRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsRequest to aggregate.
     */
    where?: AnalyticsRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsRequests to fetch.
     */
    orderBy?: AnalyticsRequestOrderByWithRelationInput | AnalyticsRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalyticsRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnalyticsRequests
    **/
    _count?: true | AnalyticsRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalyticsRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalyticsRequestMaxAggregateInputType
  }

  export type GetAnalyticsRequestAggregateType<T extends AnalyticsRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalyticsRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalyticsRequest[P]>
      : GetScalarType<T[P], AggregateAnalyticsRequest[P]>
  }




  export type AnalyticsRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsRequestWhereInput
    orderBy?: AnalyticsRequestOrderByWithAggregationInput | AnalyticsRequestOrderByWithAggregationInput[]
    by: AnalyticsRequestScalarFieldEnum[] | AnalyticsRequestScalarFieldEnum
    having?: AnalyticsRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalyticsRequestCountAggregateInputType | true
    _min?: AnalyticsRequestMinAggregateInputType
    _max?: AnalyticsRequestMaxAggregateInputType
  }

  export type AnalyticsRequestGroupByOutputType = {
    id: string
    teacher_id: string
    request_type: string
    parameters: JsonValue
    status: string
    results: JsonValue | null
    created_at: Date
    completed_at: Date | null
    _count: AnalyticsRequestCountAggregateOutputType | null
    _min: AnalyticsRequestMinAggregateOutputType | null
    _max: AnalyticsRequestMaxAggregateOutputType | null
  }

  type GetAnalyticsRequestGroupByPayload<T extends AnalyticsRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnalyticsRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalyticsRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalyticsRequestGroupByOutputType[P]>
            : GetScalarType<T[P], AnalyticsRequestGroupByOutputType[P]>
        }
      >
    >


  export type AnalyticsRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    request_type?: boolean
    parameters?: boolean
    status?: boolean
    results?: boolean
    created_at?: boolean
    completed_at?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsRequest"]>

  export type AnalyticsRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    request_type?: boolean
    parameters?: boolean
    status?: boolean
    results?: boolean
    created_at?: boolean
    completed_at?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsRequest"]>

  export type AnalyticsRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    request_type?: boolean
    parameters?: boolean
    status?: boolean
    results?: boolean
    created_at?: boolean
    completed_at?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsRequest"]>

  export type AnalyticsRequestSelectScalar = {
    id?: boolean
    teacher_id?: boolean
    request_type?: boolean
    parameters?: boolean
    status?: boolean
    results?: boolean
    created_at?: boolean
    completed_at?: boolean
  }

  export type AnalyticsRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teacher_id" | "request_type" | "parameters" | "status" | "results" | "created_at" | "completed_at", ExtArgs["result"]["analyticsRequest"]>
  export type AnalyticsRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type AnalyticsRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type AnalyticsRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $AnalyticsRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnalyticsRequest"
    objects: {
      teacher: Prisma.$TeacherPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teacher_id: string
      request_type: string
      parameters: Prisma.JsonValue
      status: string
      results: Prisma.JsonValue | null
      created_at: Date
      completed_at: Date | null
    }, ExtArgs["result"]["analyticsRequest"]>
    composites: {}
  }

  type AnalyticsRequestGetPayload<S extends boolean | null | undefined | AnalyticsRequestDefaultArgs> = $Result.GetResult<Prisma.$AnalyticsRequestPayload, S>

  type AnalyticsRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnalyticsRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnalyticsRequestCountAggregateInputType | true
    }

  export interface AnalyticsRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnalyticsRequest'], meta: { name: 'AnalyticsRequest' } }
    /**
     * Find zero or one AnalyticsRequest that matches the filter.
     * @param {AnalyticsRequestFindUniqueArgs} args - Arguments to find a AnalyticsRequest
     * @example
     * // Get one AnalyticsRequest
     * const analyticsRequest = await prisma.analyticsRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnalyticsRequestFindUniqueArgs>(args: SelectSubset<T, AnalyticsRequestFindUniqueArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnalyticsRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnalyticsRequestFindUniqueOrThrowArgs} args - Arguments to find a AnalyticsRequest
     * @example
     * // Get one AnalyticsRequest
     * const analyticsRequest = await prisma.analyticsRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnalyticsRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, AnalyticsRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnalyticsRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestFindFirstArgs} args - Arguments to find a AnalyticsRequest
     * @example
     * // Get one AnalyticsRequest
     * const analyticsRequest = await prisma.analyticsRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnalyticsRequestFindFirstArgs>(args?: SelectSubset<T, AnalyticsRequestFindFirstArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnalyticsRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestFindFirstOrThrowArgs} args - Arguments to find a AnalyticsRequest
     * @example
     * // Get one AnalyticsRequest
     * const analyticsRequest = await prisma.analyticsRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnalyticsRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, AnalyticsRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnalyticsRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnalyticsRequests
     * const analyticsRequests = await prisma.analyticsRequest.findMany()
     * 
     * // Get first 10 AnalyticsRequests
     * const analyticsRequests = await prisma.analyticsRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analyticsRequestWithIdOnly = await prisma.analyticsRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnalyticsRequestFindManyArgs>(args?: SelectSubset<T, AnalyticsRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnalyticsRequest.
     * @param {AnalyticsRequestCreateArgs} args - Arguments to create a AnalyticsRequest.
     * @example
     * // Create one AnalyticsRequest
     * const AnalyticsRequest = await prisma.analyticsRequest.create({
     *   data: {
     *     // ... data to create a AnalyticsRequest
     *   }
     * })
     * 
     */
    create<T extends AnalyticsRequestCreateArgs>(args: SelectSubset<T, AnalyticsRequestCreateArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnalyticsRequests.
     * @param {AnalyticsRequestCreateManyArgs} args - Arguments to create many AnalyticsRequests.
     * @example
     * // Create many AnalyticsRequests
     * const analyticsRequest = await prisma.analyticsRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnalyticsRequestCreateManyArgs>(args?: SelectSubset<T, AnalyticsRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnalyticsRequests and returns the data saved in the database.
     * @param {AnalyticsRequestCreateManyAndReturnArgs} args - Arguments to create many AnalyticsRequests.
     * @example
     * // Create many AnalyticsRequests
     * const analyticsRequest = await prisma.analyticsRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnalyticsRequests and only return the `id`
     * const analyticsRequestWithIdOnly = await prisma.analyticsRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnalyticsRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, AnalyticsRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnalyticsRequest.
     * @param {AnalyticsRequestDeleteArgs} args - Arguments to delete one AnalyticsRequest.
     * @example
     * // Delete one AnalyticsRequest
     * const AnalyticsRequest = await prisma.analyticsRequest.delete({
     *   where: {
     *     // ... filter to delete one AnalyticsRequest
     *   }
     * })
     * 
     */
    delete<T extends AnalyticsRequestDeleteArgs>(args: SelectSubset<T, AnalyticsRequestDeleteArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnalyticsRequest.
     * @param {AnalyticsRequestUpdateArgs} args - Arguments to update one AnalyticsRequest.
     * @example
     * // Update one AnalyticsRequest
     * const analyticsRequest = await prisma.analyticsRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnalyticsRequestUpdateArgs>(args: SelectSubset<T, AnalyticsRequestUpdateArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnalyticsRequests.
     * @param {AnalyticsRequestDeleteManyArgs} args - Arguments to filter AnalyticsRequests to delete.
     * @example
     * // Delete a few AnalyticsRequests
     * const { count } = await prisma.analyticsRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnalyticsRequestDeleteManyArgs>(args?: SelectSubset<T, AnalyticsRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalyticsRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnalyticsRequests
     * const analyticsRequest = await prisma.analyticsRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnalyticsRequestUpdateManyArgs>(args: SelectSubset<T, AnalyticsRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalyticsRequests and returns the data updated in the database.
     * @param {AnalyticsRequestUpdateManyAndReturnArgs} args - Arguments to update many AnalyticsRequests.
     * @example
     * // Update many AnalyticsRequests
     * const analyticsRequest = await prisma.analyticsRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnalyticsRequests and only return the `id`
     * const analyticsRequestWithIdOnly = await prisma.analyticsRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnalyticsRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, AnalyticsRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnalyticsRequest.
     * @param {AnalyticsRequestUpsertArgs} args - Arguments to update or create a AnalyticsRequest.
     * @example
     * // Update or create a AnalyticsRequest
     * const analyticsRequest = await prisma.analyticsRequest.upsert({
     *   create: {
     *     // ... data to create a AnalyticsRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnalyticsRequest we want to update
     *   }
     * })
     */
    upsert<T extends AnalyticsRequestUpsertArgs>(args: SelectSubset<T, AnalyticsRequestUpsertArgs<ExtArgs>>): Prisma__AnalyticsRequestClient<$Result.GetResult<Prisma.$AnalyticsRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnalyticsRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestCountArgs} args - Arguments to filter AnalyticsRequests to count.
     * @example
     * // Count the number of AnalyticsRequests
     * const count = await prisma.analyticsRequest.count({
     *   where: {
     *     // ... the filter for the AnalyticsRequests we want to count
     *   }
     * })
    **/
    count<T extends AnalyticsRequestCountArgs>(
      args?: Subset<T, AnalyticsRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalyticsRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnalyticsRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalyticsRequestAggregateArgs>(args: Subset<T, AnalyticsRequestAggregateArgs>): Prisma.PrismaPromise<GetAnalyticsRequestAggregateType<T>>

    /**
     * Group by AnalyticsRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalyticsRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalyticsRequestGroupByArgs['orderBy'] }
        : { orderBy?: AnalyticsRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalyticsRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalyticsRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnalyticsRequest model
   */
  readonly fields: AnalyticsRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnalyticsRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnalyticsRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnalyticsRequest model
   */
  interface AnalyticsRequestFieldRefs {
    readonly id: FieldRef<"AnalyticsRequest", 'String'>
    readonly teacher_id: FieldRef<"AnalyticsRequest", 'String'>
    readonly request_type: FieldRef<"AnalyticsRequest", 'String'>
    readonly parameters: FieldRef<"AnalyticsRequest", 'Json'>
    readonly status: FieldRef<"AnalyticsRequest", 'String'>
    readonly results: FieldRef<"AnalyticsRequest", 'Json'>
    readonly created_at: FieldRef<"AnalyticsRequest", 'DateTime'>
    readonly completed_at: FieldRef<"AnalyticsRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnalyticsRequest findUnique
   */
  export type AnalyticsRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsRequest to fetch.
     */
    where: AnalyticsRequestWhereUniqueInput
  }

  /**
   * AnalyticsRequest findUniqueOrThrow
   */
  export type AnalyticsRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsRequest to fetch.
     */
    where: AnalyticsRequestWhereUniqueInput
  }

  /**
   * AnalyticsRequest findFirst
   */
  export type AnalyticsRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsRequest to fetch.
     */
    where?: AnalyticsRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsRequests to fetch.
     */
    orderBy?: AnalyticsRequestOrderByWithRelationInput | AnalyticsRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsRequests.
     */
    cursor?: AnalyticsRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsRequests.
     */
    distinct?: AnalyticsRequestScalarFieldEnum | AnalyticsRequestScalarFieldEnum[]
  }

  /**
   * AnalyticsRequest findFirstOrThrow
   */
  export type AnalyticsRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsRequest to fetch.
     */
    where?: AnalyticsRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsRequests to fetch.
     */
    orderBy?: AnalyticsRequestOrderByWithRelationInput | AnalyticsRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsRequests.
     */
    cursor?: AnalyticsRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsRequests.
     */
    distinct?: AnalyticsRequestScalarFieldEnum | AnalyticsRequestScalarFieldEnum[]
  }

  /**
   * AnalyticsRequest findMany
   */
  export type AnalyticsRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsRequests to fetch.
     */
    where?: AnalyticsRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsRequests to fetch.
     */
    orderBy?: AnalyticsRequestOrderByWithRelationInput | AnalyticsRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnalyticsRequests.
     */
    cursor?: AnalyticsRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsRequests.
     */
    skip?: number
    distinct?: AnalyticsRequestScalarFieldEnum | AnalyticsRequestScalarFieldEnum[]
  }

  /**
   * AnalyticsRequest create
   */
  export type AnalyticsRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a AnalyticsRequest.
     */
    data: XOR<AnalyticsRequestCreateInput, AnalyticsRequestUncheckedCreateInput>
  }

  /**
   * AnalyticsRequest createMany
   */
  export type AnalyticsRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnalyticsRequests.
     */
    data: AnalyticsRequestCreateManyInput | AnalyticsRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnalyticsRequest createManyAndReturn
   */
  export type AnalyticsRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * The data used to create many AnalyticsRequests.
     */
    data: AnalyticsRequestCreateManyInput | AnalyticsRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnalyticsRequest update
   */
  export type AnalyticsRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a AnalyticsRequest.
     */
    data: XOR<AnalyticsRequestUpdateInput, AnalyticsRequestUncheckedUpdateInput>
    /**
     * Choose, which AnalyticsRequest to update.
     */
    where: AnalyticsRequestWhereUniqueInput
  }

  /**
   * AnalyticsRequest updateMany
   */
  export type AnalyticsRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnalyticsRequests.
     */
    data: XOR<AnalyticsRequestUpdateManyMutationInput, AnalyticsRequestUncheckedUpdateManyInput>
    /**
     * Filter which AnalyticsRequests to update
     */
    where?: AnalyticsRequestWhereInput
    /**
     * Limit how many AnalyticsRequests to update.
     */
    limit?: number
  }

  /**
   * AnalyticsRequest updateManyAndReturn
   */
  export type AnalyticsRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * The data used to update AnalyticsRequests.
     */
    data: XOR<AnalyticsRequestUpdateManyMutationInput, AnalyticsRequestUncheckedUpdateManyInput>
    /**
     * Filter which AnalyticsRequests to update
     */
    where?: AnalyticsRequestWhereInput
    /**
     * Limit how many AnalyticsRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnalyticsRequest upsert
   */
  export type AnalyticsRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the AnalyticsRequest to update in case it exists.
     */
    where: AnalyticsRequestWhereUniqueInput
    /**
     * In case the AnalyticsRequest found by the `where` argument doesn't exist, create a new AnalyticsRequest with this data.
     */
    create: XOR<AnalyticsRequestCreateInput, AnalyticsRequestUncheckedCreateInput>
    /**
     * In case the AnalyticsRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalyticsRequestUpdateInput, AnalyticsRequestUncheckedUpdateInput>
  }

  /**
   * AnalyticsRequest delete
   */
  export type AnalyticsRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
    /**
     * Filter which AnalyticsRequest to delete.
     */
    where: AnalyticsRequestWhereUniqueInput
  }

  /**
   * AnalyticsRequest deleteMany
   */
  export type AnalyticsRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsRequests to delete
     */
    where?: AnalyticsRequestWhereInput
    /**
     * Limit how many AnalyticsRequests to delete.
     */
    limit?: number
  }

  /**
   * AnalyticsRequest without action
   */
  export type AnalyticsRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsRequest
     */
    select?: AnalyticsRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsRequest
     */
    omit?: AnalyticsRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsRequestInclude<ExtArgs> | null
  }


  /**
   * Model AgentInteraction
   */

  export type AggregateAgentInteraction = {
    _count: AgentInteractionCountAggregateOutputType | null
    _avg: AgentInteractionAvgAggregateOutputType | null
    _sum: AgentInteractionSumAggregateOutputType | null
    _min: AgentInteractionMinAggregateOutputType | null
    _max: AgentInteractionMaxAggregateOutputType | null
  }

  export type AgentInteractionAvgAggregateOutputType = {
    processing_time: number | null
  }

  export type AgentInteractionSumAggregateOutputType = {
    processing_time: number | null
  }

  export type AgentInteractionMinAggregateOutputType = {
    id: string | null
    session_id: string | null
    agent_type: string | null
    interaction_type: string | null
    processing_time: number | null
    timestamp: Date | null
    success: boolean | null
    error_message: string | null
  }

  export type AgentInteractionMaxAggregateOutputType = {
    id: string | null
    session_id: string | null
    agent_type: string | null
    interaction_type: string | null
    processing_time: number | null
    timestamp: Date | null
    success: boolean | null
    error_message: string | null
  }

  export type AgentInteractionCountAggregateOutputType = {
    id: number
    session_id: number
    agent_type: number
    interaction_type: number
    input_data: number
    output_data: number
    processing_time: number
    timestamp: number
    success: number
    error_message: number
    _all: number
  }


  export type AgentInteractionAvgAggregateInputType = {
    processing_time?: true
  }

  export type AgentInteractionSumAggregateInputType = {
    processing_time?: true
  }

  export type AgentInteractionMinAggregateInputType = {
    id?: true
    session_id?: true
    agent_type?: true
    interaction_type?: true
    processing_time?: true
    timestamp?: true
    success?: true
    error_message?: true
  }

  export type AgentInteractionMaxAggregateInputType = {
    id?: true
    session_id?: true
    agent_type?: true
    interaction_type?: true
    processing_time?: true
    timestamp?: true
    success?: true
    error_message?: true
  }

  export type AgentInteractionCountAggregateInputType = {
    id?: true
    session_id?: true
    agent_type?: true
    interaction_type?: true
    input_data?: true
    output_data?: true
    processing_time?: true
    timestamp?: true
    success?: true
    error_message?: true
    _all?: true
  }

  export type AgentInteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentInteraction to aggregate.
     */
    where?: AgentInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentInteractions to fetch.
     */
    orderBy?: AgentInteractionOrderByWithRelationInput | AgentInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentInteractions
    **/
    _count?: true | AgentInteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentInteractionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentInteractionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentInteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentInteractionMaxAggregateInputType
  }

  export type GetAgentInteractionAggregateType<T extends AgentInteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentInteraction[P]>
      : GetScalarType<T[P], AggregateAgentInteraction[P]>
  }




  export type AgentInteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentInteractionWhereInput
    orderBy?: AgentInteractionOrderByWithAggregationInput | AgentInteractionOrderByWithAggregationInput[]
    by: AgentInteractionScalarFieldEnum[] | AgentInteractionScalarFieldEnum
    having?: AgentInteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentInteractionCountAggregateInputType | true
    _avg?: AgentInteractionAvgAggregateInputType
    _sum?: AgentInteractionSumAggregateInputType
    _min?: AgentInteractionMinAggregateInputType
    _max?: AgentInteractionMaxAggregateInputType
  }

  export type AgentInteractionGroupByOutputType = {
    id: string
    session_id: string | null
    agent_type: string
    interaction_type: string
    input_data: JsonValue
    output_data: JsonValue
    processing_time: number
    timestamp: Date
    success: boolean
    error_message: string | null
    _count: AgentInteractionCountAggregateOutputType | null
    _avg: AgentInteractionAvgAggregateOutputType | null
    _sum: AgentInteractionSumAggregateOutputType | null
    _min: AgentInteractionMinAggregateOutputType | null
    _max: AgentInteractionMaxAggregateOutputType | null
  }

  type GetAgentInteractionGroupByPayload<T extends AgentInteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentInteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentInteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentInteractionGroupByOutputType[P]>
            : GetScalarType<T[P], AgentInteractionGroupByOutputType[P]>
        }
      >
    >


  export type AgentInteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    agent_type?: boolean
    interaction_type?: boolean
    input_data?: boolean
    output_data?: boolean
    processing_time?: boolean
    timestamp?: boolean
    success?: boolean
    error_message?: boolean
  }, ExtArgs["result"]["agentInteraction"]>

  export type AgentInteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    agent_type?: boolean
    interaction_type?: boolean
    input_data?: boolean
    output_data?: boolean
    processing_time?: boolean
    timestamp?: boolean
    success?: boolean
    error_message?: boolean
  }, ExtArgs["result"]["agentInteraction"]>

  export type AgentInteractionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    agent_type?: boolean
    interaction_type?: boolean
    input_data?: boolean
    output_data?: boolean
    processing_time?: boolean
    timestamp?: boolean
    success?: boolean
    error_message?: boolean
  }, ExtArgs["result"]["agentInteraction"]>

  export type AgentInteractionSelectScalar = {
    id?: boolean
    session_id?: boolean
    agent_type?: boolean
    interaction_type?: boolean
    input_data?: boolean
    output_data?: boolean
    processing_time?: boolean
    timestamp?: boolean
    success?: boolean
    error_message?: boolean
  }

  export type AgentInteractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "session_id" | "agent_type" | "interaction_type" | "input_data" | "output_data" | "processing_time" | "timestamp" | "success" | "error_message", ExtArgs["result"]["agentInteraction"]>

  export type $AgentInteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentInteraction"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session_id: string | null
      agent_type: string
      interaction_type: string
      input_data: Prisma.JsonValue
      output_data: Prisma.JsonValue
      processing_time: number
      timestamp: Date
      success: boolean
      error_message: string | null
    }, ExtArgs["result"]["agentInteraction"]>
    composites: {}
  }

  type AgentInteractionGetPayload<S extends boolean | null | undefined | AgentInteractionDefaultArgs> = $Result.GetResult<Prisma.$AgentInteractionPayload, S>

  type AgentInteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgentInteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgentInteractionCountAggregateInputType | true
    }

  export interface AgentInteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentInteraction'], meta: { name: 'AgentInteraction' } }
    /**
     * Find zero or one AgentInteraction that matches the filter.
     * @param {AgentInteractionFindUniqueArgs} args - Arguments to find a AgentInteraction
     * @example
     * // Get one AgentInteraction
     * const agentInteraction = await prisma.agentInteraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentInteractionFindUniqueArgs>(args: SelectSubset<T, AgentInteractionFindUniqueArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgentInteraction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgentInteractionFindUniqueOrThrowArgs} args - Arguments to find a AgentInteraction
     * @example
     * // Get one AgentInteraction
     * const agentInteraction = await prisma.agentInteraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentInteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentInteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgentInteraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionFindFirstArgs} args - Arguments to find a AgentInteraction
     * @example
     * // Get one AgentInteraction
     * const agentInteraction = await prisma.agentInteraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentInteractionFindFirstArgs>(args?: SelectSubset<T, AgentInteractionFindFirstArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgentInteraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionFindFirstOrThrowArgs} args - Arguments to find a AgentInteraction
     * @example
     * // Get one AgentInteraction
     * const agentInteraction = await prisma.agentInteraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentInteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentInteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgentInteractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentInteractions
     * const agentInteractions = await prisma.agentInteraction.findMany()
     * 
     * // Get first 10 AgentInteractions
     * const agentInteractions = await prisma.agentInteraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentInteractionWithIdOnly = await prisma.agentInteraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentInteractionFindManyArgs>(args?: SelectSubset<T, AgentInteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgentInteraction.
     * @param {AgentInteractionCreateArgs} args - Arguments to create a AgentInteraction.
     * @example
     * // Create one AgentInteraction
     * const AgentInteraction = await prisma.agentInteraction.create({
     *   data: {
     *     // ... data to create a AgentInteraction
     *   }
     * })
     * 
     */
    create<T extends AgentInteractionCreateArgs>(args: SelectSubset<T, AgentInteractionCreateArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgentInteractions.
     * @param {AgentInteractionCreateManyArgs} args - Arguments to create many AgentInteractions.
     * @example
     * // Create many AgentInteractions
     * const agentInteraction = await prisma.agentInteraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentInteractionCreateManyArgs>(args?: SelectSubset<T, AgentInteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentInteractions and returns the data saved in the database.
     * @param {AgentInteractionCreateManyAndReturnArgs} args - Arguments to create many AgentInteractions.
     * @example
     * // Create many AgentInteractions
     * const agentInteraction = await prisma.agentInteraction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentInteractions and only return the `id`
     * const agentInteractionWithIdOnly = await prisma.agentInteraction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentInteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentInteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgentInteraction.
     * @param {AgentInteractionDeleteArgs} args - Arguments to delete one AgentInteraction.
     * @example
     * // Delete one AgentInteraction
     * const AgentInteraction = await prisma.agentInteraction.delete({
     *   where: {
     *     // ... filter to delete one AgentInteraction
     *   }
     * })
     * 
     */
    delete<T extends AgentInteractionDeleteArgs>(args: SelectSubset<T, AgentInteractionDeleteArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgentInteraction.
     * @param {AgentInteractionUpdateArgs} args - Arguments to update one AgentInteraction.
     * @example
     * // Update one AgentInteraction
     * const agentInteraction = await prisma.agentInteraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentInteractionUpdateArgs>(args: SelectSubset<T, AgentInteractionUpdateArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgentInteractions.
     * @param {AgentInteractionDeleteManyArgs} args - Arguments to filter AgentInteractions to delete.
     * @example
     * // Delete a few AgentInteractions
     * const { count } = await prisma.agentInteraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentInteractionDeleteManyArgs>(args?: SelectSubset<T, AgentInteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentInteractions
     * const agentInteraction = await prisma.agentInteraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentInteractionUpdateManyArgs>(args: SelectSubset<T, AgentInteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentInteractions and returns the data updated in the database.
     * @param {AgentInteractionUpdateManyAndReturnArgs} args - Arguments to update many AgentInteractions.
     * @example
     * // Update many AgentInteractions
     * const agentInteraction = await prisma.agentInteraction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgentInteractions and only return the `id`
     * const agentInteractionWithIdOnly = await prisma.agentInteraction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgentInteractionUpdateManyAndReturnArgs>(args: SelectSubset<T, AgentInteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgentInteraction.
     * @param {AgentInteractionUpsertArgs} args - Arguments to update or create a AgentInteraction.
     * @example
     * // Update or create a AgentInteraction
     * const agentInteraction = await prisma.agentInteraction.upsert({
     *   create: {
     *     // ... data to create a AgentInteraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentInteraction we want to update
     *   }
     * })
     */
    upsert<T extends AgentInteractionUpsertArgs>(args: SelectSubset<T, AgentInteractionUpsertArgs<ExtArgs>>): Prisma__AgentInteractionClient<$Result.GetResult<Prisma.$AgentInteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgentInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionCountArgs} args - Arguments to filter AgentInteractions to count.
     * @example
     * // Count the number of AgentInteractions
     * const count = await prisma.agentInteraction.count({
     *   where: {
     *     // ... the filter for the AgentInteractions we want to count
     *   }
     * })
    **/
    count<T extends AgentInteractionCountArgs>(
      args?: Subset<T, AgentInteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentInteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentInteractionAggregateArgs>(args: Subset<T, AgentInteractionAggregateArgs>): Prisma.PrismaPromise<GetAgentInteractionAggregateType<T>>

    /**
     * Group by AgentInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentInteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentInteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentInteractionGroupByArgs['orderBy'] }
        : { orderBy?: AgentInteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentInteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentInteraction model
   */
  readonly fields: AgentInteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentInteraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentInteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentInteraction model
   */
  interface AgentInteractionFieldRefs {
    readonly id: FieldRef<"AgentInteraction", 'String'>
    readonly session_id: FieldRef<"AgentInteraction", 'String'>
    readonly agent_type: FieldRef<"AgentInteraction", 'String'>
    readonly interaction_type: FieldRef<"AgentInteraction", 'String'>
    readonly input_data: FieldRef<"AgentInteraction", 'Json'>
    readonly output_data: FieldRef<"AgentInteraction", 'Json'>
    readonly processing_time: FieldRef<"AgentInteraction", 'Float'>
    readonly timestamp: FieldRef<"AgentInteraction", 'DateTime'>
    readonly success: FieldRef<"AgentInteraction", 'Boolean'>
    readonly error_message: FieldRef<"AgentInteraction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AgentInteraction findUnique
   */
  export type AgentInteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * Filter, which AgentInteraction to fetch.
     */
    where: AgentInteractionWhereUniqueInput
  }

  /**
   * AgentInteraction findUniqueOrThrow
   */
  export type AgentInteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * Filter, which AgentInteraction to fetch.
     */
    where: AgentInteractionWhereUniqueInput
  }

  /**
   * AgentInteraction findFirst
   */
  export type AgentInteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * Filter, which AgentInteraction to fetch.
     */
    where?: AgentInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentInteractions to fetch.
     */
    orderBy?: AgentInteractionOrderByWithRelationInput | AgentInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentInteractions.
     */
    cursor?: AgentInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentInteractions.
     */
    distinct?: AgentInteractionScalarFieldEnum | AgentInteractionScalarFieldEnum[]
  }

  /**
   * AgentInteraction findFirstOrThrow
   */
  export type AgentInteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * Filter, which AgentInteraction to fetch.
     */
    where?: AgentInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentInteractions to fetch.
     */
    orderBy?: AgentInteractionOrderByWithRelationInput | AgentInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentInteractions.
     */
    cursor?: AgentInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentInteractions.
     */
    distinct?: AgentInteractionScalarFieldEnum | AgentInteractionScalarFieldEnum[]
  }

  /**
   * AgentInteraction findMany
   */
  export type AgentInteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * Filter, which AgentInteractions to fetch.
     */
    where?: AgentInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentInteractions to fetch.
     */
    orderBy?: AgentInteractionOrderByWithRelationInput | AgentInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentInteractions.
     */
    cursor?: AgentInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentInteractions.
     */
    skip?: number
    distinct?: AgentInteractionScalarFieldEnum | AgentInteractionScalarFieldEnum[]
  }

  /**
   * AgentInteraction create
   */
  export type AgentInteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * The data needed to create a AgentInteraction.
     */
    data: XOR<AgentInteractionCreateInput, AgentInteractionUncheckedCreateInput>
  }

  /**
   * AgentInteraction createMany
   */
  export type AgentInteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentInteractions.
     */
    data: AgentInteractionCreateManyInput | AgentInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentInteraction createManyAndReturn
   */
  export type AgentInteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * The data used to create many AgentInteractions.
     */
    data: AgentInteractionCreateManyInput | AgentInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentInteraction update
   */
  export type AgentInteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * The data needed to update a AgentInteraction.
     */
    data: XOR<AgentInteractionUpdateInput, AgentInteractionUncheckedUpdateInput>
    /**
     * Choose, which AgentInteraction to update.
     */
    where: AgentInteractionWhereUniqueInput
  }

  /**
   * AgentInteraction updateMany
   */
  export type AgentInteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentInteractions.
     */
    data: XOR<AgentInteractionUpdateManyMutationInput, AgentInteractionUncheckedUpdateManyInput>
    /**
     * Filter which AgentInteractions to update
     */
    where?: AgentInteractionWhereInput
    /**
     * Limit how many AgentInteractions to update.
     */
    limit?: number
  }

  /**
   * AgentInteraction updateManyAndReturn
   */
  export type AgentInteractionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * The data used to update AgentInteractions.
     */
    data: XOR<AgentInteractionUpdateManyMutationInput, AgentInteractionUncheckedUpdateManyInput>
    /**
     * Filter which AgentInteractions to update
     */
    where?: AgentInteractionWhereInput
    /**
     * Limit how many AgentInteractions to update.
     */
    limit?: number
  }

  /**
   * AgentInteraction upsert
   */
  export type AgentInteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * The filter to search for the AgentInteraction to update in case it exists.
     */
    where: AgentInteractionWhereUniqueInput
    /**
     * In case the AgentInteraction found by the `where` argument doesn't exist, create a new AgentInteraction with this data.
     */
    create: XOR<AgentInteractionCreateInput, AgentInteractionUncheckedCreateInput>
    /**
     * In case the AgentInteraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentInteractionUpdateInput, AgentInteractionUncheckedUpdateInput>
  }

  /**
   * AgentInteraction delete
   */
  export type AgentInteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
    /**
     * Filter which AgentInteraction to delete.
     */
    where: AgentInteractionWhereUniqueInput
  }

  /**
   * AgentInteraction deleteMany
   */
  export type AgentInteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentInteractions to delete
     */
    where?: AgentInteractionWhereInput
    /**
     * Limit how many AgentInteractions to delete.
     */
    limit?: number
  }

  /**
   * AgentInteraction without action
   */
  export type AgentInteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentInteraction
     */
    select?: AgentInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentInteraction
     */
    omit?: AgentInteractionOmit<ExtArgs> | null
  }


  /**
   * Model Summary
   */

  export type AggregateSummary = {
    _count: SummaryCountAggregateOutputType | null
    _min: SummaryMinAggregateOutputType | null
    _max: SummaryMaxAggregateOutputType | null
  }

  export type SummaryMinAggregateOutputType = {
    id: string | null
    summary: string | null
  }

  export type SummaryMaxAggregateOutputType = {
    id: string | null
    summary: string | null
  }

  export type SummaryCountAggregateOutputType = {
    id: number
    summary: number
    _all: number
  }


  export type SummaryMinAggregateInputType = {
    id?: true
    summary?: true
  }

  export type SummaryMaxAggregateInputType = {
    id?: true
    summary?: true
  }

  export type SummaryCountAggregateInputType = {
    id?: true
    summary?: true
    _all?: true
  }

  export type SummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Summary to aggregate.
     */
    where?: SummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Summaries to fetch.
     */
    orderBy?: SummaryOrderByWithRelationInput | SummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Summaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Summaries
    **/
    _count?: true | SummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SummaryMaxAggregateInputType
  }

  export type GetSummaryAggregateType<T extends SummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSummary[P]>
      : GetScalarType<T[P], AggregateSummary[P]>
  }




  export type SummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SummaryWhereInput
    orderBy?: SummaryOrderByWithAggregationInput | SummaryOrderByWithAggregationInput[]
    by: SummaryScalarFieldEnum[] | SummaryScalarFieldEnum
    having?: SummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SummaryCountAggregateInputType | true
    _min?: SummaryMinAggregateInputType
    _max?: SummaryMaxAggregateInputType
  }

  export type SummaryGroupByOutputType = {
    id: string
    summary: string | null
    _count: SummaryCountAggregateOutputType | null
    _min: SummaryMinAggregateOutputType | null
    _max: SummaryMaxAggregateOutputType | null
  }

  type GetSummaryGroupByPayload<T extends SummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SummaryGroupByOutputType[P]>
            : GetScalarType<T[P], SummaryGroupByOutputType[P]>
        }
      >
    >


  export type SummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    summary?: boolean
  }, ExtArgs["result"]["summary"]>

  export type SummarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    summary?: boolean
  }, ExtArgs["result"]["summary"]>

  export type SummarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    summary?: boolean
  }, ExtArgs["result"]["summary"]>

  export type SummarySelectScalar = {
    id?: boolean
    summary?: boolean
  }

  export type SummaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "summary", ExtArgs["result"]["summary"]>

  export type $SummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Summary"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      summary: string | null
    }, ExtArgs["result"]["summary"]>
    composites: {}
  }

  type SummaryGetPayload<S extends boolean | null | undefined | SummaryDefaultArgs> = $Result.GetResult<Prisma.$SummaryPayload, S>

  type SummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SummaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SummaryCountAggregateInputType | true
    }

  export interface SummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Summary'], meta: { name: 'Summary' } }
    /**
     * Find zero or one Summary that matches the filter.
     * @param {SummaryFindUniqueArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SummaryFindUniqueArgs>(args: SelectSubset<T, SummaryFindUniqueArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Summary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SummaryFindUniqueOrThrowArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, SummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Summary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryFindFirstArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SummaryFindFirstArgs>(args?: SelectSubset<T, SummaryFindFirstArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Summary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryFindFirstOrThrowArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, SummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Summaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Summaries
     * const summaries = await prisma.summary.findMany()
     * 
     * // Get first 10 Summaries
     * const summaries = await prisma.summary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const summaryWithIdOnly = await prisma.summary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SummaryFindManyArgs>(args?: SelectSubset<T, SummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Summary.
     * @param {SummaryCreateArgs} args - Arguments to create a Summary.
     * @example
     * // Create one Summary
     * const Summary = await prisma.summary.create({
     *   data: {
     *     // ... data to create a Summary
     *   }
     * })
     * 
     */
    create<T extends SummaryCreateArgs>(args: SelectSubset<T, SummaryCreateArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Summaries.
     * @param {SummaryCreateManyArgs} args - Arguments to create many Summaries.
     * @example
     * // Create many Summaries
     * const summary = await prisma.summary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SummaryCreateManyArgs>(args?: SelectSubset<T, SummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Summaries and returns the data saved in the database.
     * @param {SummaryCreateManyAndReturnArgs} args - Arguments to create many Summaries.
     * @example
     * // Create many Summaries
     * const summary = await prisma.summary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Summaries and only return the `id`
     * const summaryWithIdOnly = await prisma.summary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SummaryCreateManyAndReturnArgs>(args?: SelectSubset<T, SummaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Summary.
     * @param {SummaryDeleteArgs} args - Arguments to delete one Summary.
     * @example
     * // Delete one Summary
     * const Summary = await prisma.summary.delete({
     *   where: {
     *     // ... filter to delete one Summary
     *   }
     * })
     * 
     */
    delete<T extends SummaryDeleteArgs>(args: SelectSubset<T, SummaryDeleteArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Summary.
     * @param {SummaryUpdateArgs} args - Arguments to update one Summary.
     * @example
     * // Update one Summary
     * const summary = await prisma.summary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SummaryUpdateArgs>(args: SelectSubset<T, SummaryUpdateArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Summaries.
     * @param {SummaryDeleteManyArgs} args - Arguments to filter Summaries to delete.
     * @example
     * // Delete a few Summaries
     * const { count } = await prisma.summary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SummaryDeleteManyArgs>(args?: SelectSubset<T, SummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Summaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Summaries
     * const summary = await prisma.summary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SummaryUpdateManyArgs>(args: SelectSubset<T, SummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Summaries and returns the data updated in the database.
     * @param {SummaryUpdateManyAndReturnArgs} args - Arguments to update many Summaries.
     * @example
     * // Update many Summaries
     * const summary = await prisma.summary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Summaries and only return the `id`
     * const summaryWithIdOnly = await prisma.summary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SummaryUpdateManyAndReturnArgs>(args: SelectSubset<T, SummaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Summary.
     * @param {SummaryUpsertArgs} args - Arguments to update or create a Summary.
     * @example
     * // Update or create a Summary
     * const summary = await prisma.summary.upsert({
     *   create: {
     *     // ... data to create a Summary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Summary we want to update
     *   }
     * })
     */
    upsert<T extends SummaryUpsertArgs>(args: SelectSubset<T, SummaryUpsertArgs<ExtArgs>>): Prisma__SummaryClient<$Result.GetResult<Prisma.$SummaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Summaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryCountArgs} args - Arguments to filter Summaries to count.
     * @example
     * // Count the number of Summaries
     * const count = await prisma.summary.count({
     *   where: {
     *     // ... the filter for the Summaries we want to count
     *   }
     * })
    **/
    count<T extends SummaryCountArgs>(
      args?: Subset<T, SummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Summary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SummaryAggregateArgs>(args: Subset<T, SummaryAggregateArgs>): Prisma.PrismaPromise<GetSummaryAggregateType<T>>

    /**
     * Group by Summary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SummaryGroupByArgs['orderBy'] }
        : { orderBy?: SummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Summary model
   */
  readonly fields: SummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Summary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Summary model
   */
  interface SummaryFieldRefs {
    readonly id: FieldRef<"Summary", 'String'>
    readonly summary: FieldRef<"Summary", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Summary findUnique
   */
  export type SummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * Filter, which Summary to fetch.
     */
    where: SummaryWhereUniqueInput
  }

  /**
   * Summary findUniqueOrThrow
   */
  export type SummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * Filter, which Summary to fetch.
     */
    where: SummaryWhereUniqueInput
  }

  /**
   * Summary findFirst
   */
  export type SummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * Filter, which Summary to fetch.
     */
    where?: SummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Summaries to fetch.
     */
    orderBy?: SummaryOrderByWithRelationInput | SummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Summaries.
     */
    cursor?: SummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Summaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Summaries.
     */
    distinct?: SummaryScalarFieldEnum | SummaryScalarFieldEnum[]
  }

  /**
   * Summary findFirstOrThrow
   */
  export type SummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * Filter, which Summary to fetch.
     */
    where?: SummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Summaries to fetch.
     */
    orderBy?: SummaryOrderByWithRelationInput | SummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Summaries.
     */
    cursor?: SummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Summaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Summaries.
     */
    distinct?: SummaryScalarFieldEnum | SummaryScalarFieldEnum[]
  }

  /**
   * Summary findMany
   */
  export type SummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * Filter, which Summaries to fetch.
     */
    where?: SummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Summaries to fetch.
     */
    orderBy?: SummaryOrderByWithRelationInput | SummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Summaries.
     */
    cursor?: SummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Summaries.
     */
    skip?: number
    distinct?: SummaryScalarFieldEnum | SummaryScalarFieldEnum[]
  }

  /**
   * Summary create
   */
  export type SummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * The data needed to create a Summary.
     */
    data?: XOR<SummaryCreateInput, SummaryUncheckedCreateInput>
  }

  /**
   * Summary createMany
   */
  export type SummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Summaries.
     */
    data: SummaryCreateManyInput | SummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Summary createManyAndReturn
   */
  export type SummaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * The data used to create many Summaries.
     */
    data: SummaryCreateManyInput | SummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Summary update
   */
  export type SummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * The data needed to update a Summary.
     */
    data: XOR<SummaryUpdateInput, SummaryUncheckedUpdateInput>
    /**
     * Choose, which Summary to update.
     */
    where: SummaryWhereUniqueInput
  }

  /**
   * Summary updateMany
   */
  export type SummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Summaries.
     */
    data: XOR<SummaryUpdateManyMutationInput, SummaryUncheckedUpdateManyInput>
    /**
     * Filter which Summaries to update
     */
    where?: SummaryWhereInput
    /**
     * Limit how many Summaries to update.
     */
    limit?: number
  }

  /**
   * Summary updateManyAndReturn
   */
  export type SummaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * The data used to update Summaries.
     */
    data: XOR<SummaryUpdateManyMutationInput, SummaryUncheckedUpdateManyInput>
    /**
     * Filter which Summaries to update
     */
    where?: SummaryWhereInput
    /**
     * Limit how many Summaries to update.
     */
    limit?: number
  }

  /**
   * Summary upsert
   */
  export type SummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * The filter to search for the Summary to update in case it exists.
     */
    where: SummaryWhereUniqueInput
    /**
     * In case the Summary found by the `where` argument doesn't exist, create a new Summary with this data.
     */
    create: XOR<SummaryCreateInput, SummaryUncheckedCreateInput>
    /**
     * In case the Summary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SummaryUpdateInput, SummaryUncheckedUpdateInput>
  }

  /**
   * Summary delete
   */
  export type SummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
    /**
     * Filter which Summary to delete.
     */
    where: SummaryWhereUniqueInput
  }

  /**
   * Summary deleteMany
   */
  export type SummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Summaries to delete
     */
    where?: SummaryWhereInput
    /**
     * Limit how many Summaries to delete.
     */
    limit?: number
  }

  /**
   * Summary without action
   */
  export type SummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Summary
     */
    select?: SummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Summary
     */
    omit?: SummaryOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    role: 'role',
    email: 'email',
    grade: 'grade',
    subject_focus: 'subject_focus',
    learning_style: 'learning_style',
    preferred_content: 'preferred_content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    content: 'content',
    classId: 'classId',
    studentId: 'studentId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    restrictions: 'restrictions',
    teachingStyle: 'teachingStyle',
    teacherId: 'teacherId',
    otherNotes: 'otherNotes',
    studentGrade: 'studentGrade',
    subject: 'subject',
    customInsights: 'customInsights'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const InsightScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    classId: 'classId'
  };

  export type InsightScalarFieldEnum = (typeof InsightScalarFieldEnum)[keyof typeof InsightScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    name: 'name',
    role: 'role',
    email: 'email',
    subject: 'subject',
    created_at: 'created_at',
    updated_at: 'updated_at',
    supervised_students: 'supervised_students'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const ChatSessionScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    session_type: 'session_type',
    started_at: 'started_at',
    ended_at: 'ended_at',
    status: 'status',
    questions_asked: 'questions_asked',
    concepts_covered: 'concepts_covered',
    difficulty_level: 'difficulty_level',
    success_indicators: 'success_indicators',
    classId: 'classId'
  };

  export type ChatSessionScalarFieldEnum = (typeof ChatSessionScalarFieldEnum)[keyof typeof ChatSessionScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    session_id: 'session_id',
    sender_type: 'sender_type',
    agent_type: 'agent_type',
    content: 'content',
    message_type: 'message_type',
    timestamp: 'timestamp',
    processed_by: 'processed_by',
    flagged_content: 'flagged_content',
    learning_indicators: 'learning_indicators'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const StudentPreferenceScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    preference_type: 'preference_type',
    preference_value: 'preference_value',
    confidence_score: 'confidence_score',
    last_updated: 'last_updated',
    detection_method: 'detection_method'
  };

  export type StudentPreferenceScalarFieldEnum = (typeof StudentPreferenceScalarFieldEnum)[keyof typeof StudentPreferenceScalarFieldEnum]


  export const LearningAnalyticsScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    date: 'date',
    session_duration: 'session_duration',
    questions_per_session: 'questions_per_session',
    response_time_avg: 'response_time_avg',
    concepts_mastered: 'concepts_mastered',
    difficulty_progression: 'difficulty_progression',
    success_rate: 'success_rate',
    preferred_session_time: 'preferred_session_time',
    interaction_patterns: 'interaction_patterns'
  };

  export type LearningAnalyticsScalarFieldEnum = (typeof LearningAnalyticsScalarFieldEnum)[keyof typeof LearningAnalyticsScalarFieldEnum]


  export const FrequentlyAskedQuestionScalarFieldEnum: {
    id: 'id',
    question_text: 'question_text',
    category: 'category',
    frequency_count: 'frequency_count',
    first_asked: 'first_asked',
    last_asked: 'last_asked',
    common_answers: 'common_answers',
    success_rate: 'success_rate',
    similar_questions: 'similar_questions',
    keywords: 'keywords'
  };

  export type FrequentlyAskedQuestionScalarFieldEnum = (typeof FrequentlyAskedQuestionScalarFieldEnum)[keyof typeof FrequentlyAskedQuestionScalarFieldEnum]


  export const SessionTakeawayScalarFieldEnum: {
    id: 'id',
    session_id: 'session_id',
    takeaway_type: 'takeaway_type',
    summary: 'summary',
    key_concepts: 'key_concepts',
    effective_methods: 'effective_methods',
    created_at: 'created_at',
    embedding_vector: 'embedding_vector',
    relevance_score: 'relevance_score'
  };

  export type SessionTakeawayScalarFieldEnum = (typeof SessionTakeawayScalarFieldEnum)[keyof typeof SessionTakeawayScalarFieldEnum]


  export const AnalyticsRequestScalarFieldEnum: {
    id: 'id',
    teacher_id: 'teacher_id',
    request_type: 'request_type',
    parameters: 'parameters',
    status: 'status',
    results: 'results',
    created_at: 'created_at',
    completed_at: 'completed_at'
  };

  export type AnalyticsRequestScalarFieldEnum = (typeof AnalyticsRequestScalarFieldEnum)[keyof typeof AnalyticsRequestScalarFieldEnum]


  export const AgentInteractionScalarFieldEnum: {
    id: 'id',
    session_id: 'session_id',
    agent_type: 'agent_type',
    interaction_type: 'interaction_type',
    input_data: 'input_data',
    output_data: 'output_data',
    processing_time: 'processing_time',
    timestamp: 'timestamp',
    success: 'success',
    error_message: 'error_message'
  };

  export type AgentInteractionScalarFieldEnum = (typeof AgentInteractionScalarFieldEnum)[keyof typeof AgentInteractionScalarFieldEnum]


  export const SummaryScalarFieldEnum: {
    id: 'id',
    summary: 'summary'
  };

  export type SummaryScalarFieldEnum = (typeof SummaryScalarFieldEnum)[keyof typeof SummaryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Difficulty[]'
   */
  export type ListEnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    email?: StringFilter<"Student"> | string
    grade?: IntFilter<"Student"> | number
    subject_focus?: StringFilter<"Student"> | string
    learning_style?: StringFilter<"Student"> | string
    preferred_content?: StringFilter<"Student"> | string
    created_at?: DateTimeFilter<"Student"> | Date | string
    updated_at?: DateTimeFilter<"Student"> | Date | string
    chat_sessions?: ChatSessionListRelationFilter
    learning_analytics?: LearningAnalyticsListRelationFilter
    notes?: NoteListRelationFilter
    preferences?: StudentPreferenceListRelationFilter
    classes?: ClassListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    grade?: SortOrder
    subject_focus?: SortOrder
    learning_style?: SortOrder
    preferred_content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    chat_sessions?: ChatSessionOrderByRelationAggregateInput
    learning_analytics?: LearningAnalyticsOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    preferences?: StudentPreferenceOrderByRelationAggregateInput
    classes?: ClassOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    grade?: IntFilter<"Student"> | number
    subject_focus?: StringFilter<"Student"> | string
    learning_style?: StringFilter<"Student"> | string
    preferred_content?: StringFilter<"Student"> | string
    created_at?: DateTimeFilter<"Student"> | Date | string
    updated_at?: DateTimeFilter<"Student"> | Date | string
    chat_sessions?: ChatSessionListRelationFilter
    learning_analytics?: LearningAnalyticsListRelationFilter
    notes?: NoteListRelationFilter
    preferences?: StudentPreferenceListRelationFilter
    classes?: ClassListRelationFilter
  }, "id" | "email">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    grade?: SortOrder
    subject_focus?: SortOrder
    learning_style?: SortOrder
    preferred_content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    name?: StringWithAggregatesFilter<"Student"> | string
    role?: EnumRoleWithAggregatesFilter<"Student"> | $Enums.Role
    email?: StringWithAggregatesFilter<"Student"> | string
    grade?: IntWithAggregatesFilter<"Student"> | number
    subject_focus?: StringWithAggregatesFilter<"Student"> | string
    learning_style?: StringWithAggregatesFilter<"Student"> | string
    preferred_content?: StringWithAggregatesFilter<"Student"> | string
    created_at?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    classId?: StringFilter<"Note"> | string
    studentId?: StringFilter<"Note"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    class?: ClassOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    content?: StringFilter<"Note"> | string
    classId?: StringFilter<"Note"> | string
    studentId?: StringFilter<"Note"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    content?: StringWithAggregatesFilter<"Note"> | string
    classId?: StringWithAggregatesFilter<"Note"> | string
    studentId?: StringWithAggregatesFilter<"Note"> | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    restrictions?: StringNullableFilter<"Class"> | string | null
    teachingStyle?: StringNullableFilter<"Class"> | string | null
    teacherId?: StringNullableFilter<"Class"> | string | null
    otherNotes?: StringNullableFilter<"Class"> | string | null
    studentGrade?: StringNullableFilter<"Class"> | string | null
    subject?: StringNullableFilter<"Class"> | string | null
    customInsights?: StringNullableListFilter<"Class">
    chatSessions?: ChatSessionListRelationFilter
    teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
    insights?: InsightListRelationFilter
    notes?: NoteListRelationFilter
    students?: StudentListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    restrictions?: SortOrderInput | SortOrder
    teachingStyle?: SortOrderInput | SortOrder
    teacherId?: SortOrderInput | SortOrder
    otherNotes?: SortOrderInput | SortOrder
    studentGrade?: SortOrderInput | SortOrder
    subject?: SortOrderInput | SortOrder
    customInsights?: SortOrder
    chatSessions?: ChatSessionOrderByRelationAggregateInput
    teacher?: TeacherOrderByWithRelationInput
    insights?: InsightOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    restrictions?: StringNullableFilter<"Class"> | string | null
    teachingStyle?: StringNullableFilter<"Class"> | string | null
    teacherId?: StringNullableFilter<"Class"> | string | null
    otherNotes?: StringNullableFilter<"Class"> | string | null
    studentGrade?: StringNullableFilter<"Class"> | string | null
    subject?: StringNullableFilter<"Class"> | string | null
    customInsights?: StringNullableListFilter<"Class">
    chatSessions?: ChatSessionListRelationFilter
    teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
    insights?: InsightListRelationFilter
    notes?: NoteListRelationFilter
    students?: StudentListRelationFilter
  }, "id">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    restrictions?: SortOrderInput | SortOrder
    teachingStyle?: SortOrderInput | SortOrder
    teacherId?: SortOrderInput | SortOrder
    otherNotes?: SortOrderInput | SortOrder
    studentGrade?: SortOrderInput | SortOrder
    subject?: SortOrderInput | SortOrder
    customInsights?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
    restrictions?: StringNullableWithAggregatesFilter<"Class"> | string | null
    teachingStyle?: StringNullableWithAggregatesFilter<"Class"> | string | null
    teacherId?: StringNullableWithAggregatesFilter<"Class"> | string | null
    otherNotes?: StringNullableWithAggregatesFilter<"Class"> | string | null
    studentGrade?: StringNullableWithAggregatesFilter<"Class"> | string | null
    subject?: StringNullableWithAggregatesFilter<"Class"> | string | null
    customInsights?: StringNullableListFilter<"Class">
  }

  export type InsightWhereInput = {
    AND?: InsightWhereInput | InsightWhereInput[]
    OR?: InsightWhereInput[]
    NOT?: InsightWhereInput | InsightWhereInput[]
    id?: StringFilter<"Insight"> | string
    title?: StringFilter<"Insight"> | string
    description?: StringFilter<"Insight"> | string
    classId?: StringFilter<"Insight"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }

  export type InsightOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
    class?: ClassOrderByWithRelationInput
  }

  export type InsightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsightWhereInput | InsightWhereInput[]
    OR?: InsightWhereInput[]
    NOT?: InsightWhereInput | InsightWhereInput[]
    title?: StringFilter<"Insight"> | string
    description?: StringFilter<"Insight"> | string
    classId?: StringFilter<"Insight"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }, "id">

  export type InsightOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
    _count?: InsightCountOrderByAggregateInput
    _max?: InsightMaxOrderByAggregateInput
    _min?: InsightMinOrderByAggregateInput
  }

  export type InsightScalarWhereWithAggregatesInput = {
    AND?: InsightScalarWhereWithAggregatesInput | InsightScalarWhereWithAggregatesInput[]
    OR?: InsightScalarWhereWithAggregatesInput[]
    NOT?: InsightScalarWhereWithAggregatesInput | InsightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Insight"> | string
    title?: StringWithAggregatesFilter<"Insight"> | string
    description?: StringWithAggregatesFilter<"Insight"> | string
    classId?: StringWithAggregatesFilter<"Insight"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: StringFilter<"Teacher"> | string
    name?: StringFilter<"Teacher"> | string
    role?: EnumRoleFilter<"Teacher"> | $Enums.Role
    email?: StringFilter<"Teacher"> | string
    subject?: StringFilter<"Teacher"> | string
    created_at?: DateTimeFilter<"Teacher"> | Date | string
    updated_at?: DateTimeFilter<"Teacher"> | Date | string
    supervised_students?: StringNullableListFilter<"Teacher">
    analytics_requests?: AnalyticsRequestListRelationFilter
    classes?: ClassListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    supervised_students?: SortOrder
    analytics_requests?: AnalyticsRequestOrderByRelationAggregateInput
    classes?: ClassOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    name?: StringFilter<"Teacher"> | string
    role?: EnumRoleFilter<"Teacher"> | $Enums.Role
    subject?: StringFilter<"Teacher"> | string
    created_at?: DateTimeFilter<"Teacher"> | Date | string
    updated_at?: DateTimeFilter<"Teacher"> | Date | string
    supervised_students?: StringNullableListFilter<"Teacher">
    analytics_requests?: AnalyticsRequestListRelationFilter
    classes?: ClassListRelationFilter
  }, "id" | "email">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    supervised_students?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teacher"> | string
    name?: StringWithAggregatesFilter<"Teacher"> | string
    role?: EnumRoleWithAggregatesFilter<"Teacher"> | $Enums.Role
    email?: StringWithAggregatesFilter<"Teacher"> | string
    subject?: StringWithAggregatesFilter<"Teacher"> | string
    created_at?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    supervised_students?: StringNullableListFilter<"Teacher">
  }

  export type ChatSessionWhereInput = {
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    student_id?: StringFilter<"ChatSession"> | string
    session_type?: StringFilter<"ChatSession"> | string
    started_at?: DateTimeFilter<"ChatSession"> | Date | string
    ended_at?: DateTimeNullableFilter<"ChatSession"> | Date | string | null
    status?: StringFilter<"ChatSession"> | string
    questions_asked?: IntFilter<"ChatSession"> | number
    concepts_covered?: StringNullableListFilter<"ChatSession">
    difficulty_level?: EnumDifficultyFilter<"ChatSession"> | $Enums.Difficulty
    success_indicators?: JsonNullableFilter<"ChatSession">
    classId?: StringNullableFilter<"ChatSession"> | string | null
    messages?: ChatMessageListRelationFilter
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    takeaways?: SessionTakeawayListRelationFilter
  }

  export type ChatSessionOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    session_type?: SortOrder
    started_at?: SortOrder
    ended_at?: SortOrderInput | SortOrder
    status?: SortOrder
    questions_asked?: SortOrder
    concepts_covered?: SortOrder
    difficulty_level?: SortOrder
    success_indicators?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    messages?: ChatMessageOrderByRelationAggregateInput
    class?: ClassOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    takeaways?: SessionTakeawayOrderByRelationAggregateInput
  }

  export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    student_id?: StringFilter<"ChatSession"> | string
    session_type?: StringFilter<"ChatSession"> | string
    started_at?: DateTimeFilter<"ChatSession"> | Date | string
    ended_at?: DateTimeNullableFilter<"ChatSession"> | Date | string | null
    status?: StringFilter<"ChatSession"> | string
    questions_asked?: IntFilter<"ChatSession"> | number
    concepts_covered?: StringNullableListFilter<"ChatSession">
    difficulty_level?: EnumDifficultyFilter<"ChatSession"> | $Enums.Difficulty
    success_indicators?: JsonNullableFilter<"ChatSession">
    classId?: StringNullableFilter<"ChatSession"> | string | null
    messages?: ChatMessageListRelationFilter
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    takeaways?: SessionTakeawayListRelationFilter
  }, "id">

  export type ChatSessionOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    session_type?: SortOrder
    started_at?: SortOrder
    ended_at?: SortOrderInput | SortOrder
    status?: SortOrder
    questions_asked?: SortOrder
    concepts_covered?: SortOrder
    difficulty_level?: SortOrder
    success_indicators?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: ChatSessionCountOrderByAggregateInput
    _avg?: ChatSessionAvgOrderByAggregateInput
    _max?: ChatSessionMaxOrderByAggregateInput
    _min?: ChatSessionMinOrderByAggregateInput
    _sum?: ChatSessionSumOrderByAggregateInput
  }

  export type ChatSessionScalarWhereWithAggregatesInput = {
    AND?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    OR?: ChatSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatSession"> | string
    student_id?: StringWithAggregatesFilter<"ChatSession"> | string
    session_type?: StringWithAggregatesFilter<"ChatSession"> | string
    started_at?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
    ended_at?: DateTimeNullableWithAggregatesFilter<"ChatSession"> | Date | string | null
    status?: StringWithAggregatesFilter<"ChatSession"> | string
    questions_asked?: IntWithAggregatesFilter<"ChatSession"> | number
    concepts_covered?: StringNullableListFilter<"ChatSession">
    difficulty_level?: EnumDifficultyWithAggregatesFilter<"ChatSession"> | $Enums.Difficulty
    success_indicators?: JsonNullableWithAggregatesFilter<"ChatSession">
    classId?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    session_id?: StringFilter<"ChatMessage"> | string
    sender_type?: StringFilter<"ChatMessage"> | string
    agent_type?: StringNullableFilter<"ChatMessage"> | string | null
    content?: StringFilter<"ChatMessage"> | string
    message_type?: StringFilter<"ChatMessage"> | string
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    processed_by?: StringNullableListFilter<"ChatMessage">
    flagged_content?: BoolFilter<"ChatMessage"> | boolean
    learning_indicators?: JsonNullableFilter<"ChatMessage">
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    session_id?: SortOrder
    sender_type?: SortOrder
    agent_type?: SortOrderInput | SortOrder
    content?: SortOrder
    message_type?: SortOrder
    timestamp?: SortOrder
    processed_by?: SortOrder
    flagged_content?: SortOrder
    learning_indicators?: SortOrderInput | SortOrder
    session?: ChatSessionOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    session_id?: StringFilter<"ChatMessage"> | string
    sender_type?: StringFilter<"ChatMessage"> | string
    agent_type?: StringNullableFilter<"ChatMessage"> | string | null
    content?: StringFilter<"ChatMessage"> | string
    message_type?: StringFilter<"ChatMessage"> | string
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    processed_by?: StringNullableListFilter<"ChatMessage">
    flagged_content?: BoolFilter<"ChatMessage"> | boolean
    learning_indicators?: JsonNullableFilter<"ChatMessage">
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }, "id" | "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    session_id?: SortOrder
    sender_type?: SortOrder
    agent_type?: SortOrderInput | SortOrder
    content?: SortOrder
    message_type?: SortOrder
    timestamp?: SortOrder
    processed_by?: SortOrder
    flagged_content?: SortOrder
    learning_indicators?: SortOrderInput | SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    session_id?: StringWithAggregatesFilter<"ChatMessage"> | string
    sender_type?: StringWithAggregatesFilter<"ChatMessage"> | string
    agent_type?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    message_type?: StringWithAggregatesFilter<"ChatMessage"> | string
    timestamp?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    processed_by?: StringNullableListFilter<"ChatMessage">
    flagged_content?: BoolWithAggregatesFilter<"ChatMessage"> | boolean
    learning_indicators?: JsonNullableWithAggregatesFilter<"ChatMessage">
  }

  export type StudentPreferenceWhereInput = {
    AND?: StudentPreferenceWhereInput | StudentPreferenceWhereInput[]
    OR?: StudentPreferenceWhereInput[]
    NOT?: StudentPreferenceWhereInput | StudentPreferenceWhereInput[]
    id?: StringFilter<"StudentPreference"> | string
    student_id?: StringFilter<"StudentPreference"> | string
    preference_type?: StringFilter<"StudentPreference"> | string
    preference_value?: StringFilter<"StudentPreference"> | string
    confidence_score?: FloatFilter<"StudentPreference"> | number
    last_updated?: DateTimeFilter<"StudentPreference"> | Date | string
    detection_method?: StringFilter<"StudentPreference"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    preference_type?: SortOrder
    preference_value?: SortOrder
    confidence_score?: SortOrder
    last_updated?: SortOrder
    detection_method?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type StudentPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudentPreferenceWhereInput | StudentPreferenceWhereInput[]
    OR?: StudentPreferenceWhereInput[]
    NOT?: StudentPreferenceWhereInput | StudentPreferenceWhereInput[]
    student_id?: StringFilter<"StudentPreference"> | string
    preference_type?: StringFilter<"StudentPreference"> | string
    preference_value?: StringFilter<"StudentPreference"> | string
    confidence_score?: FloatFilter<"StudentPreference"> | number
    last_updated?: DateTimeFilter<"StudentPreference"> | Date | string
    detection_method?: StringFilter<"StudentPreference"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type StudentPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    preference_type?: SortOrder
    preference_value?: SortOrder
    confidence_score?: SortOrder
    last_updated?: SortOrder
    detection_method?: SortOrder
    _count?: StudentPreferenceCountOrderByAggregateInput
    _avg?: StudentPreferenceAvgOrderByAggregateInput
    _max?: StudentPreferenceMaxOrderByAggregateInput
    _min?: StudentPreferenceMinOrderByAggregateInput
    _sum?: StudentPreferenceSumOrderByAggregateInput
  }

  export type StudentPreferenceScalarWhereWithAggregatesInput = {
    AND?: StudentPreferenceScalarWhereWithAggregatesInput | StudentPreferenceScalarWhereWithAggregatesInput[]
    OR?: StudentPreferenceScalarWhereWithAggregatesInput[]
    NOT?: StudentPreferenceScalarWhereWithAggregatesInput | StudentPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudentPreference"> | string
    student_id?: StringWithAggregatesFilter<"StudentPreference"> | string
    preference_type?: StringWithAggregatesFilter<"StudentPreference"> | string
    preference_value?: StringWithAggregatesFilter<"StudentPreference"> | string
    confidence_score?: FloatWithAggregatesFilter<"StudentPreference"> | number
    last_updated?: DateTimeWithAggregatesFilter<"StudentPreference"> | Date | string
    detection_method?: StringWithAggregatesFilter<"StudentPreference"> | string
  }

  export type LearningAnalyticsWhereInput = {
    AND?: LearningAnalyticsWhereInput | LearningAnalyticsWhereInput[]
    OR?: LearningAnalyticsWhereInput[]
    NOT?: LearningAnalyticsWhereInput | LearningAnalyticsWhereInput[]
    id?: StringFilter<"LearningAnalytics"> | string
    student_id?: StringFilter<"LearningAnalytics"> | string
    date?: DateTimeFilter<"LearningAnalytics"> | Date | string
    session_duration?: IntFilter<"LearningAnalytics"> | number
    questions_per_session?: FloatFilter<"LearningAnalytics"> | number
    response_time_avg?: FloatFilter<"LearningAnalytics"> | number
    concepts_mastered?: StringNullableListFilter<"LearningAnalytics">
    difficulty_progression?: StringFilter<"LearningAnalytics"> | string
    success_rate?: FloatFilter<"LearningAnalytics"> | number
    preferred_session_time?: StringNullableFilter<"LearningAnalytics"> | string | null
    interaction_patterns?: JsonNullableFilter<"LearningAnalytics">
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type LearningAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    date?: SortOrder
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    concepts_mastered?: SortOrder
    difficulty_progression?: SortOrder
    success_rate?: SortOrder
    preferred_session_time?: SortOrderInput | SortOrder
    interaction_patterns?: SortOrderInput | SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type LearningAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LearningAnalyticsWhereInput | LearningAnalyticsWhereInput[]
    OR?: LearningAnalyticsWhereInput[]
    NOT?: LearningAnalyticsWhereInput | LearningAnalyticsWhereInput[]
    student_id?: StringFilter<"LearningAnalytics"> | string
    date?: DateTimeFilter<"LearningAnalytics"> | Date | string
    session_duration?: IntFilter<"LearningAnalytics"> | number
    questions_per_session?: FloatFilter<"LearningAnalytics"> | number
    response_time_avg?: FloatFilter<"LearningAnalytics"> | number
    concepts_mastered?: StringNullableListFilter<"LearningAnalytics">
    difficulty_progression?: StringFilter<"LearningAnalytics"> | string
    success_rate?: FloatFilter<"LearningAnalytics"> | number
    preferred_session_time?: StringNullableFilter<"LearningAnalytics"> | string | null
    interaction_patterns?: JsonNullableFilter<"LearningAnalytics">
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type LearningAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    date?: SortOrder
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    concepts_mastered?: SortOrder
    difficulty_progression?: SortOrder
    success_rate?: SortOrder
    preferred_session_time?: SortOrderInput | SortOrder
    interaction_patterns?: SortOrderInput | SortOrder
    _count?: LearningAnalyticsCountOrderByAggregateInput
    _avg?: LearningAnalyticsAvgOrderByAggregateInput
    _max?: LearningAnalyticsMaxOrderByAggregateInput
    _min?: LearningAnalyticsMinOrderByAggregateInput
    _sum?: LearningAnalyticsSumOrderByAggregateInput
  }

  export type LearningAnalyticsScalarWhereWithAggregatesInput = {
    AND?: LearningAnalyticsScalarWhereWithAggregatesInput | LearningAnalyticsScalarWhereWithAggregatesInput[]
    OR?: LearningAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: LearningAnalyticsScalarWhereWithAggregatesInput | LearningAnalyticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningAnalytics"> | string
    student_id?: StringWithAggregatesFilter<"LearningAnalytics"> | string
    date?: DateTimeWithAggregatesFilter<"LearningAnalytics"> | Date | string
    session_duration?: IntWithAggregatesFilter<"LearningAnalytics"> | number
    questions_per_session?: FloatWithAggregatesFilter<"LearningAnalytics"> | number
    response_time_avg?: FloatWithAggregatesFilter<"LearningAnalytics"> | number
    concepts_mastered?: StringNullableListFilter<"LearningAnalytics">
    difficulty_progression?: StringWithAggregatesFilter<"LearningAnalytics"> | string
    success_rate?: FloatWithAggregatesFilter<"LearningAnalytics"> | number
    preferred_session_time?: StringNullableWithAggregatesFilter<"LearningAnalytics"> | string | null
    interaction_patterns?: JsonNullableWithAggregatesFilter<"LearningAnalytics">
  }

  export type FrequentlyAskedQuestionWhereInput = {
    AND?: FrequentlyAskedQuestionWhereInput | FrequentlyAskedQuestionWhereInput[]
    OR?: FrequentlyAskedQuestionWhereInput[]
    NOT?: FrequentlyAskedQuestionWhereInput | FrequentlyAskedQuestionWhereInput[]
    id?: StringFilter<"FrequentlyAskedQuestion"> | string
    question_text?: StringFilter<"FrequentlyAskedQuestion"> | string
    category?: StringFilter<"FrequentlyAskedQuestion"> | string
    frequency_count?: IntFilter<"FrequentlyAskedQuestion"> | number
    first_asked?: DateTimeFilter<"FrequentlyAskedQuestion"> | Date | string
    last_asked?: DateTimeFilter<"FrequentlyAskedQuestion"> | Date | string
    common_answers?: JsonNullableFilter<"FrequentlyAskedQuestion">
    success_rate?: FloatNullableFilter<"FrequentlyAskedQuestion"> | number | null
    similar_questions?: StringNullableListFilter<"FrequentlyAskedQuestion">
    keywords?: StringNullableListFilter<"FrequentlyAskedQuestion">
  }

  export type FrequentlyAskedQuestionOrderByWithRelationInput = {
    id?: SortOrder
    question_text?: SortOrder
    category?: SortOrder
    frequency_count?: SortOrder
    first_asked?: SortOrder
    last_asked?: SortOrder
    common_answers?: SortOrderInput | SortOrder
    success_rate?: SortOrderInput | SortOrder
    similar_questions?: SortOrder
    keywords?: SortOrder
  }

  export type FrequentlyAskedQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FrequentlyAskedQuestionWhereInput | FrequentlyAskedQuestionWhereInput[]
    OR?: FrequentlyAskedQuestionWhereInput[]
    NOT?: FrequentlyAskedQuestionWhereInput | FrequentlyAskedQuestionWhereInput[]
    question_text?: StringFilter<"FrequentlyAskedQuestion"> | string
    category?: StringFilter<"FrequentlyAskedQuestion"> | string
    frequency_count?: IntFilter<"FrequentlyAskedQuestion"> | number
    first_asked?: DateTimeFilter<"FrequentlyAskedQuestion"> | Date | string
    last_asked?: DateTimeFilter<"FrequentlyAskedQuestion"> | Date | string
    common_answers?: JsonNullableFilter<"FrequentlyAskedQuestion">
    success_rate?: FloatNullableFilter<"FrequentlyAskedQuestion"> | number | null
    similar_questions?: StringNullableListFilter<"FrequentlyAskedQuestion">
    keywords?: StringNullableListFilter<"FrequentlyAskedQuestion">
  }, "id">

  export type FrequentlyAskedQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    question_text?: SortOrder
    category?: SortOrder
    frequency_count?: SortOrder
    first_asked?: SortOrder
    last_asked?: SortOrder
    common_answers?: SortOrderInput | SortOrder
    success_rate?: SortOrderInput | SortOrder
    similar_questions?: SortOrder
    keywords?: SortOrder
    _count?: FrequentlyAskedQuestionCountOrderByAggregateInput
    _avg?: FrequentlyAskedQuestionAvgOrderByAggregateInput
    _max?: FrequentlyAskedQuestionMaxOrderByAggregateInput
    _min?: FrequentlyAskedQuestionMinOrderByAggregateInput
    _sum?: FrequentlyAskedQuestionSumOrderByAggregateInput
  }

  export type FrequentlyAskedQuestionScalarWhereWithAggregatesInput = {
    AND?: FrequentlyAskedQuestionScalarWhereWithAggregatesInput | FrequentlyAskedQuestionScalarWhereWithAggregatesInput[]
    OR?: FrequentlyAskedQuestionScalarWhereWithAggregatesInput[]
    NOT?: FrequentlyAskedQuestionScalarWhereWithAggregatesInput | FrequentlyAskedQuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FrequentlyAskedQuestion"> | string
    question_text?: StringWithAggregatesFilter<"FrequentlyAskedQuestion"> | string
    category?: StringWithAggregatesFilter<"FrequentlyAskedQuestion"> | string
    frequency_count?: IntWithAggregatesFilter<"FrequentlyAskedQuestion"> | number
    first_asked?: DateTimeWithAggregatesFilter<"FrequentlyAskedQuestion"> | Date | string
    last_asked?: DateTimeWithAggregatesFilter<"FrequentlyAskedQuestion"> | Date | string
    common_answers?: JsonNullableWithAggregatesFilter<"FrequentlyAskedQuestion">
    success_rate?: FloatNullableWithAggregatesFilter<"FrequentlyAskedQuestion"> | number | null
    similar_questions?: StringNullableListFilter<"FrequentlyAskedQuestion">
    keywords?: StringNullableListFilter<"FrequentlyAskedQuestion">
  }

  export type SessionTakeawayWhereInput = {
    AND?: SessionTakeawayWhereInput | SessionTakeawayWhereInput[]
    OR?: SessionTakeawayWhereInput[]
    NOT?: SessionTakeawayWhereInput | SessionTakeawayWhereInput[]
    id?: StringFilter<"SessionTakeaway"> | string
    session_id?: StringFilter<"SessionTakeaway"> | string
    takeaway_type?: StringFilter<"SessionTakeaway"> | string
    summary?: StringFilter<"SessionTakeaway"> | string
    key_concepts?: StringNullableListFilter<"SessionTakeaway">
    effective_methods?: JsonFilter<"SessionTakeaway">
    created_at?: DateTimeFilter<"SessionTakeaway"> | Date | string
    embedding_vector?: FloatNullableListFilter<"SessionTakeaway">
    relevance_score?: FloatNullableFilter<"SessionTakeaway"> | number | null
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }

  export type SessionTakeawayOrderByWithRelationInput = {
    id?: SortOrder
    session_id?: SortOrder
    takeaway_type?: SortOrder
    summary?: SortOrder
    key_concepts?: SortOrder
    effective_methods?: SortOrder
    created_at?: SortOrder
    embedding_vector?: SortOrder
    relevance_score?: SortOrderInput | SortOrder
    session?: ChatSessionOrderByWithRelationInput
  }

  export type SessionTakeawayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionTakeawayWhereInput | SessionTakeawayWhereInput[]
    OR?: SessionTakeawayWhereInput[]
    NOT?: SessionTakeawayWhereInput | SessionTakeawayWhereInput[]
    session_id?: StringFilter<"SessionTakeaway"> | string
    takeaway_type?: StringFilter<"SessionTakeaway"> | string
    summary?: StringFilter<"SessionTakeaway"> | string
    key_concepts?: StringNullableListFilter<"SessionTakeaway">
    effective_methods?: JsonFilter<"SessionTakeaway">
    created_at?: DateTimeFilter<"SessionTakeaway"> | Date | string
    embedding_vector?: FloatNullableListFilter<"SessionTakeaway">
    relevance_score?: FloatNullableFilter<"SessionTakeaway"> | number | null
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }, "id">

  export type SessionTakeawayOrderByWithAggregationInput = {
    id?: SortOrder
    session_id?: SortOrder
    takeaway_type?: SortOrder
    summary?: SortOrder
    key_concepts?: SortOrder
    effective_methods?: SortOrder
    created_at?: SortOrder
    embedding_vector?: SortOrder
    relevance_score?: SortOrderInput | SortOrder
    _count?: SessionTakeawayCountOrderByAggregateInput
    _avg?: SessionTakeawayAvgOrderByAggregateInput
    _max?: SessionTakeawayMaxOrderByAggregateInput
    _min?: SessionTakeawayMinOrderByAggregateInput
    _sum?: SessionTakeawaySumOrderByAggregateInput
  }

  export type SessionTakeawayScalarWhereWithAggregatesInput = {
    AND?: SessionTakeawayScalarWhereWithAggregatesInput | SessionTakeawayScalarWhereWithAggregatesInput[]
    OR?: SessionTakeawayScalarWhereWithAggregatesInput[]
    NOT?: SessionTakeawayScalarWhereWithAggregatesInput | SessionTakeawayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionTakeaway"> | string
    session_id?: StringWithAggregatesFilter<"SessionTakeaway"> | string
    takeaway_type?: StringWithAggregatesFilter<"SessionTakeaway"> | string
    summary?: StringWithAggregatesFilter<"SessionTakeaway"> | string
    key_concepts?: StringNullableListFilter<"SessionTakeaway">
    effective_methods?: JsonWithAggregatesFilter<"SessionTakeaway">
    created_at?: DateTimeWithAggregatesFilter<"SessionTakeaway"> | Date | string
    embedding_vector?: FloatNullableListFilter<"SessionTakeaway">
    relevance_score?: FloatNullableWithAggregatesFilter<"SessionTakeaway"> | number | null
  }

  export type AnalyticsRequestWhereInput = {
    AND?: AnalyticsRequestWhereInput | AnalyticsRequestWhereInput[]
    OR?: AnalyticsRequestWhereInput[]
    NOT?: AnalyticsRequestWhereInput | AnalyticsRequestWhereInput[]
    id?: StringFilter<"AnalyticsRequest"> | string
    teacher_id?: StringFilter<"AnalyticsRequest"> | string
    request_type?: StringFilter<"AnalyticsRequest"> | string
    parameters?: JsonFilter<"AnalyticsRequest">
    status?: StringFilter<"AnalyticsRequest"> | string
    results?: JsonNullableFilter<"AnalyticsRequest">
    created_at?: DateTimeFilter<"AnalyticsRequest"> | Date | string
    completed_at?: DateTimeNullableFilter<"AnalyticsRequest"> | Date | string | null
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }

  export type AnalyticsRequestOrderByWithRelationInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    request_type?: SortOrder
    parameters?: SortOrder
    status?: SortOrder
    results?: SortOrderInput | SortOrder
    created_at?: SortOrder
    completed_at?: SortOrderInput | SortOrder
    teacher?: TeacherOrderByWithRelationInput
  }

  export type AnalyticsRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnalyticsRequestWhereInput | AnalyticsRequestWhereInput[]
    OR?: AnalyticsRequestWhereInput[]
    NOT?: AnalyticsRequestWhereInput | AnalyticsRequestWhereInput[]
    teacher_id?: StringFilter<"AnalyticsRequest"> | string
    request_type?: StringFilter<"AnalyticsRequest"> | string
    parameters?: JsonFilter<"AnalyticsRequest">
    status?: StringFilter<"AnalyticsRequest"> | string
    results?: JsonNullableFilter<"AnalyticsRequest">
    created_at?: DateTimeFilter<"AnalyticsRequest"> | Date | string
    completed_at?: DateTimeNullableFilter<"AnalyticsRequest"> | Date | string | null
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }, "id">

  export type AnalyticsRequestOrderByWithAggregationInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    request_type?: SortOrder
    parameters?: SortOrder
    status?: SortOrder
    results?: SortOrderInput | SortOrder
    created_at?: SortOrder
    completed_at?: SortOrderInput | SortOrder
    _count?: AnalyticsRequestCountOrderByAggregateInput
    _max?: AnalyticsRequestMaxOrderByAggregateInput
    _min?: AnalyticsRequestMinOrderByAggregateInput
  }

  export type AnalyticsRequestScalarWhereWithAggregatesInput = {
    AND?: AnalyticsRequestScalarWhereWithAggregatesInput | AnalyticsRequestScalarWhereWithAggregatesInput[]
    OR?: AnalyticsRequestScalarWhereWithAggregatesInput[]
    NOT?: AnalyticsRequestScalarWhereWithAggregatesInput | AnalyticsRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnalyticsRequest"> | string
    teacher_id?: StringWithAggregatesFilter<"AnalyticsRequest"> | string
    request_type?: StringWithAggregatesFilter<"AnalyticsRequest"> | string
    parameters?: JsonWithAggregatesFilter<"AnalyticsRequest">
    status?: StringWithAggregatesFilter<"AnalyticsRequest"> | string
    results?: JsonNullableWithAggregatesFilter<"AnalyticsRequest">
    created_at?: DateTimeWithAggregatesFilter<"AnalyticsRequest"> | Date | string
    completed_at?: DateTimeNullableWithAggregatesFilter<"AnalyticsRequest"> | Date | string | null
  }

  export type AgentInteractionWhereInput = {
    AND?: AgentInteractionWhereInput | AgentInteractionWhereInput[]
    OR?: AgentInteractionWhereInput[]
    NOT?: AgentInteractionWhereInput | AgentInteractionWhereInput[]
    id?: StringFilter<"AgentInteraction"> | string
    session_id?: StringNullableFilter<"AgentInteraction"> | string | null
    agent_type?: StringFilter<"AgentInteraction"> | string
    interaction_type?: StringFilter<"AgentInteraction"> | string
    input_data?: JsonFilter<"AgentInteraction">
    output_data?: JsonFilter<"AgentInteraction">
    processing_time?: FloatFilter<"AgentInteraction"> | number
    timestamp?: DateTimeFilter<"AgentInteraction"> | Date | string
    success?: BoolFilter<"AgentInteraction"> | boolean
    error_message?: StringNullableFilter<"AgentInteraction"> | string | null
  }

  export type AgentInteractionOrderByWithRelationInput = {
    id?: SortOrder
    session_id?: SortOrderInput | SortOrder
    agent_type?: SortOrder
    interaction_type?: SortOrder
    input_data?: SortOrder
    output_data?: SortOrder
    processing_time?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    error_message?: SortOrderInput | SortOrder
  }

  export type AgentInteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgentInteractionWhereInput | AgentInteractionWhereInput[]
    OR?: AgentInteractionWhereInput[]
    NOT?: AgentInteractionWhereInput | AgentInteractionWhereInput[]
    session_id?: StringNullableFilter<"AgentInteraction"> | string | null
    agent_type?: StringFilter<"AgentInteraction"> | string
    interaction_type?: StringFilter<"AgentInteraction"> | string
    input_data?: JsonFilter<"AgentInteraction">
    output_data?: JsonFilter<"AgentInteraction">
    processing_time?: FloatFilter<"AgentInteraction"> | number
    timestamp?: DateTimeFilter<"AgentInteraction"> | Date | string
    success?: BoolFilter<"AgentInteraction"> | boolean
    error_message?: StringNullableFilter<"AgentInteraction"> | string | null
  }, "id">

  export type AgentInteractionOrderByWithAggregationInput = {
    id?: SortOrder
    session_id?: SortOrderInput | SortOrder
    agent_type?: SortOrder
    interaction_type?: SortOrder
    input_data?: SortOrder
    output_data?: SortOrder
    processing_time?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    error_message?: SortOrderInput | SortOrder
    _count?: AgentInteractionCountOrderByAggregateInput
    _avg?: AgentInteractionAvgOrderByAggregateInput
    _max?: AgentInteractionMaxOrderByAggregateInput
    _min?: AgentInteractionMinOrderByAggregateInput
    _sum?: AgentInteractionSumOrderByAggregateInput
  }

  export type AgentInteractionScalarWhereWithAggregatesInput = {
    AND?: AgentInteractionScalarWhereWithAggregatesInput | AgentInteractionScalarWhereWithAggregatesInput[]
    OR?: AgentInteractionScalarWhereWithAggregatesInput[]
    NOT?: AgentInteractionScalarWhereWithAggregatesInput | AgentInteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgentInteraction"> | string
    session_id?: StringNullableWithAggregatesFilter<"AgentInteraction"> | string | null
    agent_type?: StringWithAggregatesFilter<"AgentInteraction"> | string
    interaction_type?: StringWithAggregatesFilter<"AgentInteraction"> | string
    input_data?: JsonWithAggregatesFilter<"AgentInteraction">
    output_data?: JsonWithAggregatesFilter<"AgentInteraction">
    processing_time?: FloatWithAggregatesFilter<"AgentInteraction"> | number
    timestamp?: DateTimeWithAggregatesFilter<"AgentInteraction"> | Date | string
    success?: BoolWithAggregatesFilter<"AgentInteraction"> | boolean
    error_message?: StringNullableWithAggregatesFilter<"AgentInteraction"> | string | null
  }

  export type SummaryWhereInput = {
    AND?: SummaryWhereInput | SummaryWhereInput[]
    OR?: SummaryWhereInput[]
    NOT?: SummaryWhereInput | SummaryWhereInput[]
    id?: StringFilter<"Summary"> | string
    summary?: StringNullableFilter<"Summary"> | string | null
  }

  export type SummaryOrderByWithRelationInput = {
    id?: SortOrder
    summary?: SortOrderInput | SortOrder
  }

  export type SummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SummaryWhereInput | SummaryWhereInput[]
    OR?: SummaryWhereInput[]
    NOT?: SummaryWhereInput | SummaryWhereInput[]
    summary?: StringNullableFilter<"Summary"> | string | null
  }, "id">

  export type SummaryOrderByWithAggregationInput = {
    id?: SortOrder
    summary?: SortOrderInput | SortOrder
    _count?: SummaryCountOrderByAggregateInput
    _max?: SummaryMaxOrderByAggregateInput
    _min?: SummaryMinOrderByAggregateInput
  }

  export type SummaryScalarWhereWithAggregatesInput = {
    AND?: SummaryScalarWhereWithAggregatesInput | SummaryScalarWhereWithAggregatesInput[]
    OR?: SummaryScalarWhereWithAggregatesInput[]
    NOT?: SummaryScalarWhereWithAggregatesInput | SummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Summary"> | string
    summary?: StringNullableWithAggregatesFilter<"Summary"> | string | null
  }

  export type StudentCreateInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsCreateNestedManyWithoutStudentInput
    notes?: NoteCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceCreateNestedManyWithoutStudentInput
    classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionUncheckedCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsUncheckedCreateNestedManyWithoutStudentInput
    notes?: NoteUncheckedCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUpdateManyWithoutStudentNestedInput
    notes?: NoteUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUpdateManyWithoutStudentNestedInput
    classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUncheckedUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUncheckedUpdateManyWithoutStudentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type StudentCreateManyInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteCreateInput = {
    id?: string
    content: string
    class: ClassCreateNestedOneWithoutNotesInput
    student: StudentCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    content: string
    classId: string
    studentId: string
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutNotesNestedInput
    student?: StudentUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateManyInput = {
    id?: string
    content: string
    classId: string
    studentId: string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionCreateNestedManyWithoutClassInput
    teacher?: TeacherCreateNestedOneWithoutClassesInput
    insights?: InsightCreateNestedManyWithoutClassInput
    notes?: NoteCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassesInput
  }

  export type ClassUncheckedCreateInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    teacherId?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutClassInput
    insights?: InsightUncheckedCreateNestedManyWithoutClassInput
    notes?: NoteUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassesInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUpdateManyWithoutClassNestedInput
    teacher?: TeacherUpdateOneWithoutClassesNestedInput
    insights?: InsightUpdateManyWithoutClassNestedInput
    notes?: NoteUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutClassNestedInput
    insights?: InsightUncheckedUpdateManyWithoutClassNestedInput
    notes?: NoteUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassesNestedInput
  }

  export type ClassCreateManyInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    teacherId?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
  }

  export type InsightCreateInput = {
    id?: string
    title: string
    description: string
    class: ClassCreateNestedOneWithoutInsightsInput
  }

  export type InsightUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    classId: string
  }

  export type InsightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutInsightsNestedInput
  }

  export type InsightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type InsightCreateManyInput = {
    id?: string
    title: string
    description: string
    classId: string
  }

  export type InsightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InsightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestCreateNestedManyWithoutTeacherInput
    classes?: ClassCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestUncheckedCreateNestedManyWithoutTeacherInput
    classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestUpdateManyWithoutTeacherNestedInput
    classes?: ClassUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestUncheckedUpdateManyWithoutTeacherNestedInput
    classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
  }

  export type ChatSessionCreateInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
    class?: ClassCreateNestedOneWithoutChatSessionsInput
    student: StudentCreateNestedOneWithoutChat_sessionsInput
    takeaways?: SessionTakeawayCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateInput = {
    id?: string
    student_id: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: string | null
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    takeaways?: SessionTakeawayUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
    class?: ClassUpdateOneWithoutChatSessionsNestedInput
    student?: StudentUpdateOneRequiredWithoutChat_sessionsNestedInput
    takeaways?: SessionTakeawayUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    takeaways?: SessionTakeawayUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionCreateManyInput = {
    id?: string
    student_id: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: string | null
  }

  export type ChatSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatMessageCreateInput = {
    id?: string
    sender_type: string
    agent_type?: string | null
    content: string
    message_type?: string
    timestamp?: Date | string
    processed_by?: ChatMessageCreateprocessed_byInput | string[]
    flagged_content?: boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
    session: ChatSessionCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    session_id: string
    sender_type: string
    agent_type?: string | null
    content: string
    message_type?: string
    timestamp?: Date | string
    processed_by?: ChatMessageCreateprocessed_byInput | string[]
    flagged_content?: boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
    session?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    session_id: string
    sender_type: string
    agent_type?: string | null
    content: string
    message_type?: string
    timestamp?: Date | string
    processed_by?: ChatMessageCreateprocessed_byInput | string[]
    flagged_content?: boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StudentPreferenceCreateInput = {
    id?: string
    preference_type: string
    preference_value: string
    confidence_score?: number
    last_updated?: Date | string
    detection_method: string
    student: StudentCreateNestedOneWithoutPreferencesInput
  }

  export type StudentPreferenceUncheckedCreateInput = {
    id?: string
    student_id: string
    preference_type: string
    preference_value: string
    confidence_score?: number
    last_updated?: Date | string
    detection_method: string
  }

  export type StudentPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type StudentPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
  }

  export type StudentPreferenceCreateManyInput = {
    id?: string
    student_id: string
    preference_type: string
    preference_value: string
    confidence_score?: number
    last_updated?: Date | string
    detection_method: string
  }

  export type StudentPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
  }

  export type StudentPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
  }

  export type LearningAnalyticsCreateInput = {
    id?: string
    date?: Date | string
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered?: LearningAnalyticsCreateconcepts_masteredInput | string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time?: string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
    student: StudentCreateNestedOneWithoutLearning_analyticsInput
  }

  export type LearningAnalyticsUncheckedCreateInput = {
    id?: string
    student_id: string
    date?: Date | string
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered?: LearningAnalyticsCreateconcepts_masteredInput | string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time?: string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
    student?: StudentUpdateOneRequiredWithoutLearning_analyticsNestedInput
  }

  export type LearningAnalyticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsCreateManyInput = {
    id?: string
    student_id: string
    date?: Date | string
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered?: LearningAnalyticsCreateconcepts_masteredInput | string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time?: string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FrequentlyAskedQuestionCreateInput = {
    id?: string
    question_text: string
    category: string
    frequency_count?: number
    first_asked?: Date | string
    last_asked?: Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: number | null
    similar_questions?: FrequentlyAskedQuestionCreatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionCreatekeywordsInput | string[]
  }

  export type FrequentlyAskedQuestionUncheckedCreateInput = {
    id?: string
    question_text: string
    category: string
    frequency_count?: number
    first_asked?: Date | string
    last_asked?: Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: number | null
    similar_questions?: FrequentlyAskedQuestionCreatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionCreatekeywordsInput | string[]
  }

  export type FrequentlyAskedQuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    frequency_count?: IntFieldUpdateOperationsInput | number
    first_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    last_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: NullableFloatFieldUpdateOperationsInput | number | null
    similar_questions?: FrequentlyAskedQuestionUpdatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionUpdatekeywordsInput | string[]
  }

  export type FrequentlyAskedQuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    frequency_count?: IntFieldUpdateOperationsInput | number
    first_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    last_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: NullableFloatFieldUpdateOperationsInput | number | null
    similar_questions?: FrequentlyAskedQuestionUpdatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionUpdatekeywordsInput | string[]
  }

  export type FrequentlyAskedQuestionCreateManyInput = {
    id?: string
    question_text: string
    category: string
    frequency_count?: number
    first_asked?: Date | string
    last_asked?: Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: number | null
    similar_questions?: FrequentlyAskedQuestionCreatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionCreatekeywordsInput | string[]
  }

  export type FrequentlyAskedQuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    frequency_count?: IntFieldUpdateOperationsInput | number
    first_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    last_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: NullableFloatFieldUpdateOperationsInput | number | null
    similar_questions?: FrequentlyAskedQuestionUpdatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionUpdatekeywordsInput | string[]
  }

  export type FrequentlyAskedQuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    frequency_count?: IntFieldUpdateOperationsInput | number
    first_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    last_asked?: DateTimeFieldUpdateOperationsInput | Date | string
    common_answers?: NullableJsonNullValueInput | InputJsonValue
    success_rate?: NullableFloatFieldUpdateOperationsInput | number | null
    similar_questions?: FrequentlyAskedQuestionUpdatesimilar_questionsInput | string[]
    keywords?: FrequentlyAskedQuestionUpdatekeywordsInput | string[]
  }

  export type SessionTakeawayCreateInput = {
    id?: string
    takeaway_type: string
    summary: string
    key_concepts?: SessionTakeawayCreatekey_conceptsInput | string[]
    effective_methods: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    embedding_vector?: SessionTakeawayCreateembedding_vectorInput | number[]
    relevance_score?: number | null
    session: ChatSessionCreateNestedOneWithoutTakeawaysInput
  }

  export type SessionTakeawayUncheckedCreateInput = {
    id?: string
    session_id: string
    takeaway_type: string
    summary: string
    key_concepts?: SessionTakeawayCreatekey_conceptsInput | string[]
    effective_methods: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    embedding_vector?: SessionTakeawayCreateembedding_vectorInput | number[]
    relevance_score?: number | null
  }

  export type SessionTakeawayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
    session?: ChatSessionUpdateOneRequiredWithoutTakeawaysNestedInput
  }

  export type SessionTakeawayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionTakeawayCreateManyInput = {
    id?: string
    session_id: string
    takeaway_type: string
    summary: string
    key_concepts?: SessionTakeawayCreatekey_conceptsInput | string[]
    effective_methods: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    embedding_vector?: SessionTakeawayCreateembedding_vectorInput | number[]
    relevance_score?: number | null
  }

  export type SessionTakeawayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionTakeawayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type AnalyticsRequestCreateInput = {
    id?: string
    request_type: string
    parameters: JsonNullValueInput | InputJsonValue
    status?: string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    completed_at?: Date | string | null
    teacher: TeacherCreateNestedOneWithoutAnalytics_requestsInput
  }

  export type AnalyticsRequestUncheckedCreateInput = {
    id?: string
    teacher_id: string
    request_type: string
    parameters: JsonNullValueInput | InputJsonValue
    status?: string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    completed_at?: Date | string | null
  }

  export type AnalyticsRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacher?: TeacherUpdateOneRequiredWithoutAnalytics_requestsNestedInput
  }

  export type AnalyticsRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher_id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnalyticsRequestCreateManyInput = {
    id?: string
    teacher_id: string
    request_type: string
    parameters: JsonNullValueInput | InputJsonValue
    status?: string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    completed_at?: Date | string | null
  }

  export type AnalyticsRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnalyticsRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher_id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentInteractionCreateInput = {
    id?: string
    session_id?: string | null
    agent_type: string
    interaction_type: string
    input_data: JsonNullValueInput | InputJsonValue
    output_data: JsonNullValueInput | InputJsonValue
    processing_time: number
    timestamp?: Date | string
    success?: boolean
    error_message?: string | null
  }

  export type AgentInteractionUncheckedCreateInput = {
    id?: string
    session_id?: string | null
    agent_type: string
    interaction_type: string
    input_data: JsonNullValueInput | InputJsonValue
    output_data: JsonNullValueInput | InputJsonValue
    processing_time: number
    timestamp?: Date | string
    success?: boolean
    error_message?: string | null
  }

  export type AgentInteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: NullableStringFieldUpdateOperationsInput | string | null
    agent_type?: StringFieldUpdateOperationsInput | string
    interaction_type?: StringFieldUpdateOperationsInput | string
    input_data?: JsonNullValueInput | InputJsonValue
    output_data?: JsonNullValueInput | InputJsonValue
    processing_time?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentInteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: NullableStringFieldUpdateOperationsInput | string | null
    agent_type?: StringFieldUpdateOperationsInput | string
    interaction_type?: StringFieldUpdateOperationsInput | string
    input_data?: JsonNullValueInput | InputJsonValue
    output_data?: JsonNullValueInput | InputJsonValue
    processing_time?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentInteractionCreateManyInput = {
    id?: string
    session_id?: string | null
    agent_type: string
    interaction_type: string
    input_data: JsonNullValueInput | InputJsonValue
    output_data: JsonNullValueInput | InputJsonValue
    processing_time: number
    timestamp?: Date | string
    success?: boolean
    error_message?: string | null
  }

  export type AgentInteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: NullableStringFieldUpdateOperationsInput | string | null
    agent_type?: StringFieldUpdateOperationsInput | string
    interaction_type?: StringFieldUpdateOperationsInput | string
    input_data?: JsonNullValueInput | InputJsonValue
    output_data?: JsonNullValueInput | InputJsonValue
    processing_time?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentInteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: NullableStringFieldUpdateOperationsInput | string | null
    agent_type?: StringFieldUpdateOperationsInput | string
    interaction_type?: StringFieldUpdateOperationsInput | string
    input_data?: JsonNullValueInput | InputJsonValue
    output_data?: JsonNullValueInput | InputJsonValue
    processing_time?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SummaryCreateInput = {
    id?: string
    summary?: string | null
  }

  export type SummaryUncheckedCreateInput = {
    id?: string
    summary?: string | null
  }

  export type SummaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SummaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SummaryCreateManyInput = {
    id?: string
    summary?: string | null
  }

  export type SummaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SummaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ChatSessionListRelationFilter = {
    every?: ChatSessionWhereInput
    some?: ChatSessionWhereInput
    none?: ChatSessionWhereInput
  }

  export type LearningAnalyticsListRelationFilter = {
    every?: LearningAnalyticsWhereInput
    some?: LearningAnalyticsWhereInput
    none?: LearningAnalyticsWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type StudentPreferenceListRelationFilter = {
    every?: StudentPreferenceWhereInput
    some?: StudentPreferenceWhereInput
    none?: StudentPreferenceWhereInput
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type ChatSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LearningAnalyticsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    grade?: SortOrder
    subject_focus?: SortOrder
    learning_style?: SortOrder
    preferred_content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    grade?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    grade?: SortOrder
    subject_focus?: SortOrder
    learning_style?: SortOrder
    preferred_content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    grade?: SortOrder
    subject_focus?: SortOrder
    learning_style?: SortOrder
    preferred_content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    grade?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TeacherNullableScalarRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type InsightListRelationFilter = {
    every?: InsightWhereInput
    some?: InsightWhereInput
    none?: InsightWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InsightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    restrictions?: SortOrder
    teachingStyle?: SortOrder
    teacherId?: SortOrder
    otherNotes?: SortOrder
    studentGrade?: SortOrder
    subject?: SortOrder
    customInsights?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    restrictions?: SortOrder
    teachingStyle?: SortOrder
    teacherId?: SortOrder
    otherNotes?: SortOrder
    studentGrade?: SortOrder
    subject?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    restrictions?: SortOrder
    teachingStyle?: SortOrder
    teacherId?: SortOrder
    otherNotes?: SortOrder
    studentGrade?: SortOrder
    subject?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type InsightCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
  }

  export type InsightMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
  }

  export type InsightMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
  }

  export type AnalyticsRequestListRelationFilter = {
    every?: AnalyticsRequestWhereInput
    some?: AnalyticsRequestWhereInput
    none?: AnalyticsRequestWhereInput
  }

  export type AnalyticsRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    supervised_students?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type SessionTakeawayListRelationFilter = {
    every?: SessionTakeawayWhereInput
    some?: SessionTakeawayWhereInput
    none?: SessionTakeawayWhereInput
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionTakeawayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    session_type?: SortOrder
    started_at?: SortOrder
    ended_at?: SortOrder
    status?: SortOrder
    questions_asked?: SortOrder
    concepts_covered?: SortOrder
    difficulty_level?: SortOrder
    success_indicators?: SortOrder
    classId?: SortOrder
  }

  export type ChatSessionAvgOrderByAggregateInput = {
    questions_asked?: SortOrder
  }

  export type ChatSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    session_type?: SortOrder
    started_at?: SortOrder
    ended_at?: SortOrder
    status?: SortOrder
    questions_asked?: SortOrder
    difficulty_level?: SortOrder
    classId?: SortOrder
  }

  export type ChatSessionMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    session_type?: SortOrder
    started_at?: SortOrder
    ended_at?: SortOrder
    status?: SortOrder
    questions_asked?: SortOrder
    difficulty_level?: SortOrder
    classId?: SortOrder
  }

  export type ChatSessionSumOrderByAggregateInput = {
    questions_asked?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ChatSessionScalarRelationFilter = {
    is?: ChatSessionWhereInput
    isNot?: ChatSessionWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    sender_type?: SortOrder
    agent_type?: SortOrder
    content?: SortOrder
    message_type?: SortOrder
    timestamp?: SortOrder
    processed_by?: SortOrder
    flagged_content?: SortOrder
    learning_indicators?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    sender_type?: SortOrder
    agent_type?: SortOrder
    content?: SortOrder
    message_type?: SortOrder
    timestamp?: SortOrder
    flagged_content?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    sender_type?: SortOrder
    agent_type?: SortOrder
    content?: SortOrder
    message_type?: SortOrder
    timestamp?: SortOrder
    flagged_content?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StudentPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    preference_type?: SortOrder
    preference_value?: SortOrder
    confidence_score?: SortOrder
    last_updated?: SortOrder
    detection_method?: SortOrder
  }

  export type StudentPreferenceAvgOrderByAggregateInput = {
    confidence_score?: SortOrder
  }

  export type StudentPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    preference_type?: SortOrder
    preference_value?: SortOrder
    confidence_score?: SortOrder
    last_updated?: SortOrder
    detection_method?: SortOrder
  }

  export type StudentPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    preference_type?: SortOrder
    preference_value?: SortOrder
    confidence_score?: SortOrder
    last_updated?: SortOrder
    detection_method?: SortOrder
  }

  export type StudentPreferenceSumOrderByAggregateInput = {
    confidence_score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LearningAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    date?: SortOrder
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    concepts_mastered?: SortOrder
    difficulty_progression?: SortOrder
    success_rate?: SortOrder
    preferred_session_time?: SortOrder
    interaction_patterns?: SortOrder
  }

  export type LearningAnalyticsAvgOrderByAggregateInput = {
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    success_rate?: SortOrder
  }

  export type LearningAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    date?: SortOrder
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    difficulty_progression?: SortOrder
    success_rate?: SortOrder
    preferred_session_time?: SortOrder
  }

  export type LearningAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    date?: SortOrder
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    difficulty_progression?: SortOrder
    success_rate?: SortOrder
    preferred_session_time?: SortOrder
  }

  export type LearningAnalyticsSumOrderByAggregateInput = {
    session_duration?: SortOrder
    questions_per_session?: SortOrder
    response_time_avg?: SortOrder
    success_rate?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FrequentlyAskedQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    question_text?: SortOrder
    category?: SortOrder
    frequency_count?: SortOrder
    first_asked?: SortOrder
    last_asked?: SortOrder
    common_answers?: SortOrder
    success_rate?: SortOrder
    similar_questions?: SortOrder
    keywords?: SortOrder
  }

  export type FrequentlyAskedQuestionAvgOrderByAggregateInput = {
    frequency_count?: SortOrder
    success_rate?: SortOrder
  }

  export type FrequentlyAskedQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    question_text?: SortOrder
    category?: SortOrder
    frequency_count?: SortOrder
    first_asked?: SortOrder
    last_asked?: SortOrder
    success_rate?: SortOrder
  }

  export type FrequentlyAskedQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    question_text?: SortOrder
    category?: SortOrder
    frequency_count?: SortOrder
    first_asked?: SortOrder
    last_asked?: SortOrder
    success_rate?: SortOrder
  }

  export type FrequentlyAskedQuestionSumOrderByAggregateInput = {
    frequency_count?: SortOrder
    success_rate?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    has?: number | FloatFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListFloatFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListFloatFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type SessionTakeawayCountOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    takeaway_type?: SortOrder
    summary?: SortOrder
    key_concepts?: SortOrder
    effective_methods?: SortOrder
    created_at?: SortOrder
    embedding_vector?: SortOrder
    relevance_score?: SortOrder
  }

  export type SessionTakeawayAvgOrderByAggregateInput = {
    embedding_vector?: SortOrder
    relevance_score?: SortOrder
  }

  export type SessionTakeawayMaxOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    takeaway_type?: SortOrder
    summary?: SortOrder
    created_at?: SortOrder
    relevance_score?: SortOrder
  }

  export type SessionTakeawayMinOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    takeaway_type?: SortOrder
    summary?: SortOrder
    created_at?: SortOrder
    relevance_score?: SortOrder
  }

  export type SessionTakeawaySumOrderByAggregateInput = {
    embedding_vector?: SortOrder
    relevance_score?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type TeacherScalarRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type AnalyticsRequestCountOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    request_type?: SortOrder
    parameters?: SortOrder
    status?: SortOrder
    results?: SortOrder
    created_at?: SortOrder
    completed_at?: SortOrder
  }

  export type AnalyticsRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    request_type?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    completed_at?: SortOrder
  }

  export type AnalyticsRequestMinOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    request_type?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    completed_at?: SortOrder
  }

  export type AgentInteractionCountOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    agent_type?: SortOrder
    interaction_type?: SortOrder
    input_data?: SortOrder
    output_data?: SortOrder
    processing_time?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    error_message?: SortOrder
  }

  export type AgentInteractionAvgOrderByAggregateInput = {
    processing_time?: SortOrder
  }

  export type AgentInteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    agent_type?: SortOrder
    interaction_type?: SortOrder
    processing_time?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    error_message?: SortOrder
  }

  export type AgentInteractionMinOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    agent_type?: SortOrder
    interaction_type?: SortOrder
    processing_time?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    error_message?: SortOrder
  }

  export type AgentInteractionSumOrderByAggregateInput = {
    processing_time?: SortOrder
  }

  export type SummaryCountOrderByAggregateInput = {
    id?: SortOrder
    summary?: SortOrder
  }

  export type SummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    summary?: SortOrder
  }

  export type SummaryMinOrderByAggregateInput = {
    id?: SortOrder
    summary?: SortOrder
  }

  export type ChatSessionCreateNestedManyWithoutStudentInput = {
    create?: XOR<ChatSessionCreateWithoutStudentInput, ChatSessionUncheckedCreateWithoutStudentInput> | ChatSessionCreateWithoutStudentInput[] | ChatSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutStudentInput | ChatSessionCreateOrConnectWithoutStudentInput[]
    createMany?: ChatSessionCreateManyStudentInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type LearningAnalyticsCreateNestedManyWithoutStudentInput = {
    create?: XOR<LearningAnalyticsCreateWithoutStudentInput, LearningAnalyticsUncheckedCreateWithoutStudentInput> | LearningAnalyticsCreateWithoutStudentInput[] | LearningAnalyticsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LearningAnalyticsCreateOrConnectWithoutStudentInput | LearningAnalyticsCreateOrConnectWithoutStudentInput[]
    createMany?: LearningAnalyticsCreateManyStudentInputEnvelope
    connect?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutStudentInput = {
    create?: XOR<NoteCreateWithoutStudentInput, NoteUncheckedCreateWithoutStudentInput> | NoteCreateWithoutStudentInput[] | NoteUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutStudentInput | NoteCreateOrConnectWithoutStudentInput[]
    createMany?: NoteCreateManyStudentInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StudentPreferenceCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPreferenceCreateWithoutStudentInput, StudentPreferenceUncheckedCreateWithoutStudentInput> | StudentPreferenceCreateWithoutStudentInput[] | StudentPreferenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPreferenceCreateOrConnectWithoutStudentInput | StudentPreferenceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPreferenceCreateManyStudentInputEnvelope
    connect?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type ChatSessionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ChatSessionCreateWithoutStudentInput, ChatSessionUncheckedCreateWithoutStudentInput> | ChatSessionCreateWithoutStudentInput[] | ChatSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutStudentInput | ChatSessionCreateOrConnectWithoutStudentInput[]
    createMany?: ChatSessionCreateManyStudentInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type LearningAnalyticsUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<LearningAnalyticsCreateWithoutStudentInput, LearningAnalyticsUncheckedCreateWithoutStudentInput> | LearningAnalyticsCreateWithoutStudentInput[] | LearningAnalyticsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LearningAnalyticsCreateOrConnectWithoutStudentInput | LearningAnalyticsCreateOrConnectWithoutStudentInput[]
    createMany?: LearningAnalyticsCreateManyStudentInputEnvelope
    connect?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<NoteCreateWithoutStudentInput, NoteUncheckedCreateWithoutStudentInput> | NoteCreateWithoutStudentInput[] | NoteUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutStudentInput | NoteCreateOrConnectWithoutStudentInput[]
    createMany?: NoteCreateManyStudentInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StudentPreferenceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPreferenceCreateWithoutStudentInput, StudentPreferenceUncheckedCreateWithoutStudentInput> | StudentPreferenceCreateWithoutStudentInput[] | StudentPreferenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPreferenceCreateOrConnectWithoutStudentInput | StudentPreferenceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPreferenceCreateManyStudentInputEnvelope
    connect?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ChatSessionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ChatSessionCreateWithoutStudentInput, ChatSessionUncheckedCreateWithoutStudentInput> | ChatSessionCreateWithoutStudentInput[] | ChatSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutStudentInput | ChatSessionCreateOrConnectWithoutStudentInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutStudentInput | ChatSessionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ChatSessionCreateManyStudentInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutStudentInput | ChatSessionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutStudentInput | ChatSessionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type LearningAnalyticsUpdateManyWithoutStudentNestedInput = {
    create?: XOR<LearningAnalyticsCreateWithoutStudentInput, LearningAnalyticsUncheckedCreateWithoutStudentInput> | LearningAnalyticsCreateWithoutStudentInput[] | LearningAnalyticsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LearningAnalyticsCreateOrConnectWithoutStudentInput | LearningAnalyticsCreateOrConnectWithoutStudentInput[]
    upsert?: LearningAnalyticsUpsertWithWhereUniqueWithoutStudentInput | LearningAnalyticsUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: LearningAnalyticsCreateManyStudentInputEnvelope
    set?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    disconnect?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    delete?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    connect?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    update?: LearningAnalyticsUpdateWithWhereUniqueWithoutStudentInput | LearningAnalyticsUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: LearningAnalyticsUpdateManyWithWhereWithoutStudentInput | LearningAnalyticsUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: LearningAnalyticsScalarWhereInput | LearningAnalyticsScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutStudentNestedInput = {
    create?: XOR<NoteCreateWithoutStudentInput, NoteUncheckedCreateWithoutStudentInput> | NoteCreateWithoutStudentInput[] | NoteUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutStudentInput | NoteCreateOrConnectWithoutStudentInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutStudentInput | NoteUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: NoteCreateManyStudentInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutStudentInput | NoteUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutStudentInput | NoteUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StudentPreferenceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPreferenceCreateWithoutStudentInput, StudentPreferenceUncheckedCreateWithoutStudentInput> | StudentPreferenceCreateWithoutStudentInput[] | StudentPreferenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPreferenceCreateOrConnectWithoutStudentInput | StudentPreferenceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPreferenceUpsertWithWhereUniqueWithoutStudentInput | StudentPreferenceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPreferenceCreateManyStudentInputEnvelope
    set?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    disconnect?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    delete?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    connect?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    update?: StudentPreferenceUpdateWithWhereUniqueWithoutStudentInput | StudentPreferenceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPreferenceUpdateManyWithWhereWithoutStudentInput | StudentPreferenceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPreferenceScalarWhereInput | StudentPreferenceScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutStudentsInput | ClassUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutStudentsInput | ClassUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutStudentsInput | ClassUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ChatSessionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ChatSessionCreateWithoutStudentInput, ChatSessionUncheckedCreateWithoutStudentInput> | ChatSessionCreateWithoutStudentInput[] | ChatSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutStudentInput | ChatSessionCreateOrConnectWithoutStudentInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutStudentInput | ChatSessionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ChatSessionCreateManyStudentInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutStudentInput | ChatSessionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutStudentInput | ChatSessionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type LearningAnalyticsUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<LearningAnalyticsCreateWithoutStudentInput, LearningAnalyticsUncheckedCreateWithoutStudentInput> | LearningAnalyticsCreateWithoutStudentInput[] | LearningAnalyticsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LearningAnalyticsCreateOrConnectWithoutStudentInput | LearningAnalyticsCreateOrConnectWithoutStudentInput[]
    upsert?: LearningAnalyticsUpsertWithWhereUniqueWithoutStudentInput | LearningAnalyticsUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: LearningAnalyticsCreateManyStudentInputEnvelope
    set?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    disconnect?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    delete?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    connect?: LearningAnalyticsWhereUniqueInput | LearningAnalyticsWhereUniqueInput[]
    update?: LearningAnalyticsUpdateWithWhereUniqueWithoutStudentInput | LearningAnalyticsUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: LearningAnalyticsUpdateManyWithWhereWithoutStudentInput | LearningAnalyticsUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: LearningAnalyticsScalarWhereInput | LearningAnalyticsScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<NoteCreateWithoutStudentInput, NoteUncheckedCreateWithoutStudentInput> | NoteCreateWithoutStudentInput[] | NoteUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutStudentInput | NoteCreateOrConnectWithoutStudentInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutStudentInput | NoteUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: NoteCreateManyStudentInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutStudentInput | NoteUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutStudentInput | NoteUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StudentPreferenceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPreferenceCreateWithoutStudentInput, StudentPreferenceUncheckedCreateWithoutStudentInput> | StudentPreferenceCreateWithoutStudentInput[] | StudentPreferenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPreferenceCreateOrConnectWithoutStudentInput | StudentPreferenceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPreferenceUpsertWithWhereUniqueWithoutStudentInput | StudentPreferenceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPreferenceCreateManyStudentInputEnvelope
    set?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    disconnect?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    delete?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    connect?: StudentPreferenceWhereUniqueInput | StudentPreferenceWhereUniqueInput[]
    update?: StudentPreferenceUpdateWithWhereUniqueWithoutStudentInput | StudentPreferenceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPreferenceUpdateManyWithWhereWithoutStudentInput | StudentPreferenceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPreferenceScalarWhereInput | StudentPreferenceScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutStudentsInput | ClassUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutStudentsInput | ClassUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutStudentsInput | ClassUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutNotesInput = {
    create?: XOR<ClassCreateWithoutNotesInput, ClassUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutNotesInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutNotesInput = {
    create?: XOR<StudentCreateWithoutNotesInput, StudentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutNotesInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<ClassCreateWithoutNotesInput, ClassUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutNotesInput
    upsert?: ClassUpsertWithoutNotesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutNotesInput, ClassUpdateWithoutNotesInput>, ClassUncheckedUpdateWithoutNotesInput>
  }

  export type StudentUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<StudentCreateWithoutNotesInput, StudentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutNotesInput
    upsert?: StudentUpsertWithoutNotesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutNotesInput, StudentUpdateWithoutNotesInput>, StudentUncheckedUpdateWithoutNotesInput>
  }

  export type ClassCreatecustomInsightsInput = {
    set: string[]
  }

  export type ChatSessionCreateNestedManyWithoutClassInput = {
    create?: XOR<ChatSessionCreateWithoutClassInput, ChatSessionUncheckedCreateWithoutClassInput> | ChatSessionCreateWithoutClassInput[] | ChatSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutClassInput | ChatSessionCreateOrConnectWithoutClassInput[]
    createMany?: ChatSessionCreateManyClassInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type TeacherCreateNestedOneWithoutClassesInput = {
    create?: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassesInput
    connect?: TeacherWhereUniqueInput
  }

  export type InsightCreateNestedManyWithoutClassInput = {
    create?: XOR<InsightCreateWithoutClassInput, InsightUncheckedCreateWithoutClassInput> | InsightCreateWithoutClassInput[] | InsightUncheckedCreateWithoutClassInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutClassInput | InsightCreateOrConnectWithoutClassInput[]
    createMany?: InsightCreateManyClassInputEnvelope
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutClassInput = {
    create?: XOR<NoteCreateWithoutClassInput, NoteUncheckedCreateWithoutClassInput> | NoteCreateWithoutClassInput[] | NoteUncheckedCreateWithoutClassInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutClassInput | NoteCreateOrConnectWithoutClassInput[]
    createMany?: NoteCreateManyClassInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutClassesInput = {
    create?: XOR<StudentCreateWithoutClassesInput, StudentUncheckedCreateWithoutClassesInput> | StudentCreateWithoutClassesInput[] | StudentUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassesInput | StudentCreateOrConnectWithoutClassesInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ChatSessionUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ChatSessionCreateWithoutClassInput, ChatSessionUncheckedCreateWithoutClassInput> | ChatSessionCreateWithoutClassInput[] | ChatSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutClassInput | ChatSessionCreateOrConnectWithoutClassInput[]
    createMany?: ChatSessionCreateManyClassInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type InsightUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<InsightCreateWithoutClassInput, InsightUncheckedCreateWithoutClassInput> | InsightCreateWithoutClassInput[] | InsightUncheckedCreateWithoutClassInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutClassInput | InsightCreateOrConnectWithoutClassInput[]
    createMany?: InsightCreateManyClassInputEnvelope
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<NoteCreateWithoutClassInput, NoteUncheckedCreateWithoutClassInput> | NoteCreateWithoutClassInput[] | NoteUncheckedCreateWithoutClassInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutClassInput | NoteCreateOrConnectWithoutClassInput[]
    createMany?: NoteCreateManyClassInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassesInput = {
    create?: XOR<StudentCreateWithoutClassesInput, StudentUncheckedCreateWithoutClassesInput> | StudentCreateWithoutClassesInput[] | StudentUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassesInput | StudentCreateOrConnectWithoutClassesInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClassUpdatecustomInsightsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ChatSessionUpdateManyWithoutClassNestedInput = {
    create?: XOR<ChatSessionCreateWithoutClassInput, ChatSessionUncheckedCreateWithoutClassInput> | ChatSessionCreateWithoutClassInput[] | ChatSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutClassInput | ChatSessionCreateOrConnectWithoutClassInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutClassInput | ChatSessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ChatSessionCreateManyClassInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutClassInput | ChatSessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutClassInput | ChatSessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type TeacherUpdateOneWithoutClassesNestedInput = {
    create?: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassesInput
    upsert?: TeacherUpsertWithoutClassesInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutClassesInput, TeacherUpdateWithoutClassesInput>, TeacherUncheckedUpdateWithoutClassesInput>
  }

  export type InsightUpdateManyWithoutClassNestedInput = {
    create?: XOR<InsightCreateWithoutClassInput, InsightUncheckedCreateWithoutClassInput> | InsightCreateWithoutClassInput[] | InsightUncheckedCreateWithoutClassInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutClassInput | InsightCreateOrConnectWithoutClassInput[]
    upsert?: InsightUpsertWithWhereUniqueWithoutClassInput | InsightUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: InsightCreateManyClassInputEnvelope
    set?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    disconnect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    delete?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    update?: InsightUpdateWithWhereUniqueWithoutClassInput | InsightUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: InsightUpdateManyWithWhereWithoutClassInput | InsightUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: InsightScalarWhereInput | InsightScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutClassNestedInput = {
    create?: XOR<NoteCreateWithoutClassInput, NoteUncheckedCreateWithoutClassInput> | NoteCreateWithoutClassInput[] | NoteUncheckedCreateWithoutClassInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutClassInput | NoteCreateOrConnectWithoutClassInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutClassInput | NoteUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: NoteCreateManyClassInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutClassInput | NoteUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutClassInput | NoteUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutClassesNestedInput = {
    create?: XOR<StudentCreateWithoutClassesInput, StudentUncheckedCreateWithoutClassesInput> | StudentCreateWithoutClassesInput[] | StudentUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassesInput | StudentCreateOrConnectWithoutClassesInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassesInput | StudentUpsertWithWhereUniqueWithoutClassesInput[]
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassesInput | StudentUpdateWithWhereUniqueWithoutClassesInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassesInput | StudentUpdateManyWithWhereWithoutClassesInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ChatSessionUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ChatSessionCreateWithoutClassInput, ChatSessionUncheckedCreateWithoutClassInput> | ChatSessionCreateWithoutClassInput[] | ChatSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutClassInput | ChatSessionCreateOrConnectWithoutClassInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutClassInput | ChatSessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ChatSessionCreateManyClassInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutClassInput | ChatSessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutClassInput | ChatSessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type InsightUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<InsightCreateWithoutClassInput, InsightUncheckedCreateWithoutClassInput> | InsightCreateWithoutClassInput[] | InsightUncheckedCreateWithoutClassInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutClassInput | InsightCreateOrConnectWithoutClassInput[]
    upsert?: InsightUpsertWithWhereUniqueWithoutClassInput | InsightUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: InsightCreateManyClassInputEnvelope
    set?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    disconnect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    delete?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    update?: InsightUpdateWithWhereUniqueWithoutClassInput | InsightUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: InsightUpdateManyWithWhereWithoutClassInput | InsightUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: InsightScalarWhereInput | InsightScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<NoteCreateWithoutClassInput, NoteUncheckedCreateWithoutClassInput> | NoteCreateWithoutClassInput[] | NoteUncheckedCreateWithoutClassInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutClassInput | NoteCreateOrConnectWithoutClassInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutClassInput | NoteUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: NoteCreateManyClassInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutClassInput | NoteUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutClassInput | NoteUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassesNestedInput = {
    create?: XOR<StudentCreateWithoutClassesInput, StudentUncheckedCreateWithoutClassesInput> | StudentCreateWithoutClassesInput[] | StudentUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassesInput | StudentCreateOrConnectWithoutClassesInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassesInput | StudentUpsertWithWhereUniqueWithoutClassesInput[]
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassesInput | StudentUpdateWithWhereUniqueWithoutClassesInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassesInput | StudentUpdateManyWithWhereWithoutClassesInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutInsightsInput = {
    create?: XOR<ClassCreateWithoutInsightsInput, ClassUncheckedCreateWithoutInsightsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutInsightsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutInsightsNestedInput = {
    create?: XOR<ClassCreateWithoutInsightsInput, ClassUncheckedCreateWithoutInsightsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutInsightsInput
    upsert?: ClassUpsertWithoutInsightsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutInsightsInput, ClassUpdateWithoutInsightsInput>, ClassUncheckedUpdateWithoutInsightsInput>
  }

  export type TeacherCreatesupervised_studentsInput = {
    set: string[]
  }

  export type AnalyticsRequestCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AnalyticsRequestCreateWithoutTeacherInput, AnalyticsRequestUncheckedCreateWithoutTeacherInput> | AnalyticsRequestCreateWithoutTeacherInput[] | AnalyticsRequestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnalyticsRequestCreateOrConnectWithoutTeacherInput | AnalyticsRequestCreateOrConnectWithoutTeacherInput[]
    createMany?: AnalyticsRequestCreateManyTeacherInputEnvelope
    connect?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutTeacherInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type AnalyticsRequestUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AnalyticsRequestCreateWithoutTeacherInput, AnalyticsRequestUncheckedCreateWithoutTeacherInput> | AnalyticsRequestCreateWithoutTeacherInput[] | AnalyticsRequestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnalyticsRequestCreateOrConnectWithoutTeacherInput | AnalyticsRequestCreateOrConnectWithoutTeacherInput[]
    createMany?: AnalyticsRequestCreateManyTeacherInputEnvelope
    connect?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type TeacherUpdatesupervised_studentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AnalyticsRequestUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AnalyticsRequestCreateWithoutTeacherInput, AnalyticsRequestUncheckedCreateWithoutTeacherInput> | AnalyticsRequestCreateWithoutTeacherInput[] | AnalyticsRequestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnalyticsRequestCreateOrConnectWithoutTeacherInput | AnalyticsRequestCreateOrConnectWithoutTeacherInput[]
    upsert?: AnalyticsRequestUpsertWithWhereUniqueWithoutTeacherInput | AnalyticsRequestUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AnalyticsRequestCreateManyTeacherInputEnvelope
    set?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    disconnect?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    delete?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    connect?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    update?: AnalyticsRequestUpdateWithWhereUniqueWithoutTeacherInput | AnalyticsRequestUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AnalyticsRequestUpdateManyWithWhereWithoutTeacherInput | AnalyticsRequestUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AnalyticsRequestScalarWhereInput | AnalyticsRequestScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTeacherInput | ClassUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTeacherInput | ClassUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTeacherInput | ClassUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AnalyticsRequestUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AnalyticsRequestCreateWithoutTeacherInput, AnalyticsRequestUncheckedCreateWithoutTeacherInput> | AnalyticsRequestCreateWithoutTeacherInput[] | AnalyticsRequestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnalyticsRequestCreateOrConnectWithoutTeacherInput | AnalyticsRequestCreateOrConnectWithoutTeacherInput[]
    upsert?: AnalyticsRequestUpsertWithWhereUniqueWithoutTeacherInput | AnalyticsRequestUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AnalyticsRequestCreateManyTeacherInputEnvelope
    set?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    disconnect?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    delete?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    connect?: AnalyticsRequestWhereUniqueInput | AnalyticsRequestWhereUniqueInput[]
    update?: AnalyticsRequestUpdateWithWhereUniqueWithoutTeacherInput | AnalyticsRequestUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AnalyticsRequestUpdateManyWithWhereWithoutTeacherInput | AnalyticsRequestUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AnalyticsRequestScalarWhereInput | AnalyticsRequestScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTeacherInput | ClassUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTeacherInput | ClassUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTeacherInput | ClassUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ChatSessionCreateconcepts_coveredInput = {
    set: string[]
  }

  export type ChatMessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ClassCreateNestedOneWithoutChatSessionsInput = {
    create?: XOR<ClassCreateWithoutChatSessionsInput, ClassUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutChatSessionsInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutChat_sessionsInput = {
    create?: XOR<StudentCreateWithoutChat_sessionsInput, StudentUncheckedCreateWithoutChat_sessionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutChat_sessionsInput
    connect?: StudentWhereUniqueInput
  }

  export type SessionTakeawayCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionTakeawayCreateWithoutSessionInput, SessionTakeawayUncheckedCreateWithoutSessionInput> | SessionTakeawayCreateWithoutSessionInput[] | SessionTakeawayUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionTakeawayCreateOrConnectWithoutSessionInput | SessionTakeawayCreateOrConnectWithoutSessionInput[]
    createMany?: SessionTakeawayCreateManySessionInputEnvelope
    connect?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type SessionTakeawayUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionTakeawayCreateWithoutSessionInput, SessionTakeawayUncheckedCreateWithoutSessionInput> | SessionTakeawayCreateWithoutSessionInput[] | SessionTakeawayUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionTakeawayCreateOrConnectWithoutSessionInput | SessionTakeawayCreateOrConnectWithoutSessionInput[]
    createMany?: SessionTakeawayCreateManySessionInputEnvelope
    connect?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ChatSessionUpdateconcepts_coveredInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type ChatMessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ClassUpdateOneWithoutChatSessionsNestedInput = {
    create?: XOR<ClassCreateWithoutChatSessionsInput, ClassUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutChatSessionsInput
    upsert?: ClassUpsertWithoutChatSessionsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutChatSessionsInput, ClassUpdateWithoutChatSessionsInput>, ClassUncheckedUpdateWithoutChatSessionsInput>
  }

  export type StudentUpdateOneRequiredWithoutChat_sessionsNestedInput = {
    create?: XOR<StudentCreateWithoutChat_sessionsInput, StudentUncheckedCreateWithoutChat_sessionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutChat_sessionsInput
    upsert?: StudentUpsertWithoutChat_sessionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutChat_sessionsInput, StudentUpdateWithoutChat_sessionsInput>, StudentUncheckedUpdateWithoutChat_sessionsInput>
  }

  export type SessionTakeawayUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionTakeawayCreateWithoutSessionInput, SessionTakeawayUncheckedCreateWithoutSessionInput> | SessionTakeawayCreateWithoutSessionInput[] | SessionTakeawayUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionTakeawayCreateOrConnectWithoutSessionInput | SessionTakeawayCreateOrConnectWithoutSessionInput[]
    upsert?: SessionTakeawayUpsertWithWhereUniqueWithoutSessionInput | SessionTakeawayUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionTakeawayCreateManySessionInputEnvelope
    set?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    disconnect?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    delete?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    connect?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    update?: SessionTakeawayUpdateWithWhereUniqueWithoutSessionInput | SessionTakeawayUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionTakeawayUpdateManyWithWhereWithoutSessionInput | SessionTakeawayUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionTakeawayScalarWhereInput | SessionTakeawayScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type SessionTakeawayUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionTakeawayCreateWithoutSessionInput, SessionTakeawayUncheckedCreateWithoutSessionInput> | SessionTakeawayCreateWithoutSessionInput[] | SessionTakeawayUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionTakeawayCreateOrConnectWithoutSessionInput | SessionTakeawayCreateOrConnectWithoutSessionInput[]
    upsert?: SessionTakeawayUpsertWithWhereUniqueWithoutSessionInput | SessionTakeawayUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionTakeawayCreateManySessionInputEnvelope
    set?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    disconnect?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    delete?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    connect?: SessionTakeawayWhereUniqueInput | SessionTakeawayWhereUniqueInput[]
    update?: SessionTakeawayUpdateWithWhereUniqueWithoutSessionInput | SessionTakeawayUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionTakeawayUpdateManyWithWhereWithoutSessionInput | SessionTakeawayUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionTakeawayScalarWhereInput | SessionTakeawayScalarWhereInput[]
  }

  export type ChatMessageCreateprocessed_byInput = {
    set: string[]
  }

  export type ChatSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type ChatMessageUpdateprocessed_byInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    upsert?: ChatSessionUpsertWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutMessagesInput, ChatSessionUpdateWithoutMessagesInput>, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type StudentCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<StudentCreateWithoutPreferencesInput, StudentUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPreferencesInput
    connect?: StudentWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<StudentCreateWithoutPreferencesInput, StudentUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPreferencesInput
    upsert?: StudentUpsertWithoutPreferencesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutPreferencesInput, StudentUpdateWithoutPreferencesInput>, StudentUncheckedUpdateWithoutPreferencesInput>
  }

  export type LearningAnalyticsCreateconcepts_masteredInput = {
    set: string[]
  }

  export type StudentCreateNestedOneWithoutLearning_analyticsInput = {
    create?: XOR<StudentCreateWithoutLearning_analyticsInput, StudentUncheckedCreateWithoutLearning_analyticsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutLearning_analyticsInput
    connect?: StudentWhereUniqueInput
  }

  export type LearningAnalyticsUpdateconcepts_masteredInput = {
    set?: string[]
    push?: string | string[]
  }

  export type StudentUpdateOneRequiredWithoutLearning_analyticsNestedInput = {
    create?: XOR<StudentCreateWithoutLearning_analyticsInput, StudentUncheckedCreateWithoutLearning_analyticsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutLearning_analyticsInput
    upsert?: StudentUpsertWithoutLearning_analyticsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutLearning_analyticsInput, StudentUpdateWithoutLearning_analyticsInput>, StudentUncheckedUpdateWithoutLearning_analyticsInput>
  }

  export type FrequentlyAskedQuestionCreatesimilar_questionsInput = {
    set: string[]
  }

  export type FrequentlyAskedQuestionCreatekeywordsInput = {
    set: string[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FrequentlyAskedQuestionUpdatesimilar_questionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FrequentlyAskedQuestionUpdatekeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionTakeawayCreatekey_conceptsInput = {
    set: string[]
  }

  export type SessionTakeawayCreateembedding_vectorInput = {
    set: number[]
  }

  export type ChatSessionCreateNestedOneWithoutTakeawaysInput = {
    create?: XOR<ChatSessionCreateWithoutTakeawaysInput, ChatSessionUncheckedCreateWithoutTakeawaysInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutTakeawaysInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type SessionTakeawayUpdatekey_conceptsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionTakeawayUpdateembedding_vectorInput = {
    set?: number[]
    push?: number | number[]
  }

  export type ChatSessionUpdateOneRequiredWithoutTakeawaysNestedInput = {
    create?: XOR<ChatSessionCreateWithoutTakeawaysInput, ChatSessionUncheckedCreateWithoutTakeawaysInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutTakeawaysInput
    upsert?: ChatSessionUpsertWithoutTakeawaysInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutTakeawaysInput, ChatSessionUpdateWithoutTakeawaysInput>, ChatSessionUncheckedUpdateWithoutTakeawaysInput>
  }

  export type TeacherCreateNestedOneWithoutAnalytics_requestsInput = {
    create?: XOR<TeacherCreateWithoutAnalytics_requestsInput, TeacherUncheckedCreateWithoutAnalytics_requestsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAnalytics_requestsInput
    connect?: TeacherWhereUniqueInput
  }

  export type TeacherUpdateOneRequiredWithoutAnalytics_requestsNestedInput = {
    create?: XOR<TeacherCreateWithoutAnalytics_requestsInput, TeacherUncheckedCreateWithoutAnalytics_requestsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAnalytics_requestsInput
    upsert?: TeacherUpsertWithoutAnalytics_requestsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutAnalytics_requestsInput, TeacherUpdateWithoutAnalytics_requestsInput>, TeacherUncheckedUpdateWithoutAnalytics_requestsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ChatSessionCreateWithoutStudentInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
    class?: ClassCreateNestedOneWithoutChatSessionsInput
    takeaways?: SessionTakeawayCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateWithoutStudentInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: string | null
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    takeaways?: SessionTakeawayUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutStudentInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutStudentInput, ChatSessionUncheckedCreateWithoutStudentInput>
  }

  export type ChatSessionCreateManyStudentInputEnvelope = {
    data: ChatSessionCreateManyStudentInput | ChatSessionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type LearningAnalyticsCreateWithoutStudentInput = {
    id?: string
    date?: Date | string
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered?: LearningAnalyticsCreateconcepts_masteredInput | string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time?: string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsUncheckedCreateWithoutStudentInput = {
    id?: string
    date?: Date | string
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered?: LearningAnalyticsCreateconcepts_masteredInput | string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time?: string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsCreateOrConnectWithoutStudentInput = {
    where: LearningAnalyticsWhereUniqueInput
    create: XOR<LearningAnalyticsCreateWithoutStudentInput, LearningAnalyticsUncheckedCreateWithoutStudentInput>
  }

  export type LearningAnalyticsCreateManyStudentInputEnvelope = {
    data: LearningAnalyticsCreateManyStudentInput | LearningAnalyticsCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutStudentInput = {
    id?: string
    content: string
    class: ClassCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutStudentInput = {
    id?: string
    content: string
    classId: string
  }

  export type NoteCreateOrConnectWithoutStudentInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutStudentInput, NoteUncheckedCreateWithoutStudentInput>
  }

  export type NoteCreateManyStudentInputEnvelope = {
    data: NoteCreateManyStudentInput | NoteCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentPreferenceCreateWithoutStudentInput = {
    id?: string
    preference_type: string
    preference_value: string
    confidence_score?: number
    last_updated?: Date | string
    detection_method: string
  }

  export type StudentPreferenceUncheckedCreateWithoutStudentInput = {
    id?: string
    preference_type: string
    preference_value: string
    confidence_score?: number
    last_updated?: Date | string
    detection_method: string
  }

  export type StudentPreferenceCreateOrConnectWithoutStudentInput = {
    where: StudentPreferenceWhereUniqueInput
    create: XOR<StudentPreferenceCreateWithoutStudentInput, StudentPreferenceUncheckedCreateWithoutStudentInput>
  }

  export type StudentPreferenceCreateManyStudentInputEnvelope = {
    data: StudentPreferenceCreateManyStudentInput | StudentPreferenceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutStudentsInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionCreateNestedManyWithoutClassInput
    teacher?: TeacherCreateNestedOneWithoutClassesInput
    insights?: InsightCreateNestedManyWithoutClassInput
    notes?: NoteCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    teacherId?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutClassInput
    insights?: InsightUncheckedCreateNestedManyWithoutClassInput
    notes?: NoteUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type ChatSessionUpsertWithWhereUniqueWithoutStudentInput = {
    where: ChatSessionWhereUniqueInput
    update: XOR<ChatSessionUpdateWithoutStudentInput, ChatSessionUncheckedUpdateWithoutStudentInput>
    create: XOR<ChatSessionCreateWithoutStudentInput, ChatSessionUncheckedCreateWithoutStudentInput>
  }

  export type ChatSessionUpdateWithWhereUniqueWithoutStudentInput = {
    where: ChatSessionWhereUniqueInput
    data: XOR<ChatSessionUpdateWithoutStudentInput, ChatSessionUncheckedUpdateWithoutStudentInput>
  }

  export type ChatSessionUpdateManyWithWhereWithoutStudentInput = {
    where: ChatSessionScalarWhereInput
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyWithoutStudentInput>
  }

  export type ChatSessionScalarWhereInput = {
    AND?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
    OR?: ChatSessionScalarWhereInput[]
    NOT?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    student_id?: StringFilter<"ChatSession"> | string
    session_type?: StringFilter<"ChatSession"> | string
    started_at?: DateTimeFilter<"ChatSession"> | Date | string
    ended_at?: DateTimeNullableFilter<"ChatSession"> | Date | string | null
    status?: StringFilter<"ChatSession"> | string
    questions_asked?: IntFilter<"ChatSession"> | number
    concepts_covered?: StringNullableListFilter<"ChatSession">
    difficulty_level?: EnumDifficultyFilter<"ChatSession"> | $Enums.Difficulty
    success_indicators?: JsonNullableFilter<"ChatSession">
    classId?: StringNullableFilter<"ChatSession"> | string | null
  }

  export type LearningAnalyticsUpsertWithWhereUniqueWithoutStudentInput = {
    where: LearningAnalyticsWhereUniqueInput
    update: XOR<LearningAnalyticsUpdateWithoutStudentInput, LearningAnalyticsUncheckedUpdateWithoutStudentInput>
    create: XOR<LearningAnalyticsCreateWithoutStudentInput, LearningAnalyticsUncheckedCreateWithoutStudentInput>
  }

  export type LearningAnalyticsUpdateWithWhereUniqueWithoutStudentInput = {
    where: LearningAnalyticsWhereUniqueInput
    data: XOR<LearningAnalyticsUpdateWithoutStudentInput, LearningAnalyticsUncheckedUpdateWithoutStudentInput>
  }

  export type LearningAnalyticsUpdateManyWithWhereWithoutStudentInput = {
    where: LearningAnalyticsScalarWhereInput
    data: XOR<LearningAnalyticsUpdateManyMutationInput, LearningAnalyticsUncheckedUpdateManyWithoutStudentInput>
  }

  export type LearningAnalyticsScalarWhereInput = {
    AND?: LearningAnalyticsScalarWhereInput | LearningAnalyticsScalarWhereInput[]
    OR?: LearningAnalyticsScalarWhereInput[]
    NOT?: LearningAnalyticsScalarWhereInput | LearningAnalyticsScalarWhereInput[]
    id?: StringFilter<"LearningAnalytics"> | string
    student_id?: StringFilter<"LearningAnalytics"> | string
    date?: DateTimeFilter<"LearningAnalytics"> | Date | string
    session_duration?: IntFilter<"LearningAnalytics"> | number
    questions_per_session?: FloatFilter<"LearningAnalytics"> | number
    response_time_avg?: FloatFilter<"LearningAnalytics"> | number
    concepts_mastered?: StringNullableListFilter<"LearningAnalytics">
    difficulty_progression?: StringFilter<"LearningAnalytics"> | string
    success_rate?: FloatFilter<"LearningAnalytics"> | number
    preferred_session_time?: StringNullableFilter<"LearningAnalytics"> | string | null
    interaction_patterns?: JsonNullableFilter<"LearningAnalytics">
  }

  export type NoteUpsertWithWhereUniqueWithoutStudentInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutStudentInput, NoteUncheckedUpdateWithoutStudentInput>
    create: XOR<NoteCreateWithoutStudentInput, NoteUncheckedCreateWithoutStudentInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutStudentInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutStudentInput, NoteUncheckedUpdateWithoutStudentInput>
  }

  export type NoteUpdateManyWithWhereWithoutStudentInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutStudentInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    classId?: StringFilter<"Note"> | string
    studentId?: StringFilter<"Note"> | string
  }

  export type StudentPreferenceUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentPreferenceWhereUniqueInput
    update: XOR<StudentPreferenceUpdateWithoutStudentInput, StudentPreferenceUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentPreferenceCreateWithoutStudentInput, StudentPreferenceUncheckedCreateWithoutStudentInput>
  }

  export type StudentPreferenceUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentPreferenceWhereUniqueInput
    data: XOR<StudentPreferenceUpdateWithoutStudentInput, StudentPreferenceUncheckedUpdateWithoutStudentInput>
  }

  export type StudentPreferenceUpdateManyWithWhereWithoutStudentInput = {
    where: StudentPreferenceScalarWhereInput
    data: XOR<StudentPreferenceUpdateManyMutationInput, StudentPreferenceUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentPreferenceScalarWhereInput = {
    AND?: StudentPreferenceScalarWhereInput | StudentPreferenceScalarWhereInput[]
    OR?: StudentPreferenceScalarWhereInput[]
    NOT?: StudentPreferenceScalarWhereInput | StudentPreferenceScalarWhereInput[]
    id?: StringFilter<"StudentPreference"> | string
    student_id?: StringFilter<"StudentPreference"> | string
    preference_type?: StringFilter<"StudentPreference"> | string
    preference_value?: StringFilter<"StudentPreference"> | string
    confidence_score?: FloatFilter<"StudentPreference"> | number
    last_updated?: DateTimeFilter<"StudentPreference"> | Date | string
    detection_method?: StringFilter<"StudentPreference"> | string
  }

  export type ClassUpsertWithWhereUniqueWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateManyWithWhereWithoutStudentsInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutStudentsInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    restrictions?: StringNullableFilter<"Class"> | string | null
    teachingStyle?: StringNullableFilter<"Class"> | string | null
    teacherId?: StringNullableFilter<"Class"> | string | null
    otherNotes?: StringNullableFilter<"Class"> | string | null
    studentGrade?: StringNullableFilter<"Class"> | string | null
    subject?: StringNullableFilter<"Class"> | string | null
    customInsights?: StringNullableListFilter<"Class">
  }

  export type ClassCreateWithoutNotesInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionCreateNestedManyWithoutClassInput
    teacher?: TeacherCreateNestedOneWithoutClassesInput
    insights?: InsightCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutNotesInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    teacherId?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutClassInput
    insights?: InsightUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassesInput
  }

  export type ClassCreateOrConnectWithoutNotesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutNotesInput, ClassUncheckedCreateWithoutNotesInput>
  }

  export type StudentCreateWithoutNotesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceCreateNestedManyWithoutStudentInput
    classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutNotesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionUncheckedCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsUncheckedCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutNotesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutNotesInput, StudentUncheckedCreateWithoutNotesInput>
  }

  export type ClassUpsertWithoutNotesInput = {
    update: XOR<ClassUpdateWithoutNotesInput, ClassUncheckedUpdateWithoutNotesInput>
    create: XOR<ClassCreateWithoutNotesInput, ClassUncheckedCreateWithoutNotesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutNotesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutNotesInput, ClassUncheckedUpdateWithoutNotesInput>
  }

  export type ClassUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUpdateManyWithoutClassNestedInput
    teacher?: TeacherUpdateOneWithoutClassesNestedInput
    insights?: InsightUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutClassNestedInput
    insights?: InsightUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassesNestedInput
  }

  export type StudentUpsertWithoutNotesInput = {
    update: XOR<StudentUpdateWithoutNotesInput, StudentUncheckedUpdateWithoutNotesInput>
    create: XOR<StudentCreateWithoutNotesInput, StudentUncheckedCreateWithoutNotesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutNotesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutNotesInput, StudentUncheckedUpdateWithoutNotesInput>
  }

  export type StudentUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUpdateManyWithoutStudentNestedInput
    classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUncheckedUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUncheckedUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type ChatSessionCreateWithoutClassInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
    student: StudentCreateNestedOneWithoutChat_sessionsInput
    takeaways?: SessionTakeawayCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateWithoutClassInput = {
    id?: string
    student_id: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    takeaways?: SessionTakeawayUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutClassInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutClassInput, ChatSessionUncheckedCreateWithoutClassInput>
  }

  export type ChatSessionCreateManyClassInputEnvelope = {
    data: ChatSessionCreateManyClassInput | ChatSessionCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutClassesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutClassesInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
  }

  export type InsightCreateWithoutClassInput = {
    id?: string
    title: string
    description: string
  }

  export type InsightUncheckedCreateWithoutClassInput = {
    id?: string
    title: string
    description: string
  }

  export type InsightCreateOrConnectWithoutClassInput = {
    where: InsightWhereUniqueInput
    create: XOR<InsightCreateWithoutClassInput, InsightUncheckedCreateWithoutClassInput>
  }

  export type InsightCreateManyClassInputEnvelope = {
    data: InsightCreateManyClassInput | InsightCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutClassInput = {
    id?: string
    content: string
    student: StudentCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutClassInput = {
    id?: string
    content: string
    studentId: string
  }

  export type NoteCreateOrConnectWithoutClassInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutClassInput, NoteUncheckedCreateWithoutClassInput>
  }

  export type NoteCreateManyClassInputEnvelope = {
    data: NoteCreateManyClassInput | NoteCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutClassesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsCreateNestedManyWithoutStudentInput
    notes?: NoteCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionUncheckedCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsUncheckedCreateNestedManyWithoutStudentInput
    notes?: NoteUncheckedCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassesInput, StudentUncheckedCreateWithoutClassesInput>
  }

  export type ChatSessionUpsertWithWhereUniqueWithoutClassInput = {
    where: ChatSessionWhereUniqueInput
    update: XOR<ChatSessionUpdateWithoutClassInput, ChatSessionUncheckedUpdateWithoutClassInput>
    create: XOR<ChatSessionCreateWithoutClassInput, ChatSessionUncheckedCreateWithoutClassInput>
  }

  export type ChatSessionUpdateWithWhereUniqueWithoutClassInput = {
    where: ChatSessionWhereUniqueInput
    data: XOR<ChatSessionUpdateWithoutClassInput, ChatSessionUncheckedUpdateWithoutClassInput>
  }

  export type ChatSessionUpdateManyWithWhereWithoutClassInput = {
    where: ChatSessionScalarWhereInput
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyWithoutClassInput>
  }

  export type TeacherUpsertWithoutClassesInput = {
    update: XOR<TeacherUpdateWithoutClassesInput, TeacherUncheckedUpdateWithoutClassesInput>
    create: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutClassesInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutClassesInput, TeacherUncheckedUpdateWithoutClassesInput>
  }

  export type TeacherUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
    analytics_requests?: AnalyticsRequestUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type InsightUpsertWithWhereUniqueWithoutClassInput = {
    where: InsightWhereUniqueInput
    update: XOR<InsightUpdateWithoutClassInput, InsightUncheckedUpdateWithoutClassInput>
    create: XOR<InsightCreateWithoutClassInput, InsightUncheckedCreateWithoutClassInput>
  }

  export type InsightUpdateWithWhereUniqueWithoutClassInput = {
    where: InsightWhereUniqueInput
    data: XOR<InsightUpdateWithoutClassInput, InsightUncheckedUpdateWithoutClassInput>
  }

  export type InsightUpdateManyWithWhereWithoutClassInput = {
    where: InsightScalarWhereInput
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyWithoutClassInput>
  }

  export type InsightScalarWhereInput = {
    AND?: InsightScalarWhereInput | InsightScalarWhereInput[]
    OR?: InsightScalarWhereInput[]
    NOT?: InsightScalarWhereInput | InsightScalarWhereInput[]
    id?: StringFilter<"Insight"> | string
    title?: StringFilter<"Insight"> | string
    description?: StringFilter<"Insight"> | string
    classId?: StringFilter<"Insight"> | string
  }

  export type NoteUpsertWithWhereUniqueWithoutClassInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutClassInput, NoteUncheckedUpdateWithoutClassInput>
    create: XOR<NoteCreateWithoutClassInput, NoteUncheckedCreateWithoutClassInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutClassInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutClassInput, NoteUncheckedUpdateWithoutClassInput>
  }

  export type NoteUpdateManyWithWhereWithoutClassInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutClassesInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassesInput, StudentUncheckedUpdateWithoutClassesInput>
    create: XOR<StudentCreateWithoutClassesInput, StudentUncheckedCreateWithoutClassesInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassesInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassesInput, StudentUncheckedUpdateWithoutClassesInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassesInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassesInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    email?: StringFilter<"Student"> | string
    grade?: IntFilter<"Student"> | number
    subject_focus?: StringFilter<"Student"> | string
    learning_style?: StringFilter<"Student"> | string
    preferred_content?: StringFilter<"Student"> | string
    created_at?: DateTimeFilter<"Student"> | Date | string
    updated_at?: DateTimeFilter<"Student"> | Date | string
  }

  export type ClassCreateWithoutInsightsInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionCreateNestedManyWithoutClassInput
    teacher?: TeacherCreateNestedOneWithoutClassesInput
    notes?: NoteCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutInsightsInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    teacherId?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutClassInput
    notes?: NoteUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassesInput
  }

  export type ClassCreateOrConnectWithoutInsightsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutInsightsInput, ClassUncheckedCreateWithoutInsightsInput>
  }

  export type ClassUpsertWithoutInsightsInput = {
    update: XOR<ClassUpdateWithoutInsightsInput, ClassUncheckedUpdateWithoutInsightsInput>
    create: XOR<ClassCreateWithoutInsightsInput, ClassUncheckedCreateWithoutInsightsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutInsightsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutInsightsInput, ClassUncheckedUpdateWithoutInsightsInput>
  }

  export type ClassUpdateWithoutInsightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUpdateManyWithoutClassNestedInput
    teacher?: TeacherUpdateOneWithoutClassesNestedInput
    notes?: NoteUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutInsightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutClassNestedInput
    notes?: NoteUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassesNestedInput
  }

  export type AnalyticsRequestCreateWithoutTeacherInput = {
    id?: string
    request_type: string
    parameters: JsonNullValueInput | InputJsonValue
    status?: string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    completed_at?: Date | string | null
  }

  export type AnalyticsRequestUncheckedCreateWithoutTeacherInput = {
    id?: string
    request_type: string
    parameters: JsonNullValueInput | InputJsonValue
    status?: string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    completed_at?: Date | string | null
  }

  export type AnalyticsRequestCreateOrConnectWithoutTeacherInput = {
    where: AnalyticsRequestWhereUniqueInput
    create: XOR<AnalyticsRequestCreateWithoutTeacherInput, AnalyticsRequestUncheckedCreateWithoutTeacherInput>
  }

  export type AnalyticsRequestCreateManyTeacherInputEnvelope = {
    data: AnalyticsRequestCreateManyTeacherInput | AnalyticsRequestCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutTeacherInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionCreateNestedManyWithoutClassInput
    insights?: InsightCreateNestedManyWithoutClassInput
    notes?: NoteCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutTeacherInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutClassInput
    insights?: InsightUncheckedCreateNestedManyWithoutClassInput
    notes?: NoteUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassesInput
  }

  export type ClassCreateOrConnectWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
  }

  export type ClassCreateManyTeacherInputEnvelope = {
    data: ClassCreateManyTeacherInput | ClassCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type AnalyticsRequestUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AnalyticsRequestWhereUniqueInput
    update: XOR<AnalyticsRequestUpdateWithoutTeacherInput, AnalyticsRequestUncheckedUpdateWithoutTeacherInput>
    create: XOR<AnalyticsRequestCreateWithoutTeacherInput, AnalyticsRequestUncheckedCreateWithoutTeacherInput>
  }

  export type AnalyticsRequestUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AnalyticsRequestWhereUniqueInput
    data: XOR<AnalyticsRequestUpdateWithoutTeacherInput, AnalyticsRequestUncheckedUpdateWithoutTeacherInput>
  }

  export type AnalyticsRequestUpdateManyWithWhereWithoutTeacherInput = {
    where: AnalyticsRequestScalarWhereInput
    data: XOR<AnalyticsRequestUpdateManyMutationInput, AnalyticsRequestUncheckedUpdateManyWithoutTeacherInput>
  }

  export type AnalyticsRequestScalarWhereInput = {
    AND?: AnalyticsRequestScalarWhereInput | AnalyticsRequestScalarWhereInput[]
    OR?: AnalyticsRequestScalarWhereInput[]
    NOT?: AnalyticsRequestScalarWhereInput | AnalyticsRequestScalarWhereInput[]
    id?: StringFilter<"AnalyticsRequest"> | string
    teacher_id?: StringFilter<"AnalyticsRequest"> | string
    request_type?: StringFilter<"AnalyticsRequest"> | string
    parameters?: JsonFilter<"AnalyticsRequest">
    status?: StringFilter<"AnalyticsRequest"> | string
    results?: JsonNullableFilter<"AnalyticsRequest">
    created_at?: DateTimeFilter<"AnalyticsRequest"> | Date | string
    completed_at?: DateTimeNullableFilter<"AnalyticsRequest"> | Date | string | null
  }

  export type ClassUpsertWithWhereUniqueWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutTeacherInput, ClassUncheckedUpdateWithoutTeacherInput>
    create: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutTeacherInput, ClassUncheckedUpdateWithoutTeacherInput>
  }

  export type ClassUpdateManyWithWhereWithoutTeacherInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutTeacherInput>
  }

  export type ChatMessageCreateWithoutSessionInput = {
    id?: string
    sender_type: string
    agent_type?: string | null
    content: string
    message_type?: string
    timestamp?: Date | string
    processed_by?: ChatMessageCreateprocessed_byInput | string[]
    flagged_content?: boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedCreateWithoutSessionInput = {
    id?: string
    sender_type: string
    agent_type?: string | null
    content: string
    message_type?: string
    timestamp?: Date | string
    processed_by?: ChatMessageCreateprocessed_byInput | string[]
    flagged_content?: boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageCreateOrConnectWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageCreateManySessionInputEnvelope = {
    data: ChatMessageCreateManySessionInput | ChatMessageCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutChatSessionsInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    teacher?: TeacherCreateNestedOneWithoutClassesInput
    insights?: InsightCreateNestedManyWithoutClassInput
    notes?: NoteCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutChatSessionsInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    teacherId?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
    insights?: InsightUncheckedCreateNestedManyWithoutClassInput
    notes?: NoteUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassesInput
  }

  export type ClassCreateOrConnectWithoutChatSessionsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutChatSessionsInput, ClassUncheckedCreateWithoutChatSessionsInput>
  }

  export type StudentCreateWithoutChat_sessionsInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    learning_analytics?: LearningAnalyticsCreateNestedManyWithoutStudentInput
    notes?: NoteCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceCreateNestedManyWithoutStudentInput
    classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutChat_sessionsInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    learning_analytics?: LearningAnalyticsUncheckedCreateNestedManyWithoutStudentInput
    notes?: NoteUncheckedCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutChat_sessionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutChat_sessionsInput, StudentUncheckedCreateWithoutChat_sessionsInput>
  }

  export type SessionTakeawayCreateWithoutSessionInput = {
    id?: string
    takeaway_type: string
    summary: string
    key_concepts?: SessionTakeawayCreatekey_conceptsInput | string[]
    effective_methods: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    embedding_vector?: SessionTakeawayCreateembedding_vectorInput | number[]
    relevance_score?: number | null
  }

  export type SessionTakeawayUncheckedCreateWithoutSessionInput = {
    id?: string
    takeaway_type: string
    summary: string
    key_concepts?: SessionTakeawayCreatekey_conceptsInput | string[]
    effective_methods: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    embedding_vector?: SessionTakeawayCreateembedding_vectorInput | number[]
    relevance_score?: number | null
  }

  export type SessionTakeawayCreateOrConnectWithoutSessionInput = {
    where: SessionTakeawayWhereUniqueInput
    create: XOR<SessionTakeawayCreateWithoutSessionInput, SessionTakeawayUncheckedCreateWithoutSessionInput>
  }

  export type SessionTakeawayCreateManySessionInputEnvelope = {
    data: SessionTakeawayCreateManySessionInput | SessionTakeawayCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutSessionInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    session_id?: StringFilter<"ChatMessage"> | string
    sender_type?: StringFilter<"ChatMessage"> | string
    agent_type?: StringNullableFilter<"ChatMessage"> | string | null
    content?: StringFilter<"ChatMessage"> | string
    message_type?: StringFilter<"ChatMessage"> | string
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    processed_by?: StringNullableListFilter<"ChatMessage">
    flagged_content?: BoolFilter<"ChatMessage"> | boolean
    learning_indicators?: JsonNullableFilter<"ChatMessage">
  }

  export type ClassUpsertWithoutChatSessionsInput = {
    update: XOR<ClassUpdateWithoutChatSessionsInput, ClassUncheckedUpdateWithoutChatSessionsInput>
    create: XOR<ClassCreateWithoutChatSessionsInput, ClassUncheckedCreateWithoutChatSessionsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutChatSessionsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutChatSessionsInput, ClassUncheckedUpdateWithoutChatSessionsInput>
  }

  export type ClassUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    teacher?: TeacherUpdateOneWithoutClassesNestedInput
    insights?: InsightUpdateManyWithoutClassNestedInput
    notes?: NoteUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    insights?: InsightUncheckedUpdateManyWithoutClassNestedInput
    notes?: NoteUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassesNestedInput
  }

  export type StudentUpsertWithoutChat_sessionsInput = {
    update: XOR<StudentUpdateWithoutChat_sessionsInput, StudentUncheckedUpdateWithoutChat_sessionsInput>
    create: XOR<StudentCreateWithoutChat_sessionsInput, StudentUncheckedCreateWithoutChat_sessionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutChat_sessionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutChat_sessionsInput, StudentUncheckedUpdateWithoutChat_sessionsInput>
  }

  export type StudentUpdateWithoutChat_sessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    learning_analytics?: LearningAnalyticsUpdateManyWithoutStudentNestedInput
    notes?: NoteUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUpdateManyWithoutStudentNestedInput
    classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutChat_sessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    learning_analytics?: LearningAnalyticsUncheckedUpdateManyWithoutStudentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type SessionTakeawayUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionTakeawayWhereUniqueInput
    update: XOR<SessionTakeawayUpdateWithoutSessionInput, SessionTakeawayUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionTakeawayCreateWithoutSessionInput, SessionTakeawayUncheckedCreateWithoutSessionInput>
  }

  export type SessionTakeawayUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionTakeawayWhereUniqueInput
    data: XOR<SessionTakeawayUpdateWithoutSessionInput, SessionTakeawayUncheckedUpdateWithoutSessionInput>
  }

  export type SessionTakeawayUpdateManyWithWhereWithoutSessionInput = {
    where: SessionTakeawayScalarWhereInput
    data: XOR<SessionTakeawayUpdateManyMutationInput, SessionTakeawayUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionTakeawayScalarWhereInput = {
    AND?: SessionTakeawayScalarWhereInput | SessionTakeawayScalarWhereInput[]
    OR?: SessionTakeawayScalarWhereInput[]
    NOT?: SessionTakeawayScalarWhereInput | SessionTakeawayScalarWhereInput[]
    id?: StringFilter<"SessionTakeaway"> | string
    session_id?: StringFilter<"SessionTakeaway"> | string
    takeaway_type?: StringFilter<"SessionTakeaway"> | string
    summary?: StringFilter<"SessionTakeaway"> | string
    key_concepts?: StringNullableListFilter<"SessionTakeaway">
    effective_methods?: JsonFilter<"SessionTakeaway">
    created_at?: DateTimeFilter<"SessionTakeaway"> | Date | string
    embedding_vector?: FloatNullableListFilter<"SessionTakeaway">
    relevance_score?: FloatNullableFilter<"SessionTakeaway"> | number | null
  }

  export type ChatSessionCreateWithoutMessagesInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    class?: ClassCreateNestedOneWithoutChatSessionsInput
    student: StudentCreateNestedOneWithoutChat_sessionsInput
    takeaways?: SessionTakeawayCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateWithoutMessagesInput = {
    id?: string
    student_id: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: string | null
    takeaways?: SessionTakeawayUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutMessagesInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
  }

  export type ChatSessionUpsertWithoutMessagesInput = {
    update: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatSessionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    class?: ClassUpdateOneWithoutChatSessionsNestedInput
    student?: StudentUpdateOneRequiredWithoutChat_sessionsNestedInput
    takeaways?: SessionTakeawayUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    takeaways?: SessionTakeawayUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type StudentCreateWithoutPreferencesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsCreateNestedManyWithoutStudentInput
    notes?: NoteCreateNestedManyWithoutStudentInput
    classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutPreferencesInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionUncheckedCreateNestedManyWithoutStudentInput
    learning_analytics?: LearningAnalyticsUncheckedCreateNestedManyWithoutStudentInput
    notes?: NoteUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutPreferencesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutPreferencesInput, StudentUncheckedCreateWithoutPreferencesInput>
  }

  export type StudentUpsertWithoutPreferencesInput = {
    update: XOR<StudentUpdateWithoutPreferencesInput, StudentUncheckedUpdateWithoutPreferencesInput>
    create: XOR<StudentCreateWithoutPreferencesInput, StudentUncheckedCreateWithoutPreferencesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutPreferencesInput, StudentUncheckedUpdateWithoutPreferencesInput>
  }

  export type StudentUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUpdateManyWithoutStudentNestedInput
    notes?: NoteUpdateManyWithoutStudentNestedInput
    classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUncheckedUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUncheckedUpdateManyWithoutStudentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type StudentCreateWithoutLearning_analyticsInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionCreateNestedManyWithoutStudentInput
    notes?: NoteCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceCreateNestedManyWithoutStudentInput
    classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutLearning_analyticsInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    grade: number
    subject_focus?: string
    learning_style?: string
    preferred_content?: string
    created_at?: Date | string
    updated_at?: Date | string
    chat_sessions?: ChatSessionUncheckedCreateNestedManyWithoutStudentInput
    notes?: NoteUncheckedCreateNestedManyWithoutStudentInput
    preferences?: StudentPreferenceUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutLearning_analyticsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutLearning_analyticsInput, StudentUncheckedCreateWithoutLearning_analyticsInput>
  }

  export type StudentUpsertWithoutLearning_analyticsInput = {
    update: XOR<StudentUpdateWithoutLearning_analyticsInput, StudentUncheckedUpdateWithoutLearning_analyticsInput>
    create: XOR<StudentCreateWithoutLearning_analyticsInput, StudentUncheckedCreateWithoutLearning_analyticsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutLearning_analyticsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutLearning_analyticsInput, StudentUncheckedUpdateWithoutLearning_analyticsInput>
  }

  export type StudentUpdateWithoutLearning_analyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUpdateManyWithoutStudentNestedInput
    notes?: NoteUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUpdateManyWithoutStudentNestedInput
    classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutLearning_analyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUncheckedUpdateManyWithoutStudentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type ChatSessionCreateWithoutTakeawaysInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
    class?: ClassCreateNestedOneWithoutChatSessionsInput
    student: StudentCreateNestedOneWithoutChat_sessionsInput
  }

  export type ChatSessionUncheckedCreateWithoutTakeawaysInput = {
    id?: string
    student_id: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: string | null
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutTakeawaysInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutTakeawaysInput, ChatSessionUncheckedCreateWithoutTakeawaysInput>
  }

  export type ChatSessionUpsertWithoutTakeawaysInput = {
    update: XOR<ChatSessionUpdateWithoutTakeawaysInput, ChatSessionUncheckedUpdateWithoutTakeawaysInput>
    create: XOR<ChatSessionCreateWithoutTakeawaysInput, ChatSessionUncheckedCreateWithoutTakeawaysInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutTakeawaysInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutTakeawaysInput, ChatSessionUncheckedUpdateWithoutTakeawaysInput>
  }

  export type ChatSessionUpdateWithoutTakeawaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
    class?: ClassUpdateOneWithoutChatSessionsNestedInput
    student?: StudentUpdateOneRequiredWithoutChat_sessionsNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutTakeawaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type TeacherCreateWithoutAnalytics_requestsInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
    classes?: ClassCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutAnalytics_requestsInput = {
    id?: string
    name: string
    role?: $Enums.Role
    email: string
    subject: string
    created_at?: Date | string
    updated_at?: Date | string
    supervised_students?: TeacherCreatesupervised_studentsInput | string[]
    classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutAnalytics_requestsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutAnalytics_requestsInput, TeacherUncheckedCreateWithoutAnalytics_requestsInput>
  }

  export type TeacherUpsertWithoutAnalytics_requestsInput = {
    update: XOR<TeacherUpdateWithoutAnalytics_requestsInput, TeacherUncheckedUpdateWithoutAnalytics_requestsInput>
    create: XOR<TeacherCreateWithoutAnalytics_requestsInput, TeacherUncheckedCreateWithoutAnalytics_requestsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutAnalytics_requestsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutAnalytics_requestsInput, TeacherUncheckedUpdateWithoutAnalytics_requestsInput>
  }

  export type TeacherUpdateWithoutAnalytics_requestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
    classes?: ClassUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutAnalytics_requestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supervised_students?: TeacherUpdatesupervised_studentsInput | string[]
    classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type ChatSessionCreateManyStudentInput = {
    id?: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: string | null
  }

  export type LearningAnalyticsCreateManyStudentInput = {
    id?: string
    date?: Date | string
    session_duration: number
    questions_per_session: number
    response_time_avg: number
    concepts_mastered?: LearningAnalyticsCreateconcepts_masteredInput | string[]
    difficulty_progression: string
    success_rate: number
    preferred_session_time?: string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NoteCreateManyStudentInput = {
    id?: string
    content: string
    classId: string
  }

  export type StudentPreferenceCreateManyStudentInput = {
    id?: string
    preference_type: string
    preference_value: string
    confidence_score?: number
    last_updated?: Date | string
    detection_method: string
  }

  export type ChatSessionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
    class?: ClassUpdateOneWithoutChatSessionsNestedInput
    takeaways?: SessionTakeawayUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    takeaways?: SessionTakeawayUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LearningAnalyticsUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LearningAnalyticsUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session_duration?: IntFieldUpdateOperationsInput | number
    questions_per_session?: FloatFieldUpdateOperationsInput | number
    response_time_avg?: FloatFieldUpdateOperationsInput | number
    concepts_mastered?: LearningAnalyticsUpdateconcepts_masteredInput | string[]
    difficulty_progression?: StringFieldUpdateOperationsInput | string
    success_rate?: FloatFieldUpdateOperationsInput | number
    preferred_session_time?: NullableStringFieldUpdateOperationsInput | string | null
    interaction_patterns?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NoteUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentPreferenceUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
  }

  export type StudentPreferenceUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
  }

  export type StudentPreferenceUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    preference_type?: StringFieldUpdateOperationsInput | string
    preference_value?: StringFieldUpdateOperationsInput | string
    confidence_score?: FloatFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    detection_method?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUpdateManyWithoutClassNestedInput
    teacher?: TeacherUpdateOneWithoutClassesNestedInput
    insights?: InsightUpdateManyWithoutClassNestedInput
    notes?: NoteUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutClassNestedInput
    insights?: InsightUncheckedUpdateManyWithoutClassNestedInput
    notes?: NoteUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
  }

  export type ChatSessionCreateManyClassInput = {
    id?: string
    student_id: string
    session_type?: string
    started_at?: Date | string
    ended_at?: Date | string | null
    status?: string
    questions_asked?: number
    concepts_covered?: ChatSessionCreateconcepts_coveredInput | string[]
    difficulty_level?: $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InsightCreateManyClassInput = {
    id?: string
    title: string
    description: string
  }

  export type NoteCreateManyClassInput = {
    id?: string
    content: string
    studentId: string
  }

  export type ChatSessionUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
    student?: StudentUpdateOneRequiredWithoutChat_sessionsNestedInput
    takeaways?: SessionTakeawayUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    takeaways?: SessionTakeawayUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
    session_type?: StringFieldUpdateOperationsInput | string
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    questions_asked?: IntFieldUpdateOperationsInput | number
    concepts_covered?: ChatSessionUpdateconcepts_coveredInput | string[]
    difficulty_level?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    success_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InsightUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InsightUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InsightUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUpdateManyWithoutStudentNestedInput
    notes?: NoteUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_sessions?: ChatSessionUncheckedUpdateManyWithoutStudentNestedInput
    learning_analytics?: LearningAnalyticsUncheckedUpdateManyWithoutStudentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutStudentNestedInput
    preferences?: StudentPreferenceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    email?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    subject_focus?: StringFieldUpdateOperationsInput | string
    learning_style?: StringFieldUpdateOperationsInput | string
    preferred_content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsRequestCreateManyTeacherInput = {
    id?: string
    request_type: string
    parameters: JsonNullValueInput | InputJsonValue
    status?: string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    completed_at?: Date | string | null
  }

  export type ClassCreateManyTeacherInput = {
    id: string
    name: string
    restrictions?: string | null
    teachingStyle?: string | null
    otherNotes?: string | null
    studentGrade?: string | null
    subject?: string | null
    customInsights?: ClassCreatecustomInsightsInput | string[]
  }

  export type AnalyticsRequestUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnalyticsRequestUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnalyticsRequestUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_type?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    results?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClassUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUpdateManyWithoutClassNestedInput
    insights?: InsightUpdateManyWithoutClassNestedInput
    notes?: NoteUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutClassNestedInput
    insights?: InsightUncheckedUpdateManyWithoutClassNestedInput
    notes?: NoteUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    teachingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    customInsights?: ClassUpdatecustomInsightsInput | string[]
  }

  export type ChatMessageCreateManySessionInput = {
    id?: string
    sender_type: string
    agent_type?: string | null
    content: string
    message_type?: string
    timestamp?: Date | string
    processed_by?: ChatMessageCreateprocessed_byInput | string[]
    flagged_content?: boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SessionTakeawayCreateManySessionInput = {
    id?: string
    takeaway_type: string
    summary: string
    key_concepts?: SessionTakeawayCreatekey_conceptsInput | string[]
    effective_methods: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    embedding_vector?: SessionTakeawayCreateembedding_vectorInput | number[]
    relevance_score?: number | null
  }

  export type ChatMessageUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_type?: StringFieldUpdateOperationsInput | string
    agent_type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    message_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_by?: ChatMessageUpdateprocessed_byInput | string[]
    flagged_content?: BoolFieldUpdateOperationsInput | boolean
    learning_indicators?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SessionTakeawayUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionTakeawayUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionTakeawayUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    takeaway_type?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    key_concepts?: SessionTakeawayUpdatekey_conceptsInput | string[]
    effective_methods?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    embedding_vector?: SessionTakeawayUpdateembedding_vectorInput | number[]
    relevance_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}