
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  email: 'email',
  grade: 'grade',
  subject_focus: 'subject_focus',
  learning_style: 'learning_style',
  preferred_content: 'preferred_content',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  classId: 'classId',
  studentId: 'studentId'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  restrictions: 'restrictions',
  teachingStyle: 'teachingStyle',
  teacherId: 'teacherId',
  otherNotes: 'otherNotes',
  studentGrade: 'studentGrade',
  subject: 'subject',
  customInsights: 'customInsights'
};

exports.Prisma.InsightScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  classId: 'classId'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  email: 'email',
  subject: 'subject',
  created_at: 'created_at',
  updated_at: 'updated_at',
  supervised_students: 'supervised_students'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  session_type: 'session_type',
  started_at: 'started_at',
  ended_at: 'ended_at',
  status: 'status',
  questions_asked: 'questions_asked',
  concepts_covered: 'concepts_covered',
  difficulty_level: 'difficulty_level',
  success_indicators: 'success_indicators',
  classId: 'classId'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  sender_type: 'sender_type',
  agent_type: 'agent_type',
  content: 'content',
  message_type: 'message_type',
  timestamp: 'timestamp',
  processed_by: 'processed_by',
  flagged_content: 'flagged_content',
  learning_indicators: 'learning_indicators'
};

exports.Prisma.StudentPreferenceScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  preference_type: 'preference_type',
  preference_value: 'preference_value',
  confidence_score: 'confidence_score',
  last_updated: 'last_updated',
  detection_method: 'detection_method'
};

exports.Prisma.LearningAnalyticsScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  date: 'date',
  session_duration: 'session_duration',
  questions_per_session: 'questions_per_session',
  response_time_avg: 'response_time_avg',
  concepts_mastered: 'concepts_mastered',
  difficulty_progression: 'difficulty_progression',
  success_rate: 'success_rate',
  preferred_session_time: 'preferred_session_time',
  interaction_patterns: 'interaction_patterns'
};

exports.Prisma.FrequentlyAskedQuestionScalarFieldEnum = {
  id: 'id',
  question_text: 'question_text',
  category: 'category',
  frequency_count: 'frequency_count',
  first_asked: 'first_asked',
  last_asked: 'last_asked',
  common_answers: 'common_answers',
  success_rate: 'success_rate',
  similar_questions: 'similar_questions',
  keywords: 'keywords'
};

exports.Prisma.SessionTakeawayScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  takeaway_type: 'takeaway_type',
  summary: 'summary',
  key_concepts: 'key_concepts',
  effective_methods: 'effective_methods',
  created_at: 'created_at',
  embedding_vector: 'embedding_vector',
  relevance_score: 'relevance_score'
};

exports.Prisma.AnalyticsRequestScalarFieldEnum = {
  id: 'id',
  teacher_id: 'teacher_id',
  request_type: 'request_type',
  parameters: 'parameters',
  status: 'status',
  results: 'results',
  created_at: 'created_at',
  completed_at: 'completed_at'
};

exports.Prisma.AgentInteractionScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  agent_type: 'agent_type',
  interaction_type: 'interaction_type',
  input_data: 'input_data',
  output_data: 'output_data',
  processing_time: 'processing_time',
  timestamp: 'timestamp',
  success: 'success',
  error_message: 'error_message'
};

exports.Prisma.SummaryScalarFieldEnum = {
  id: 'id',
  summary: 'summary'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.Prisma.ModelName = {
  Student: 'Student',
  Note: 'Note',
  Class: 'Class',
  Insight: 'Insight',
  Teacher: 'Teacher',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  StudentPreference: 'StudentPreference',
  LearningAnalytics: 'LearningAnalytics',
  FrequentlyAskedQuestion: 'FrequentlyAskedQuestion',
  SessionTakeaway: 'SessionTakeaway',
  AnalyticsRequest: 'AnalyticsRequest',
  AgentInteraction: 'AgentInteraction',
  Summary: 'Summary'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
