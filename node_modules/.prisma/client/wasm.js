
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  email: 'email',
  grade: 'grade',
  subject_focus: 'subject_focus',
  learning_style: 'learning_style',
  preferred_content: 'preferred_content',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  email: 'email',
  subject: 'subject',
  created_at: 'created_at',
  updated_at: 'updated_at',
  supervised_students: 'supervised_students'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  session_type: 'session_type',
  started_at: 'started_at',
  ended_at: 'ended_at',
  status: 'status',
  questions_asked: 'questions_asked',
  concepts_covered: 'concepts_covered',
  difficulty_level: 'difficulty_level',
  success_indicators: 'success_indicators'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  sender_type: 'sender_type',
  agent_type: 'agent_type',
  content: 'content',
  message_type: 'message_type',
  timestamp: 'timestamp',
  processed_by: 'processed_by',
  flagged_content: 'flagged_content',
  learning_indicators: 'learning_indicators'
};

exports.Prisma.StudentPreferenceScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  preference_type: 'preference_type',
  preference_value: 'preference_value',
  confidence_score: 'confidence_score',
  last_updated: 'last_updated',
  detection_method: 'detection_method'
};

exports.Prisma.LearningAnalyticsScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  date: 'date',
  session_duration: 'session_duration',
  questions_per_session: 'questions_per_session',
  response_time_avg: 'response_time_avg',
  concepts_mastered: 'concepts_mastered',
  difficulty_progression: 'difficulty_progression',
  success_rate: 'success_rate',
  preferred_session_time: 'preferred_session_time',
  interaction_patterns: 'interaction_patterns'
};

exports.Prisma.FrequentlyAskedQuestionScalarFieldEnum = {
  id: 'id',
  question_text: 'question_text',
  category: 'category',
  frequency_count: 'frequency_count',
  first_asked: 'first_asked',
  last_asked: 'last_asked',
  common_answers: 'common_answers',
  success_rate: 'success_rate',
  similar_questions: 'similar_questions',
  keywords: 'keywords'
};

exports.Prisma.SessionTakeawayScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  takeaway_type: 'takeaway_type',
  summary: 'summary',
  key_concepts: 'key_concepts',
  effective_methods: 'effective_methods',
  created_at: 'created_at',
  embedding_vector: 'embedding_vector',
  relevance_score: 'relevance_score'
};

exports.Prisma.AnalyticsRequestScalarFieldEnum = {
  id: 'id',
  teacher_id: 'teacher_id',
  request_type: 'request_type',
  parameters: 'parameters',
  status: 'status',
  results: 'results',
  created_at: 'created_at',
  completed_at: 'completed_at'
};

exports.Prisma.AgentInteractionScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  agent_type: 'agent_type',
  interaction_type: 'interaction_type',
  input_data: 'input_data',
  output_data: 'output_data',
  processing_time: 'processing_time',
  timestamp: 'timestamp',
  success: 'success',
  error_message: 'error_message'
};

exports.Prisma.SummaryScalarFieldEnum = {
  id: 'id',
  summary: 'summary'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.Prisma.ModelName = {
  Student: 'Student',
  Teacher: 'Teacher',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  StudentPreference: 'StudentPreference',
  LearningAnalytics: 'LearningAnalytics',
  FrequentlyAskedQuestion: 'FrequentlyAskedQuestion',
  SessionTakeaway: 'SessionTakeaway',
  AnalyticsRequest: 'AnalyticsRequest',
  AgentInteraction: 'AgentInteraction',
  Summary: 'Summary'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/noah/Documents/code/HackMIT/HackMIT/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/noah/Documents/code/HackMIT/HackMIT/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// --- enums ---\nenum Role {\n  STUDENT\n  TEACHER\n}\n\nenum Difficulty {\n  EASY\n  MEDIUM\n  HARD\n}\n\n// --- models ---\nmodel Student {\n  id                String   @id @default(cuid())\n  name              String\n  role              Role     @default(STUDENT)\n  email             String   @unique\n  grade             Int\n  subject_focus     String   @default(\"general_math\")\n  learning_style    String   @default(\"mixed\") // \"visual\", \"auditory\", \"kinesthetic\", \"mixed\"\n  preferred_content String   @default(\"mixed\") // \"videos\", \"text\", \"interactive\", \"mixed\"\n  created_at        DateTime @default(now())\n  updated_at        DateTime @updatedAt\n\n  // Relationships\n  chat_sessions      ChatSession[]\n  learning_analytics LearningAnalytics[]\n  preferences        StudentPreference[]\n\n  @@map(\"students\")\n}\n\nmodel Teacher {\n  id         String   @id @default(cuid())\n  name       String\n  role       Role     @default(TEACHER)\n  email      String   @unique\n  subject    String\n  created_at DateTime @default(now())\n  updated_at DateTime @updatedAt\n\n  // Relationships\n  supervised_students String[] // Array of student IDs they monitor\n  analytics_requests  AnalyticsRequest[]\n\n  @@map(\"teachers\")\n}\n\nmodel ChatSession {\n  id           String    @id @default(cuid())\n  student_id   String\n  session_type String    @default(\"tutoring\") // \"tutoring\", \"homework_help\", \"concept_review\" \"exam_prep\"\n  started_at   DateTime  @default(now())\n  ended_at     DateTime?\n  status       String    @default(\"active\") // \"active\", \"completed\", \"abandoned\"\n\n  // Learning metrics\n  questions_asked    Int        @default(0)\n  concepts_covered   String[] // Array of math concepts\n  difficulty_level   Difficulty @default(EASY)\n  success_indicators Json? // JSON object with various success metrics \n\n  // Relationships\n  student   Student           @relation(fields: [student_id], references: [id])\n  messages  ChatMessage[]\n  takeaways SessionTakeaway[]\n\n  @@map(\"chat_sessions\")\n}\n\nmodel ChatMessage {\n  id           String   @id @unique @default(cuid())\n  session_id   String\n  sender_type  String // \"student\", \"agent\", \"system\"\n  agent_type   String? // \"student_agent\", \"guardrail_agent\", etc. \n  content      String\n  message_type String   @default(\"text\") // \"text\", \"image\", \"video_link\", \"interactive\"\n  timestamp    DateTime @default(now())\n\n  // Agent processing metadata\n  processed_by        String[] // Array of agent types that processed this message\n  flagged_content     Boolean  @default(false)\n  learning_indicators Json? // JSON with learning preference indicators \n\n  // Relationships\n  session ChatSession @relation(fields: [session_id], references: [id])\n\n  @@map(\"chat_messages\")\n}\n\nmodel StudentPreference {\n  id               String   @id @default(cuid())\n  student_id       String\n  preference_type  String // \"content_format\", \"explanation_style\", \"difficulty_pace\"\n  preference_value String\n  confidence_score Float    @default(0.5) // 0.0 to 1.0\n  last_updated     DateTime @default(now())\n  detection_method String // \"explicit\", \"inferred\", \"feedback\"\n\n  // Relationships\n  student Student @relation(fields: [student_id], references: [id])\n\n  @@map(\"student_preferences\")\n}\n\nmodel LearningAnalytics {\n  id         String   @id @default(cuid())\n  student_id String\n  date       DateTime @default(now())\n\n  // Engagement metrics\n  session_duration      Int // in minutes\n  questions_per_session Float\n  response_time_avg     Float // average response time in seconds\n\n  // Learning progress\n  concepts_mastered      String[]\n  difficulty_progression String // \"improving\", \"stable\", \"declining\"\n  success_rate           Float // 0.0 to 1.0\n\n  // Behavioral patterns\n  preferred_session_time String? // \"morning\", \"afternoon\", \"evening\" \n  interaction_patterns   Json? // JSON with detailed interaction data \n\n  // Relationships\n  student Student @relation(fields: [student_id], references: [id])\n\n  @@map(\"learning_analytics\")\n}\n\nmodel FrequentlyAskedQuestion {\n  id              String   @id @default(cuid())\n  question_text   String\n  category        String // \"algebra\", \"geometry\", \"calculus\", etc.\n  frequency_count Int      @default(1)\n  first_asked     DateTime @default(now())\n  last_asked      DateTime @default(now())\n\n  // Answer metadata\n  common_answers Json? // JSON array of common agent responses \n  success_rate   Float? // How often this FAQ leads to understanding \n\n  // Clustering and similarity\n  similar_questions String[] // Array of similar question IDs\n  keywords          String[]\n\n  @@map(\"frequently_asked_questions\")\n}\n\nmodel SessionTakeaway {\n  id                String   @id @default(cuid())\n  session_id        String\n  takeaway_type     String // \"success_pattern\", \"learning_breakthrough\", \"effective_method\"\n  summary           String\n  key_concepts      String[]\n  effective_methods Json // JSON with methods that worked well\n  created_at        DateTime @default(now())\n\n  // RAG store metadata\n  embedding_vector Float[] // For vector similarity search  \n  relevance_score  Float? // How relevant this takeaway is for future sessions  \n\n  // Relationships\n  session ChatSession @relation(fields: [session_id], references: [id])\n\n  @@map(\"session_takeaways\")\n}\n\nmodel AnalyticsRequest {\n  id           String    @id @default(cuid())\n  teacher_id   String\n  request_type String // \"individual_student\", \"class_overview\", \"faq_analysis\"\n  parameters   Json // JSON with request parameters\n  status       String    @default(\"pending\") // \"pending\", \"processing\", \"completed\"\n  results      Json? // JSON with analytics results \n  created_at   DateTime  @default(now())\n  completed_at DateTime?\n\n  // Relationships\n  teacher Teacher @relation(fields: [teacher_id], references: [id])\n\n  @@map(\"analytics_requests\")\n}\n\nmodel AgentInteraction {\n  id               String   @id @default(cuid())\n  session_id       String?\n  agent_type       String // \"teacher\", \"student\", \"guardrail\", \"aggregation\", \"takeaway\"\n  interaction_type String // \"message_processing\", \"analytics_generation\", \"content_filtering\"\n  input_data       Json\n  output_data      Json\n  processing_time  Float // in milliseconds\n  timestamp        DateTime @default(now())\n\n  // Performance metrics\n  success       Boolean @default(true)\n  error_message String?\n\n  @@map(\"agent_interactions\")\n}\n\nmodel Summary {\n  id      String  @id @default(cuid())\n  summary String?\n\n  @@map(\"summaries\")\n}\n",
  "inlineSchemaHash": "ee55baadc53ee31aca4b8ae708eb298cfcac82413ad894ea28b9ef2d483c4cd3",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Student\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subject_focus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"learning_style\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferred_content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"chat_sessions\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatSessionToStudent\"},{\"name\":\"learning_analytics\",\"kind\":\"object\",\"type\":\"LearningAnalytics\",\"relationName\":\"LearningAnalyticsToStudent\"},{\"name\":\"preferences\",\"kind\":\"object\",\"type\":\"StudentPreference\",\"relationName\":\"StudentToStudentPreference\"}],\"dbName\":\"students\"},\"Teacher\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"supervised_students\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"analytics_requests\",\"kind\":\"object\",\"type\":\"AnalyticsRequest\",\"relationName\":\"AnalyticsRequestToTeacher\"}],\"dbName\":\"teachers\"},\"ChatSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"started_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ended_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questions_asked\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"concepts_covered\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty_level\",\"kind\":\"enum\",\"type\":\"Difficulty\"},{\"name\":\"success_indicators\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ChatSessionToStudent\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"ChatMessage\",\"relationName\":\"ChatMessageToChatSession\"},{\"name\":\"takeaways\",\"kind\":\"object\",\"type\":\"SessionTakeaway\",\"relationName\":\"ChatSessionToSessionTakeaway\"}],\"dbName\":\"chat_sessions\"},\"ChatMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"agent_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processed_by\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"flagged_content\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"learning_indicators\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatMessageToChatSession\"}],\"dbName\":\"chat_messages\"},\"StudentPreference\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preference_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preference_value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidence_score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"last_updated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"detection_method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentPreference\"}],\"dbName\":\"student_preferences\"},\"LearningAnalytics\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session_duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questions_per_session\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"response_time_avg\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"concepts_mastered\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty_progression\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"success_rate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"preferred_session_time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"interaction_patterns\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"LearningAnalyticsToStudent\"}],\"dbName\":\"learning_analytics\"},\"FrequentlyAskedQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question_text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"frequency_count\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"first_asked\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"last_asked\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"common_answers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"success_rate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"similar_questions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keywords\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"frequently_asked_questions\"},\"SessionTakeaway\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"takeaway_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key_concepts\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"effective_methods\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"embedding_vector\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"relevance_score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatSessionToSessionTakeaway\"}],\"dbName\":\"session_takeaways\"},\"AnalyticsRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"request_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parameters\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"results\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completed_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"Teacher\",\"relationName\":\"AnalyticsRequestToTeacher\"}],\"dbName\":\"analytics_requests\"},\"AgentInteraction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"agent_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"interaction_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"input_data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"output_data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"processing_time\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"success\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"error_message\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"agent_interactions\"},\"Summary\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"summaries\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

